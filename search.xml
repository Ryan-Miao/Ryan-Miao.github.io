<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LRU算法实现</title>
      <link href="2021/03/18/%E7%AE%97%E6%B3%95/2.LRU%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
      <url>2021/03/18/%E7%AE%97%E6%B3%95/2.LRU%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<hr><p>链表经常见到的另一个算法是LRU（Last Recently Used）缓存淘汰算法。</p><p>我们一说到高性能，就会使用各种缓存。页面缓存，浏览器缓存，nginx缓存，接口数据缓存。缓存可以大大提高数据获取的速度。然而，缓存减少耗时的同时需要介质存储对应的数据，介质容量是有限的，所以缓存的数据必然有限。当缓存容量满的时候，我们需要淘汰一些数据，插入新的数据。常见的策略有三种：先进先出策略 FIFO（First In，First Out）、最少使用策略 LFU（Least Frequently Used）、最近最少使用策略 LRU（Least Recently Used）。ps. Redis内存满了是怎么淘汰数据的？</p><p>简单的，我们可以使用双向链表来实现LRU。</p><p>假设要缓存的数据为obj，我们维护一个双向链表，链表的数据就是obj。每次访问了数据，我们需要将这个数据obj缓存到我们的双向链表中。</p><ol><li>遍历我们的缓存链表</li><li>如果数据已经存在链表了，取下来，插入链表头部；</li><li>如果数据不在链表中：</li><li>如果链表容量没满，则将我们的obj插入链表头部；</li><li>如果链表容量已经满了，把链表结尾的节点删除，把我们的obj插入头部</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Ryan-Miao/st-repo/2021/%E5%8D%95%E9%93%BE%E8%A1%A8LRU.webp"></p><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p>前面我们熟悉了<a href="https://blog.rmiao.top/2021/03/11/%E7%AE%97%E6%B3%95/1.%E5%8D%95%E9%93%BE%E8%A1%A8%E5%8F%8D%E8%BD%AC/">单链表</a>的数据结构. 而双链表就是在单链节点的基础上新增一个指向前面一个节点的指针。这样，我们可以很容易获取前后的节点。</p><p><img src="https://cdn.jsdelivr.net/gh/Ryan-Miao/st-repo/2021/double-linked-circular-list.webp"></p><p>构造Node结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * node</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ryan Miao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> head = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> Integer data;</span><br><span class="line">    <span class="keyword">private</span> Node next;</span><br><span class="line">    <span class="keyword">private</span> Node pre;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">head</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node node = <span class="keyword">new</span> Node();</span><br><span class="line">        node.setHead(<span class="keyword">true</span>);</span><br><span class="line">        node.setData(-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">normal</span><span class="params">(Integer data)</span> </span>&#123;</span><br><span class="line">        Node node = <span class="keyword">new</span> Node();</span><br><span class="line">        node.setHead(<span class="keyword">false</span>);</span><br><span class="line">        node.setData(data);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        node.setNext(<span class="keyword">this</span>.getNext());</span><br><span class="line">        node.setPre(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.getNext() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.getNext().setPre(node);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.setNext(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        Node p = <span class="keyword">this</span>;</span><br><span class="line">        Node theNext = p.getNext();</span><br><span class="line">        <span class="keyword">if</span> (!p.isHead()) &#123;</span><br><span class="line">            sb.append(p.getData());</span><br><span class="line">            <span class="keyword">if</span> (theNext != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sb.append(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (theNext != <span class="keyword">null</span> &amp;&amp; !theNext.isHead()) &#123;</span><br><span class="line">            sb.append(theNext.getData());</span><br><span class="line">            theNext = theNext.getNext();</span><br><span class="line">            <span class="keyword">if</span> (theNext != <span class="keyword">null</span> &amp;&amp; !theNext.isHead()) &#123;</span><br><span class="line">                sb.append(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据前面的路程图，对于LRU cache, 我们可以分成这几个部分：</p><ul><li>检查链表是否存在给定data</li><li>取下一个节点</li><li>删除尾巴节点</li><li>插入头部</li></ul><h3 id="构造一个链表"><a href="#构造一个链表" class="headerlink" title="构造一个链表"></a>构造一个链表</h3><p>首先创建一个成员变量存储链表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Node cacheHead = Node.head();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger size = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="查询缓存链表中是否存在data"><a href="#查询缓存链表中是否存在data" class="headerlink" title="查询缓存链表中是否存在data"></a>查询缓存链表中是否存在data</h3><p>遍历链表，从链表中查询是否包含data节点。如果找到data节点，取下来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.find if exist remove</span></span><br><span class="line">Node firstNode = cacheHead.getNext();</span><br><span class="line">Node cur = firstNode;</span><br><span class="line"><span class="comment">// 遍历指针，直到null或者head节点。</span></span><br><span class="line"><span class="keyword">while</span> (cur != <span class="keyword">null</span> &amp;&amp; !cur.isHead()) &#123;</span><br><span class="line">    <span class="comment">//因为是循环链表， curNext永远不为null，不过可以做个检测校验</span></span><br><span class="line">    Node curNext = cur.getNext();</span><br><span class="line">    <span class="keyword">if</span> (data.equals(cur.getData())) &#123;</span><br><span class="line">        <span class="comment">// remove</span></span><br><span class="line">        Node pre = cur.getPre();</span><br><span class="line">        log.debug(<span class="string">&quot;exist, remove &#123;&#125;, pre&#123;&#125; -&gt; next&#123;&#125;&quot;</span>, cur.getData(), pre.getData(), curNext.getData());</span><br><span class="line">        pre.setNext(curNext);</span><br><span class="line">        curNext.setPre(pre);</span><br><span class="line">        size.decrementAndGet();</span><br><span class="line"></span><br><span class="line">        node = cur;</span><br><span class="line">        node.setNext(<span class="keyword">null</span>);</span><br><span class="line">        node.setPre(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cur = curNext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="删除尾节点"><a href="#删除尾节点" class="headerlink" title="删除尾节点"></a>删除尾节点</h3><p>当缓存链表已经满了，即缓存满了，要删除链表最后的一个节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Node tail = cacheHead.getPre();</span><br><span class="line">Node tailPre = tail.getPre();</span><br><span class="line">tailPre.setNext(cacheHead);</span><br><span class="line">cacheHead.setPre(tailPre);</span><br><span class="line">size.decrementAndGet();</span><br></pre></td></tr></table></figure><h3 id="插入头节点"><a href="#插入头节点" class="headerlink" title="插入头节点"></a>插入头节点</h3><p>要缓存的新数据放入链表头部。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.insert to head</span></span><br><span class="line"><span class="keyword">if</span> (firstNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">    cacheHead.setPre(node);</span><br><span class="line">    cacheHead.setNext(node);</span><br><span class="line">    node.setPre(cacheHead);</span><br><span class="line">    node.setNext(cacheHead);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    node.setNext(cacheHead.getNext());</span><br><span class="line">    cacheHead.getNext().setPre(node);</span><br><span class="line">    cacheHead.setNext(node);</span><br><span class="line">    node.setPre(cacheHead);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLRUCache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CACHE_MAX_SIZE = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Node cacheHead = Node.head();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger size = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Integer data)</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;add &#123;&#125;&quot;</span>, data);</span><br><span class="line">        <span class="comment">//要插入的node</span></span><br><span class="line">        Node node = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.find if exist remove</span></span><br><span class="line">        Node firstNode = cacheHead.getNext();</span><br><span class="line">        Node cur = firstNode;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span> &amp;&amp; !cur.isHead()) &#123;</span><br><span class="line">            Node curNext = cur.getNext();</span><br><span class="line">            <span class="keyword">if</span> (data.equals(cur.getData())) &#123;</span><br><span class="line">                <span class="comment">// remove</span></span><br><span class="line">                Node pre = cur.getPre();</span><br><span class="line">                log.debug(<span class="string">&quot;exist, remove &#123;&#125;, pre &#123;&#125; -&gt; next &#123;&#125;&quot;</span>, cur.getData(), pre.getData(), curNext.getData());</span><br><span class="line">                pre.setNext(curNext);</span><br><span class="line">                curNext.setPre(pre);</span><br><span class="line">                size.decrementAndGet();</span><br><span class="line"></span><br><span class="line">                node = cur;</span><br><span class="line">                node.setNext(<span class="keyword">null</span>);</span><br><span class="line">                node.setPre(<span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cur = curNext;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if not found and full remove the last</span></span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            node = Node.normal(data);</span><br><span class="line">            <span class="keyword">if</span> (size.get() == CACHE_MAX_SIZE) &#123;</span><br><span class="line">                Node tail = cacheHead.getPre();</span><br><span class="line">                Node tailPre = tail.getPre();</span><br><span class="line">                tailPre.setNext(cacheHead);</span><br><span class="line">                cacheHead.setPre(tailPre);</span><br><span class="line">                size.decrementAndGet();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.insert to head</span></span><br><span class="line">        <span class="keyword">if</span> (firstNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">            cacheHead.setPre(node);</span><br><span class="line">            cacheHead.setNext(node);</span><br><span class="line">            node.setPre(cacheHead);</span><br><span class="line">            node.setNext(cacheHead);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.setNext(cacheHead.getNext());</span><br><span class="line">            cacheHead.getNext().setPre(node);</span><br><span class="line">            cacheHead.setNext(node);</span><br><span class="line">            node.setPre(cacheHead);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        size.incrementAndGet();</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;current cache: &#123;&#125;&quot;</span>, cacheHead.print());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyLRUCache cache = <span class="keyword">new</span> MyLRUCache();</span><br><span class="line">    cache.add(<span class="number">1</span>);</span><br><span class="line">    cache.add(<span class="number">1</span>);</span><br><span class="line">    cache.add(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        cache.add(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cache.add(<span class="number">1</span>);</span><br><span class="line">    cache.add(<span class="number">2</span>);</span><br><span class="line">    cache.add(<span class="number">3</span>);</span><br><span class="line">    cache.add(<span class="number">4</span>);</span><br><span class="line">    cache.add(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">23:28:02.828 [Test worker] DEBUG com.test.algorithm.link.LRUCache - add 1</span><br><span class="line">23:28:02.834 [Test worker] DEBUG com.test.algorithm.link.LRUCache - current cache: 1</span><br><span class="line">23:28:02.834 [Test worker] DEBUG com.test.algorithm.link.LRUCache - add 1</span><br><span class="line">23:28:02.834 [Test worker] DEBUG com.test.algorithm.link.LRUCache - exist, remove 1, pre -1 -&gt; next -1</span><br><span class="line">23:28:02.834 [Test worker] DEBUG com.test.algorithm.link.LRUCache - current cache: 1</span><br><span class="line">23:28:02.834 [Test worker] DEBUG com.test.algorithm.link.LRUCache - add 2</span><br><span class="line">23:28:02.834 [Test worker] DEBUG com.test.algorithm.link.LRUCache - current cache: 2-&gt;1</span><br><span class="line">23:28:02.834 [Test worker] DEBUG com.test.algorithm.link.LRUCache - add 0</span><br><span class="line">23:28:02.834 [Test worker] DEBUG com.test.algorithm.link.LRUCache - current cache: 0-&gt;2-&gt;1</span><br><span class="line">23:28:02.835 [Test worker] DEBUG com.test.algorithm.link.LRUCache - add 1</span><br><span class="line">23:28:02.835 [Test worker] DEBUG com.test.algorithm.link.LRUCache - exist, remove 1, pre 2 -&gt; next -1</span><br><span class="line">23:28:02.835 [Test worker] DEBUG com.test.algorithm.link.LRUCache - current cache: 1-&gt;0-&gt;2</span><br><span class="line">23:28:02.835 [Test worker] DEBUG com.test.algorithm.link.LRUCache - add 2</span><br><span class="line">23:28:02.835 [Test worker] DEBUG com.test.algorithm.link.LRUCache - exist, remove 2, pre 0 -&gt; next -1</span><br><span class="line">23:28:02.835 [Test worker] DEBUG com.test.algorithm.link.LRUCache - current cache: 2-&gt;1-&gt;0</span><br><span class="line">23:28:02.835 [Test worker] DEBUG com.test.algorithm.link.LRUCache - add 3</span><br><span class="line">23:28:02.835 [Test worker] DEBUG com.test.algorithm.link.LRUCache - current cache: 3-&gt;2-&gt;1-&gt;0</span><br><span class="line">23:28:02.835 [Test worker] DEBUG com.test.algorithm.link.LRUCache - add 1</span><br><span class="line">23:28:02.835 [Test worker] DEBUG com.test.algorithm.link.LRUCache - exist, remove 1, pre 2 -&gt; next 0</span><br><span class="line">23:28:02.835 [Test worker] DEBUG com.test.algorithm.link.LRUCache - current cache: 1-&gt;3-&gt;2-&gt;0</span><br><span class="line">23:28:02.836 [Test worker] DEBUG com.test.algorithm.link.LRUCache - add 2</span><br><span class="line">23:28:02.836 [Test worker] DEBUG com.test.algorithm.link.LRUCache - exist, remove 2, pre 3 -&gt; next 0</span><br><span class="line">23:28:02.836 [Test worker] DEBUG com.test.algorithm.link.LRUCache - current cache: 2-&gt;1-&gt;3-&gt;0</span><br><span class="line">23:28:02.836 [Test worker] DEBUG com.test.algorithm.link.LRUCache - add 3</span><br><span class="line">23:28:02.836 [Test worker] DEBUG com.test.algorithm.link.LRUCache - exist, remove 3, pre 1 -&gt; next 0</span><br><span class="line">23:28:02.836 [Test worker] DEBUG com.test.algorithm.link.LRUCache - current cache: 3-&gt;2-&gt;1-&gt;0</span><br><span class="line">23:28:02.836 [Test worker] DEBUG com.test.algorithm.link.LRUCache - add 4</span><br><span class="line">23:28:02.836 [Test worker] DEBUG com.test.algorithm.link.LRUCache - current cache: 4-&gt;3-&gt;2-&gt;1</span><br><span class="line">23:28:02.836 [Test worker] DEBUG com.test.algorithm.link.LRUCache - add 4</span><br><span class="line">23:28:02.836 [Test worker] DEBUG com.test.algorithm.link.LRUCache - exist, remove 4, pre -1 -&gt; next 3</span><br><span class="line">23:28:02.836 [Test worker] DEBUG com.test.algorithm.link.LRUCache - current cache: 4-&gt;3-&gt;2-&gt;1</span><br></pre></td></tr></table></figure><p>可以发现，缓存基本实现了，最近访问的放到链表头部。当缓存满了，删除了尾节点。</p><p>当然，有个最简单的优化地方，当只有一个节点的时候，或者说当要添加的节点就是第一个节点的时候，不需要操作。在这里我们，1和4每次加入的时候都删除了第一个节点，然后再插入。</p><h2 id="优化-hash-table"><a href="#优化-hash-table" class="headerlink" title="优化 - hash table"></a>优化 - hash table</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单链表和反转</title>
      <link href="2021/03/11/%E7%AE%97%E6%B3%95/1.%E5%8D%95%E9%93%BE%E8%A1%A8%E5%8F%8D%E8%BD%AC/"/>
      <url>2021/03/11/%E7%AE%97%E6%B3%95/1.%E5%8D%95%E9%93%BE%E8%A1%A8%E5%8F%8D%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<hr><p>数据结构第一节就是链表。链表由多个node节点组成，每个node节点包含数据和一个指针。指针指向下一个节点。</p><h2 id="组装链表"><a href="#组装链表" class="headerlink" title="组装链表"></a>组装链表</h2><p>经常问单链表的算法，那你首先要定下来链表的结构，而不是直接思考算法。为了方便使用，我们固定一个哨兵作为<br>头节点。数据节点都在头节点之后。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ryan Miao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="comment">//是否是head节点。 true-YES</span></span><br><span class="line">    <span class="keyword">private</span> Boolean head;</span><br><span class="line">    <span class="keyword">private</span> Integer data;</span><br><span class="line">    <span class="keyword">private</span> Node next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，我们创建的一个节点是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Node head = <span class="keyword">new</span> Node();</span><br><span class="line">head.setData(-<span class="number">1</span>);</span><br><span class="line">head.setHead(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">Node node = <span class="keyword">new</span> Node();</span><br><span class="line">node.setData(<span class="number">123</span>);</span><br><span class="line">node.setHead(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p>所以，我们首先要创建一个数组<code>1 2 3 4 5 6 7 8 9</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">toNode</span><span class="params">(Integer[] arr)</span> </span>&#123;</span><br><span class="line">    Node head = <span class="keyword">new</span> Node();</span><br><span class="line">    head.setData(-<span class="number">1</span>);</span><br><span class="line">    head.setHead(<span class="keyword">true</span>);</span><br><span class="line">    Node tail = head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        Node node = <span class="keyword">new</span> Node();</span><br><span class="line">        node.setData(arr[i]);</span><br><span class="line">        node.setNext(<span class="keyword">null</span>);</span><br><span class="line">        node.setHead(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// append to tail</span></span><br><span class="line">        tail.next = node;</span><br><span class="line">        <span class="comment">// set tail to next</span></span><br><span class="line">        tail = node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">makeNode</span><span class="params">(Integer... arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> toNode(arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">makeNode(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为了方便展示，写一个链表遍历的方法，用来打印链表结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printNode</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">    Node p = head.next;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.print(p.getData());</span><br><span class="line">        p = p.next;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表插入"><a href="#链表插入" class="headerlink" title="链表插入"></a>链表插入</h2><p>插入节点tmp. 先找到要插入的位置，然后构造插入节点tmp。让tmp指向后面的节点。前一个节点指向tmp。</p><p><img src="https://cdn.jsdelivr.net/gh/Ryan-Miao/st-repo/2021/%E6%8F%92%E5%85%A5.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Node node = makeNode(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;--------origin--------&quot;</span>);</span><br><span class="line">    printNode(node);</span><br><span class="line">    <span class="comment">// insert 10 between 4 and 5</span></span><br><span class="line">    Node p = node;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p.getData() == <span class="number">4</span>) &#123;</span><br><span class="line">            Node tmp = <span class="keyword">new</span> Node();</span><br><span class="line">            tmp.setData(<span class="number">10</span>);</span><br><span class="line">            tmp.next = p.next;</span><br><span class="line">            p.next = tmp;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;--------inserted--------&quot;</span>);</span><br><span class="line">    printNode(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--------origin--------</span><br><span class="line">3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8-&gt;9</span><br><span class="line">--------inserted--------</span><br><span class="line">3-&gt;4-&gt;10-&gt;5-&gt;6-&gt;7-&gt;8-&gt;9</span><br></pre></td></tr></table></figure><h2 id="链表删除"><a href="#链表删除" class="headerlink" title="链表删除"></a>链表删除</h2><p>链表删除首先要找到要删除的节点，将pre指向next。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Node node = makeNode(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;--------origin--------&quot;</span>);</span><br><span class="line">    printNode(node);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//delete 5</span></span><br><span class="line">    Node head = node;</span><br><span class="line">    Node p = node;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p.getData() == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="comment">//if the first is 5, skip</span></span><br><span class="line">            head.next = p.next;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node pre = p;</span><br><span class="line">        p = p.next;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; p.getData().equals(<span class="number">5</span>)) &#123;</span><br><span class="line">            pre.next = p.next;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;---------deleted---------&quot;</span>);</span><br><span class="line">    printNode(head);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--------origin--------</span><br><span class="line"><span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>-&gt;<span class="number">6</span>-&gt;<span class="number">7</span>-&gt;<span class="number">8</span>-&gt;<span class="number">9</span></span><br><span class="line">---------deleted---------</span><br><span class="line"><span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">6</span>-&gt;<span class="number">7</span>-&gt;<span class="number">8</span>-&gt;<span class="number">9</span></span><br></pre></td></tr></table></figure><h2 id="链表反转"><a href="#链表反转" class="headerlink" title="链表反转"></a>链表反转</h2><p>链表最常问的算法就是反转了。目前有两个常见的方式，一个是头插入法，新建一个head，遍历原来的head，插入新链表。</p><p>一个是就地反转。将链表看成两部分，左边是新链表，右边是旧链表。每次从右边取出一个，插入左边的头部，最终全部插入左边。实现整体反转。</p><h3 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h3><p><img src="https://cdn.jsdelivr.net/gh/Ryan-Miao/st-repo/2021/%E5%A4%B4%E6%8F%92%E6%B3%95.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">headInsert</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// new node head</span></span><br><span class="line">    <span class="keyword">final</span> Node newHead = <span class="keyword">new</span> Node();</span><br><span class="line">    newHead.setHead(<span class="keyword">true</span>);</span><br><span class="line">    newHead.setData(head.getData());</span><br><span class="line">    <span class="comment">// pointer</span></span><br><span class="line">    Node p = head;</span><br><span class="line">    <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 暂存取下的节点</span></span><br><span class="line">        Node tmp = p.next;</span><br><span class="line">        <span class="comment">// 原来的链表指针移动到下一个</span></span><br><span class="line">        p.next = p.next.next;</span><br><span class="line">        <span class="comment">// 取下的节点 指向 新链表的头节点之后</span></span><br><span class="line">        tmp.next = newHead.next;</span><br><span class="line">        <span class="comment">// 新链表指向 插入的节点</span></span><br><span class="line">        newHead.next = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;origin&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8-&gt;9</span><br><span class="line">---------head insert--------</span><br><span class="line">9-&gt;8-&gt;7-&gt;6-&gt;5-&gt;4-&gt;3</span><br></pre></td></tr></table></figure><h3 id="就地反转"><a href="#就地反转" class="headerlink" title="就地反转"></a>就地反转</h3><p><img src="https://cdn.jsdelivr.net/gh/Ryan-Miao/st-repo/2021/link-inverse.webp"></p><p><a href="https://cdn.jsdelivr.net/gh/Ryan-Miao/st-repo/2021/link-inverse.gliffy">原始文件</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">inverse</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 左边链表的tail节点</span></span><br><span class="line">    Node leftTail = head.next;</span><br><span class="line">    <span class="keyword">if</span> (leftTail == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前的指针右边原始链表的第一个节点</span></span><br><span class="line">    Node pCur = leftTail.next;</span><br><span class="line">    <span class="keyword">if</span> (pCur == <span class="keyword">null</span>) &#123;</span><br><span class="line">        leftTail.next = head;</span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> leftTail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (pCur != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 左边链表tail指向 右边链表的下个节点</span></span><br><span class="line">        leftTail.next = pCur.next;</span><br><span class="line">        <span class="comment">// 右边链表第一个取下来，要插入左边链表的头部，head就是左边链表的头部</span></span><br><span class="line">        pCur.next = head.next;</span><br><span class="line">        <span class="comment">// head指向插入的节点</span></span><br><span class="line">        head.next = pCur;</span><br><span class="line">        <span class="comment">// 右边链表指针移动下一个节点</span></span><br><span class="line">        pCur = leftTail.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;origin&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8-&gt;9</span><br><span class="line">---------inverse--------</span><br><span class="line">9-&gt;8-&gt;7-&gt;6-&gt;5-&gt;4-&gt;3</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.algorithm.link;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ryan Miao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> https://github.com/Ryan-Miao/l4Java/blob/master/src/test/java/com/test/algorithm/link/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%8F%8D%E8%BD%AC.java</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 单链表反转 </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Ryan Miao</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Boolean head;</span><br><span class="line">        <span class="keyword">private</span> Integer data;</span><br><span class="line">        <span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node node = makeNode(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------origin--------&quot;</span>);</span><br><span class="line">        printNode(node);</span><br><span class="line">        <span class="comment">// insert 10 between 4 and 5</span></span><br><span class="line">        Node p = node;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.getData() == <span class="number">4</span>) &#123;</span><br><span class="line">                Node tmp = <span class="keyword">new</span> Node();</span><br><span class="line">                tmp.setData(<span class="number">10</span>);</span><br><span class="line">                tmp.next = p.next;</span><br><span class="line">                p.next = tmp;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------inserted--------&quot;</span>);</span><br><span class="line">        printNode(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node node = makeNode(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------origin--------&quot;</span>);</span><br><span class="line">        printNode(node);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//delete 5</span></span><br><span class="line">        Node head = node;</span><br><span class="line">        Node p = node;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.getData() == <span class="number">5</span>) &#123;</span><br><span class="line">                <span class="comment">//if the first is 5, skip</span></span><br><span class="line">                head.next = p.next;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Node pre = p;</span><br><span class="line">            p = p.next;</span><br><span class="line">            <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; p.getData().equals(<span class="number">5</span>)) &#123;</span><br><span class="line">                pre.next = p.next;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---------deleted---------&quot;</span>);</span><br><span class="line">        printNode(head);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">makeNode</span><span class="params">(Integer... arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> toNode(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> Integer[]&#123;</span><br><span class="line">                <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        inverse(arr);</span><br><span class="line">        headInsert(arr);</span><br><span class="line">        Integer[] arr2 = <span class="keyword">new</span> Integer[]&#123;</span><br><span class="line">                <span class="number">1</span></span><br><span class="line">        &#125;;</span><br><span class="line">        headInsert(arr2);</span><br><span class="line">        inverse(arr2);</span><br><span class="line">        Integer[] arr3 = <span class="keyword">new</span> Integer[]&#123;</span><br><span class="line">                <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        inverse(arr3);</span><br><span class="line">        headInsert(arr3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">headInsert</span><span class="params">(Integer[] arr)</span> </span>&#123;</span><br><span class="line">        Node head = toNode(arr);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=========origin==========&quot;</span>);</span><br><span class="line">        printNode(head);</span><br><span class="line"></span><br><span class="line">        Node inverse = headInsert(head);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---------head insert--------&quot;</span>);</span><br><span class="line">        printNode(inverse);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">headInsert</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// new node head</span></span><br><span class="line">        <span class="keyword">final</span> Node newHead = <span class="keyword">new</span> Node();</span><br><span class="line">        newHead.setHead(<span class="keyword">true</span>);</span><br><span class="line">        newHead.setData(head.getData());</span><br><span class="line">        <span class="comment">// pointer</span></span><br><span class="line">        Node p = head;</span><br><span class="line">        <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 暂存取下的节点</span></span><br><span class="line">            Node tmp = p.next;</span><br><span class="line">            <span class="comment">// 原来的链表指针移动到下一个</span></span><br><span class="line">            p.next = p.next.next;</span><br><span class="line">            <span class="comment">// 取下的节点 指向 新链表的头节点之后</span></span><br><span class="line">            tmp.next = newHead.next;</span><br><span class="line">            <span class="comment">// 新链表指向 插入的节点</span></span><br><span class="line">            newHead.next = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inverse</span><span class="params">(Integer[] arr)</span> </span>&#123;</span><br><span class="line">        Node head = toNode(arr);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=========origin==========&quot;</span>);</span><br><span class="line">        printNode(head);</span><br><span class="line"></span><br><span class="line">        Node inverse = inverse(head);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---------inverse--------&quot;</span>);</span><br><span class="line">        printNode(inverse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">toNode</span><span class="params">(Integer[] arr)</span> </span>&#123;</span><br><span class="line">        Node head = <span class="keyword">new</span> Node();</span><br><span class="line">        head.setData(-<span class="number">1</span>);</span><br><span class="line">        head.setHead(<span class="keyword">true</span>);</span><br><span class="line">        Node tail = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            Node node = <span class="keyword">new</span> Node();</span><br><span class="line">            node.setData(arr[i]);</span><br><span class="line">            node.setNext(<span class="keyword">null</span>);</span><br><span class="line">            tail.next = node;</span><br><span class="line">            tail = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">inverse</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 左边链表的tail节点</span></span><br><span class="line">        Node leftTail = head.next;</span><br><span class="line">        <span class="keyword">if</span> (leftTail == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当前的指针右边原始链表的第一个节点</span></span><br><span class="line">        Node pCur = leftTail.next;</span><br><span class="line">        <span class="keyword">if</span> (pCur == <span class="keyword">null</span>) &#123;</span><br><span class="line">            leftTail.next = head;</span><br><span class="line">            head.next = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> leftTail;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (pCur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 左边链表tail指向 右边链表的下个节点</span></span><br><span class="line">            leftTail.next = pCur.next;</span><br><span class="line">            <span class="comment">// 右边链表的当前第一个节点指向昨天链表的head</span></span><br><span class="line">            pCur.next = head.next;</span><br><span class="line">            <span class="comment">// head指向插入的节点</span></span><br><span class="line">            head.next = pCur;</span><br><span class="line">            <span class="comment">// 右边链表指针移动下一个节点</span></span><br><span class="line">            pCur = leftTail.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printNode</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">        Node p = head.next;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(p.getData());</span><br><span class="line">            p = p.next;</span><br><span class="line">            <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础之Synchronized原理</title>
      <link href="2020/11/11/java-synchronized/"/>
      <url>2020/11/11/java-synchronized/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Ryan-Miao/st-repo/go/2020/20201111161952.png"></p><p>思维导图svg:  <a href="https://note.youdao.com/ynoteshare1/index.html?id=eb05fdceddd07759b8b82c5b9094021a&amp;type=note">https://note.youdao.com/ynoteshare1/index.html?id=eb05fdceddd07759b8b82c5b9094021a&amp;type=note</a></p><p>在多线程使用共享资源的时候， 我们可以使用synchronized来锁定共享资源，使得同一时刻，只有一个线程可以访问和修改它，修改完毕后，其他线程才可以使用。这种方式叫做互斥锁。</p><p>当一个共享数据被当前正在访问到线程添加了互斥锁之后，在同一时刻，其他线程只能等待，直到当前线程释放该锁。</p><p>synchronized可以添加互斥锁，并且保证被其他线程看到。</p><h2 id="synchronized的三种应用方式"><a href="#synchronized的三种应用方式" class="headerlink" title="synchronized的三种应用方式"></a>synchronized的三种应用方式</h2><p>synchronized关键字最主要有以下3种应用方式，下面分别介绍</p><ul><li>修饰实例方法，作用于当前实例加锁，进入同步代码钱要获得当前实例的锁</li><li>修饰静态方法，作用于当前类对象加锁，进入同步代码前要获得当前类对象的锁</li><li>修饰代码块，指定加锁对象，对给定对象加锁，进入同步代码块前要获得给定对象的锁</li></ul><h3 id="synchronized作用于实例方法"><a href="#synchronized作用于实例方法" class="headerlink" title="synchronized作用于实例方法"></a>synchronized作用于实例方法</h3><p>我们设置类变量<code>static</code>为共享资源， 然后多个线程去修改。修改的含义是： 先读取，计算，再写入。那么这个过程就不是原子的，多个线程操作就会出现共享资源争抢问题。</p><p>我们在实例方法上添加synchronized，那么，同一个实例执行本方法时，抢到锁到可以执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountingSync</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">//共享资源(临界资源)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * synchronized 修饰实例方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span></span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000000</span>;j++)&#123;</span><br><span class="line">            increase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        AccountingSync instance=<span class="keyword">new</span> AccountingSync();</span><br><span class="line">        Thread t1=<span class="keyword">new</span> Thread(instance);</span><br><span class="line">        Thread t2=<span class="keyword">new</span> Thread(instance);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出结果:</span></span><br><span class="line"><span class="comment">     * 2000000</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，开启两个线程去操作共享变量，两个线程执行的是同一个实例对象。如果不添加synchronized，其中<code>i++</code>不是原子操作，该操作先读取值，然后再写入一个新值。如果两个线程都读取了i=5，然后线程1写入i=6.线程2后写入，但也是写入i=6, 并不是我们期望的i=7. </p><p>添加synchronized修饰后，线程安全，线程必须获取到这个实力到锁才能执行读取和写入。</p><p>注意，我们synchronized修饰到是类方法，锁的是实例，当多个线程操作不同实例时，会使用不同实例的锁，就无法保证修改static变量的有序性了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountingSyncBad</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span></span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000000</span>;j++)&#123;</span><br><span class="line">            increase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//new新实例</span></span><br><span class="line">        Thread t1=<span class="keyword">new</span> Thread(<span class="keyword">new</span> AccountingSyncBad());</span><br><span class="line">        <span class="comment">//new新实例</span></span><br><span class="line">        Thread t2=<span class="keyword">new</span> Thread(<span class="keyword">new</span> AccountingSyncBad());</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        <span class="comment">//join含义:当前线程A等待thread线程终止之后才能从thread.join()返回</span></span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码，两个线程持有不同的对象instance，也就是使用不同的锁， 也就不会互斥访问共享资源，就会出现线程安全问题。</p><h3 id="synchronized作用于静态方法"><a href="#synchronized作用于静态方法" class="headerlink" title="synchronized作用于静态方法"></a>synchronized作用于静态方法</h3><p>synchronized作用于静态方法时，锁就是当前类到class对象锁。由于静态成员变量不专属于任何一个实例对象，是类成员，因此通过class对象锁可以控制静态成员的并发操作。</p><h3 id="synchronized同步代码块"><a href="#synchronized同步代码块" class="headerlink" title="synchronized同步代码块"></a>synchronized同步代码块</h3><p>除了使用关键字修饰实例方法和静态方法外，还可以使用同步代码块。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountingSync</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> AccountingSync instance=<span class="keyword">new</span> AccountingSync();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//省略其他耗时操作....</span></span><br><span class="line">        <span class="comment">//使用同步代码块对变量i进行同步操作,锁对象为instance</span></span><br><span class="line">        <span class="keyword">synchronized</span>(instance)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000000</span>;j++)&#123;</span><br><span class="line">                    i++;</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1=<span class="keyword">new</span> Thread(instance);</span><br><span class="line">        Thread t2=<span class="keyword">new</span> Thread(instance);</span><br><span class="line">        t1.start();t2.start();</span><br><span class="line">        t1.join();t2.join();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述代码，将synchronized作用于一个给定的实例对象instance, 即当前实例对象就是锁对象，每次当线程进入synchronized包裹到代码块时，就会要求当前线程持有instance实例对象锁，如果当前有其他线程正持有该对象锁，那么新到到线程就必须等待，这样也就保证了每次只有一个线程执行<code>i++</code>操作。当然， 还可以使用this或者class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//this,当前实例对象锁</span></span><br><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000000</span>;j++)&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//class对象锁</span></span><br><span class="line"><span class="keyword">synchronized</span>(AccountingSync.class)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000000</span>;j++)&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>了解完synchronized到基本含义和使用方式后，我们进一步深入理解synchronized的底层实现原理。</p><h2 id="synchronized底层语义原理"><a href="#synchronized底层语义原理" class="headerlink" title="synchronized底层语义原理"></a>synchronized底层语义原理</h2><p>Java虚拟机中的同步(Synchronization)基于进入和退出管程(Monitor)对象实现，无论是显示同步(有明确的monitorenter和monitorexit指令，即同步代码块)还是隐式同步都是如此。在Java语言中，同步用的最多到地方可能是被synchronized修饰的同步方法。同步方法并不是由monitorenter和monitorexit指令来实现同步到，而是由方法调用指令读取运行时常量池中方法到ACC_SYNCHRONIZED标志来隐式实现的，关于这点，稍后分析。下面先来了解一个概念：Java对象头，这对深入理解synchronized实现原理非常关键。</p><h3 id="理解Java对象头与Monitor"><a href="#理解Java对象头与Monitor" class="headerlink" title="理解Java对象头与Monitor"></a>理解Java对象头与Monitor</h3><p>在JVM中，对象在内存中到布局分为三块区域：对象头，实例数据和对齐填充。 如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Ryan-Miao/st-repo/go/2020/20201111162101.png"></p><ul><li>实例变量： 存放类的属性数据信息，包括父类的属性信息，如果是数组的实例部分还包括数组的长度，这部分内存按4字节对齐。</li><li>填充数据：由于虚拟机要求对象起始地址必须是8字节的整数倍。填充数据不是必须存在的，仅仅是为了字节对齐。</li></ul><p>而对于顶部，则是Java头对象，它是实现synchronized的锁对象的基础，这点我们重点分析它。 一般而言，synchronized使用的锁对象是存储在Java对象头里的，jvm采用2个字来存储对象头(如果对象是数组则会分配3个字，多出来到1个字记录的是数组长度)，其主要结构是由Mark Word和Class Metadata Address组成，其结构说明如下：</p><table><thead><tr><th>虚拟机位数</th><th>头对象结构</th><th>说明</th></tr></thead><tbody><tr><td>32/64bit</td><td>Mark Word</td><td>存储对象的hashcode, 锁信息或分代年龄或GC标志等信息</td></tr><tr><td>32/64bit</td><td>Class Metadata Address</td><td>类型指针指向对象的类元数据， JVM通过这个指针确定该对象是哪个类的实例</td></tr></tbody></table><p>其中Mark Word在默认情况下存储着对象的HashCode, 分代年龄，锁标记等， 以下是32位JVM的Mark Word默认存储结构。</p><table><thead><tr><th>锁状态</th><th>25bit</th><th>4bit</th><th>1bit是否是偏向锁</th><th>2bit锁标志位</th></tr></thead><tbody><tr><td>无锁状态</td><td>对象HashCode</td><td>对象分代年龄</td><td>0</td><td>01</td></tr></tbody></table><p>由于对象头的信息是与对象自身定义的数据没有关系到额外存储成本，因此考虑到JVM的空间效率，Mark Word被设计成为一个非固定的数据结构，以便存储更多有效的数据，它会根据对象本身的状态复用自己的存储空间，如32位JVM下，除了上述列出的Mark Word默认存储结构外，还有如下可能变化的结构：</p><p><img src="https://cdn.jsdelivr.net/gh/Ryan-Miao/st-repo/go/2020/20201111162132.png"></p><p>其中，轻量级锁和偏向锁是Java 6对synchronized锁进行优化后新增加的，我们稍后简要分析。这里我们主要分析一下重量级锁也就是通常说的synchronized的对象锁，锁标识位10，其中指针指向的时monitor对象(也称为管程或监视器锁)的起始地址。每个对象都存在着一个monitor与之关联，对象与其monitor之间的关系有存在多种实现方式，如monitor可以与对象一起创建销毁或当线程试图获取对象锁时自动生成，但当一个monitor被某个线程持有后，它便处于锁定状态。在Java虚拟机(HotSpot)中，monitor是由ObjetMonitor实现的，其主要数据结构如下(位于HotSpot虚拟机源码ObjectMonitor.hpp文件，C++实现的)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ObjectMonitor() &#123;</span><br><span class="line">    _header       &#x3D; NULL;</span><br><span class="line">    _count        &#x3D; 0; &#x2F;&#x2F;记录个数</span><br><span class="line">    _waiters      &#x3D; 0,</span><br><span class="line">    _recursions   &#x3D; 0;</span><br><span class="line">    _object       &#x3D; NULL;</span><br><span class="line">    _owner        &#x3D; NULL;</span><br><span class="line">    _WaitSet      &#x3D; NULL; &#x2F;&#x2F;处于wait状态的线程，会被加入到_WaitSet</span><br><span class="line">    _WaitSetLock  &#x3D; 0 ;</span><br><span class="line">    _Responsible  &#x3D; NULL ;</span><br><span class="line">    _succ         &#x3D; NULL ;</span><br><span class="line">    _cxq          &#x3D; NULL ;</span><br><span class="line">    FreeNext      &#x3D; NULL ;</span><br><span class="line">    _EntryList    &#x3D; NULL ; &#x2F;&#x2F;处于等待锁block状态的线程，会被加入到该列表</span><br><span class="line">    _SpinFreq     &#x3D; 0 ;</span><br><span class="line">    _SpinClock    &#x3D; 0 ;</span><br><span class="line">    OwnerIsThread &#x3D; 0 ;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>ObjectMonitor中有两个队列， <code>_WaitSet</code>和<code>_EntryList</code>， 用来保存ObjectWaiter对象列表(每个等待锁的线程都会被封装成ObjectWaiter对象)， <code>_owner</code>指向持有ObjectMonitor对象的线程。</p><p>当多个线程同时访问一段同步代码时，首先会进入<code>_EntryList</code>集合， 当线程获取到对象的monitor后，进入<code>_owner</code>区域， 并把monitor中到onwer变量设置为当前线程， 同时monitor中的计数器count+1。</p><p>若线程调用wait()方法，将释放当前持有的monitor， owner=null， count-1, 同时该线程进入waitSet集合中等待被唤醒。若当前线程执行完毕也将释放monitor(锁)，并复位变量的值，以便其他线程进入获取monitor(锁)。 如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/Ryan-Miao/st-repo/go/2020/20201111162159.png"></p><p>由此看来，monitor对象存在于每个Java对象的对象头中(存储的指针的指向)，synchronized锁便是通过这种方式获取锁的，也是为什么Java中任意对象可以作为锁的原因，同时也是notify/notifyAll/wait等方法存在于顶级对象Object中的原因(关于这点稍后还会进行分析)，ok~，有了上述知识基础后，下面我们将进一步分析synchronized在字节码层面的具体语义实现。</p><h2 id="synchronized代码块底层原理"><a href="#synchronized代码块底层原理" class="headerlink" title="synchronized代码块底层原理"></a>synchronized代码块底层原理</h2><p>现在我们重新定义一个synchronized修饰的同步代码块， 在代码块中操作共享变量i。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncCodeBlock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">syncTask</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//同步代码库</span></span><br><span class="line">       <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">           i++;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译上述代码，并使用javap反编译得到字节码如下(这里我们省略一部分没有必要的信息)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">Classfile &#x2F;Users&#x2F;zejian&#x2F;Downloads&#x2F;Java8_Action&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;zejian&#x2F;concurrencys&#x2F;SyncCodeBlock.class</span><br><span class="line">  Last modified 2017-6-2; size 426 bytes</span><br><span class="line">  MD5 checksum c80bc322c87b312de760942820b4fed5</span><br><span class="line">  Compiled from &quot;SyncCodeBlock.java&quot;</span><br><span class="line">public class com.zejian.concurrencys.SyncCodeBlock</span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 52</span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">  &#x2F;&#x2F;........省略常量池中数据</span><br><span class="line">  &#x2F;&#x2F;构造函数</span><br><span class="line">  public com.zejian.concurrencys.SyncCodeBlock();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack&#x3D;1, locals&#x3D;1, args_size&#x3D;1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 7: 0</span><br><span class="line">  &#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;主要看看syncTask方法实现&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">  public void syncTask();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack&#x3D;3, locals&#x3D;3, args_size&#x3D;1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: dup</span><br><span class="line">         2: astore_1</span><br><span class="line">         3: monitorenter  &#x2F;&#x2F;注意此处，进入同步方法</span><br><span class="line">         4: aload_0</span><br><span class="line">         5: dup</span><br><span class="line">         6: getfield      #2             &#x2F;&#x2F; Field i:I</span><br><span class="line">         9: iconst_1</span><br><span class="line">        10: iadd</span><br><span class="line">        11: putfield      #2            &#x2F;&#x2F; Field i:I</span><br><span class="line">        14: aload_1</span><br><span class="line">        15: monitorexit   &#x2F;&#x2F;注意此处，退出同步方法</span><br><span class="line">        16: goto          24</span><br><span class="line">        19: astore_2</span><br><span class="line">        20: aload_1</span><br><span class="line">        21: monitorexit &#x2F;&#x2F;注意此处，退出同步方法</span><br><span class="line">        22: aload_2</span><br><span class="line">        23: athrow</span><br><span class="line">        24: return</span><br><span class="line">      Exception table:</span><br><span class="line">      &#x2F;&#x2F;省略其他字节码.......</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: &quot;SyncCodeBlock.java&quot;</span><br></pre></td></tr></table></figure><p>我们主要关注字节码中的如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3: monitorenter  &#x2F;&#x2F;进入同步方法</span><br><span class="line">&#x2F;&#x2F;..........省略其他  </span><br><span class="line">15: monitorexit   &#x2F;&#x2F;退出同步方法</span><br><span class="line">16: goto          24</span><br><span class="line">&#x2F;&#x2F;省略其他.......</span><br><span class="line">21: monitorexit &#x2F;&#x2F;退出同步方法</span><br></pre></td></tr></table></figure><p>从字节码中可知同步语句块的实现使用的是monitorenter 和 monitorexit 指令，其中monitorenter指令指向同步代码块的开始位置，monitorexit指令则指明同步代码块的结束位置，当执行monitorenter指令时，当前线程将试图获取 objectref(即对象锁) 所对应的 monitor 的持有权，当 objectref 的 monitor 的进入计数器为 0，那线程可以成功取得 monitor，并将计数器值设置为 1，取锁成功。如果当前线程已经拥有 objectref 的 monitor 的持有权，那它可以重入这个 monitor (关于重入性稍后会分析)，重入时计数器的值也会加 1。倘若其他线程已经拥有 objectref 的 monitor 的所有权，那当前线程将被阻塞，直到正在执行线程执行完毕，即monitorexit指令被执行，执行线程将释放 monitor(锁)并设置计数器值为0 ，其他线程将有机会持有 monitor 。值得注意的是编译器将会确保无论方法通过何种方式完成，方法中调用过的每条 monitorenter 指令都有执行其对应 monitorexit 指令，而无论这个方法是正常结束还是异常结束。为了保证在方法异常完成时 monitorenter 和 monitorexit 指令依然可以正确配对执行，编译器会自动产生一个异常处理器，这个异常处理器声明可处理所有的异常，它的目的就是用来执行 monitorexit 指令。从字节码中也可以看出多了一个monitorexit指令，它就是异常结束时被执行的释放monitor 的指令。</p><h2 id="synchronized方法底层原理"><a href="#synchronized方法底层原理" class="headerlink" title="synchronized方法底层原理"></a>synchronized方法底层原理</h2><p>方法级的同步是隐式，即无需通过字节码指令来控制的，它实现在方法调用和返回操作之中。JVM可以从方法常量池中的方法表结构(method_info Structure) 中的 ACC_SYNCHRONIZED 访问标志区分一个方法是否同步方法。当方法调用时，调用指令将会 检查方法的 ACC_SYNCHRONIZED 访问标志是否被设置，如果设置了，执行线程将先持有monitor（虚拟机规范中用的是管程一词）， 然后再执行方法，最后再方法完成(无论是正常完成还是非正常完成)时释放monitor。在方法执行期间，执行线程持有了monitor，其他任何线程都无法再获得同一个monitor。如果一个同步方法执行期间抛 出了异常，并且在方法内部无法处理此异常，那这个同步方法所持有的monitor将在异常抛到同步方法之外时自动释放。下面我们看看字节码层面如何实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">syncTask</span><span class="params">()</span></span>&#123;</span><br><span class="line">           i++;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用javap反编译后的字节码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Classfile /Users/zejian/Downloads/Java8_Action/src/main/java/com/zejian/concurrencys/SyncMethod.class</span><br><span class="line">  Last modified <span class="number">2017</span>-<span class="number">6</span>-<span class="number">2</span>; size <span class="number">308</span> bytes</span><br><span class="line">  MD5 checksum f34075a8c059ea65e4cc2fa610e0cd94</span><br><span class="line">  Compiled from <span class="string">&quot;SyncMethod.java&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">zejian</span>.<span class="title">concurrencys</span>.<span class="title">SyncMethod</span></span></span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//省略没必要的字节码</span></span><br><span class="line">  <span class="comment">//==================syncTask方法======================</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">syncTask</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    <span class="comment">//方法标识ACC_PUBLIC代表public修饰，ACC_SYNCHRONIZED指明该方法为同步方法</span></span><br><span class="line">    flags: ACC_PUBLIC, ACC_SYNCHRONIZED</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">3</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: dup</span><br><span class="line">         2: getfield      #2                  // Field i:I</span><br><span class="line">         <span class="number">5</span>: iconst_1</span><br><span class="line">         <span class="number">6</span>: iadd</span><br><span class="line">         7: putfield      #2                  // Field i:I</span><br><span class="line">        <span class="number">10</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">12</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">13</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">&quot;SyncMethod.java&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从字节码中可以看出，synchronized修饰的方法并没有monitorenter指令和monitorexit指令，取得代之的确实是ACC_SYNCHRONIZED标识，该标识指明了该方法是一个同步方法，JVM通过该ACC_SYNCHRONIZED访问标志来辨别一个方法是否声明为同步方法，从而执行相应的同步调用。这便是synchronized锁在同步代码块和同步方法上实现的基本原理。同时我们还必须注意到的是在Java早期版本中，synchronized属于重量级锁，效率低下，因为监视器锁（monitor）是依赖于底层的操作系统的Mutex Lock来实现的，而操作系统实现线程之间的切换时需要从用户态转换到核心态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，这也是为什么早期的synchronized效率低的原因。庆幸的是在Java 6之后Java官方对从JVM层面对synchronized较大优化，所以现在的synchronized锁效率也优化得很不错了，Java 6之后，为了减少获得锁和释放锁所带来的性能消耗，引入了轻量级锁和偏向锁，接下来我们将简单了解一下Java官方在JVM层面对synchronized锁的优化。</p><h2 id="Java虚拟机对synchronized的优化"><a href="#Java虚拟机对synchronized的优化" class="headerlink" title="Java虚拟机对synchronized的优化"></a>Java虚拟机对synchronized的优化</h2><p>锁的状态总共有四种，无锁状态、偏向锁、轻量级锁和重量级锁。随着锁的竞争，锁可以从偏向锁升级到轻量级锁，再升级到重量级锁。</p><p>但锁的升级是单向的，也就是说只能从低到高升级，不会出现锁的降级。</p><p>关于重量级锁，前面我们已经详细分析过，下面我们将介绍偏向锁和轻量级锁以及JVM的其他优化手段，这里并不打算深入到每个锁的实现和转换过程，更多地是阐述Java虚拟机提供到每个锁的核心优化思想。</p><h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p>偏向锁是Java 6之后加入的新锁，它是一种针对加锁操作的优化手段，经过研究发现，在大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，因此为了减少同一线程获取锁(会涉及到一些CAS操作,耗时)的代价而引入偏向锁。偏向锁的核心思想是，如果一个线程获得了锁，那么锁就进入偏向模式，此时Mark Word 的结构也变为偏向锁结构，当这个线程再次请求锁时，无需再做任何同步操作，即获取锁的过程，这样就省去了大量有关锁申请的操作，从而也就提供程序的性能。所以，对于没有锁竞争的场合，偏向锁有很好的优化效果，毕竟极有可能连续多次是同一个线程申请相同的锁。但是对于锁竞争比较激烈的场合，偏向锁就失效了，因为这样场合极有可能每次申请锁的线程都是不相同的，因此这种场合下不应该使用偏向锁，否则会得不偿失，需要注意的是，偏向锁失败后，并不会立即膨胀为重量级锁，而是先升级为轻量级锁。下面我们接着了解轻量级锁。</p><h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><p>倘若偏向锁失败，虚拟机并不会立即升级为重量级锁，它还会尝试使用一种称为轻量级锁的优化手段(1.6之后加入的)，此时Mark Word 的结构也变为轻量级锁的结构。轻量级锁能够提升程序性能的依据是“对绝大部分的锁，在整个同步周期内都不存在竞争”，注意这是经验数据。需要了解的是，轻量级锁所适应的场景是线程交替执行同步块的场合，如果存在同一时间访问同一锁的场合，就会导致轻量级锁膨胀为重量级锁。</p><h3 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h3><p>轻量级锁失败后，虚拟机为了避免线程真实地在操作系统层面挂起，还会进行一项称为自旋锁的优化手段。这是基于在大多数情况下，线程持有锁的时间都不会太长，如果直接挂起操作系统层面的线程可能会得不偿失，毕竟操作系统实现线程之间的切换时需要从用户态转换到核心态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，因此自旋锁会假设在不久将来，当前的线程可以获得锁，因此虚拟机会让当前想要获取锁的线程做几个空循环(这也是称为自旋的原因)，一般不会太久，可能是50个循环或100循环，在经过若干次循环后，如果得到锁，就顺利进入临界区。如果还不能获得锁，那就会将线程在操作系统层面挂起，这就是自旋锁的优化方式，这种方式确实也是可以提升效率的。最后没办法也就只能升级为重量级锁了。</p><h3 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h3><p>消除锁是虚拟机另外一种锁的优化，这种优化更彻底，Java虚拟机在JIT编译时(可以简单理解为当某段代码即将第一次被执行时进行编译，又称即时编译)，通过对运行上下文的扫描，去除不可能存在共享资源竞争的锁，通过这种方式消除没有必要的锁，可以节省毫无意义的请求锁时间，如下StringBuffer的append是一个同步方法，但是在add方法中的StringBuffer属于一个局部变量，并且不会被其他线程所使用，因此StringBuffer不可能存在共享资源竞争的情景，JVM会自动将其锁消除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by zejian on 2017&#x2F;6&#x2F;4.</span><br><span class="line"> * Blog : http:&#x2F;&#x2F;blog.csdn.net&#x2F;javazejian [原文地址,请尊重原创]</span><br><span class="line"> * 消除StringBuffer同步锁</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class StringBufferRemoveSync &#123;</span><br><span class="line"></span><br><span class="line">    public void add(String str1, String str2) &#123;</span><br><span class="line">        &#x2F;&#x2F;StringBuffer是线程安全,由于sb只会在append方法中使用,不可能被其他线程引用</span><br><span class="line">        &#x2F;&#x2F;因此sb属于不可能共享的资源,JVM会自动消除内部的锁</span><br><span class="line">        StringBuffer sb &#x3D; new StringBuffer();</span><br><span class="line">        sb.append(str1).append(str2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        StringBufferRemoveSync rmsync &#x3D; new StringBufferRemoveSync();</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 10000000; i++) &#123;</span><br><span class="line">            rmsync.add(&quot;abc&quot;, &quot;123&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="无锁-gt-偏向锁"><a href="#无锁-gt-偏向锁" class="headerlink" title="无锁-&gt;偏向锁"></a>无锁-&gt;偏向锁</h3><p><img src="https://cdn.jsdelivr.net/gh/Ryan-Miao/st-repo/go/2020/20201111162337.png"></p><ol><li>首先A 线程访问同步代码块，使用CAS 操作将 Thread ID 放到 Mark Word 当中；</li><li>如果CAS 成功，此时线程A 就获取了锁</li><li>如果线程CAS 失败，证明有别的线程持有锁，例如上图的线程B 来CAS 就失败的，这个时候启动偏向锁撤销 （revoke bias）；</li><li>锁撤销流程：- 让 A线程在全局安全点阻塞（类似于GC前线程在安全点阻塞） - 遍历线程栈，查看是否有被锁对象的锁记录（ Lock Record），如果有Lock Record，需要修复锁记录和Markword，使其变成无锁状态。- 恢复A线程 - 将是否为偏向锁状态置为 0 ，开始进行轻量级加锁流程 （后面讲述）</li></ol><h3 id="偏向锁-gt-轻量级锁"><a href="#偏向锁-gt-轻量级锁" class="headerlink" title="偏向锁 -&gt; 轻量级锁"></a>偏向锁 -&gt; 轻量级锁</h3><ol><li>线程A在自己的栈桢中创建锁记录 LockRecord。</li><li>线程A 将 Mark Word 拷贝到线程栈的 Lock Record中，这个位置叫 displayced hdr，如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/Ryan-Miao/st-repo/go/2020/20201111162405.png"></li><li>将锁记录中的Owner指针指向加锁的对象（存放对象地址）。</li><li>将锁对象的对象头的MarkWord替换为指向锁记录的指针。这二步如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/Ryan-Miao/st-repo/go/2020/20201111162515.png"><br>这时锁标志位变成 00 ，表示轻量级锁</li></ol><h3 id="轻量级锁-gt-重量级锁"><a href="#轻量级锁-gt-重量级锁" class="headerlink" title="轻量级锁 -&gt; 重量级锁"></a>轻量级锁 -&gt; 重量级锁</h3><p>当锁升级为轻量级锁之后，如果依然有新线程过来竞争锁，首先新线程会自旋尝试获取锁，尝试到一定次数（默认10次）依然没有拿到，锁就会升级成重量级锁.</p><p><img src="https://cdn.jsdelivr.net/gh/Ryan-Miao/st-repo/go/2020/20201111162542.png"></p><ol><li>将 MonitorObject 中的 _owner设置成 A线程；</li><li>将 mark word 设置为 Monitor 对象地址，锁标志位改为10</li><li>将B线程阻塞放到 ContentionList 队列；</li></ol><p>JVM 每次从Waiting Queue 的尾部取出一个线程放到OnDeck作为候选者，但是如果并发比较高，Waiting Queue会被大量线程执行CAS操作，为了降低对尾部元素的竞争，将Waiting Queue 拆分成ContentionList 和 EntryList 二个队列, JVM将一部分线程移到EntryList 作为准备进OnDeck的预备线程。另外说明几点：</p><p>所有请求锁的线程首先被放在ContentionList这个竞争队列中;</p><p>Contention List 中那些有资格成为候选资源的线程被移动到 Entry List 中;</p><p>任意时刻，最多只有一个线程正在竞争锁资源，该线程被成为 OnDeck;</p><p>当前已经获取到所资源的线程被称为 Owner;</p><p>处于 ContentionList、EntryList、WaitSet 中的线程都处于阻塞状态，该阻塞是由操作系统来完成的(Linux 内核下采用 <code>pthread_mutex_lock</code> 内核函数实现的);</p><p>作为Owner 的A 线程执行过程中，可能调用wait 释放锁，这个时候A线程进入 Wait Set , 等待被唤醒。</p><p>这是 synchronized 在 JDK 6之前的实现原理。</p><h2 id="关于synchronized-可能需要了解的关键点"><a href="#关于synchronized-可能需要了解的关键点" class="headerlink" title="关于synchronized 可能需要了解的关键点"></a>关于synchronized 可能需要了解的关键点</h2><h3 id="synchronized的可重入性"><a href="#synchronized的可重入性" class="headerlink" title="synchronized的可重入性"></a>synchronized的可重入性</h3><p>从互斥锁的设计上来说，当一个线程试图操作一个由其他线程持有的对象锁的临界资源时，将会处于阻塞状态，但当一个线程再次请求自己持有对象锁的临界资源时，这种情况属于重入锁，请求将会成功，在java中synchronized是基于原子性的内部锁机制，是可重入的，因此在一个线程调用synchronized方法的同时在其方法体内部调用该对象另一个synchronized方法，也就是说一个线程得到一个对象锁后再次请求该对象锁，是允许的，这就是synchronized的可重入性。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountingSync</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> AccountingSync instance=<span class="keyword">new</span> AccountingSync();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000000</span>;j++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//this,当前实例对象锁</span></span><br><span class="line">            <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">                i++;</span><br><span class="line">                increase();<span class="comment">//synchronized的可重入性</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span></span>&#123;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1=<span class="keyword">new</span> Thread(instance);</span><br><span class="line">        Thread t2=<span class="keyword">new</span> Thread(instance);</span><br><span class="line">        t1.start();t2.start();</span><br><span class="line">        t1.join();t2.join();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正如代码所演示的，在获取当前实例对象锁后进入synchronized代码块执行同步代码，并在代码块中调用了当前实例对象的另外一个synchronized方法，再次请求当前实例锁时，将被允许，进而执行方法体代码，这就是重入锁最直接的体现，需要特别注意另外一种情况，当子类继承父类时，子类也是可以通过可重入锁调用父类的同步方法。注意由于synchronized是基于monitor实现的，因此每次重入，monitor中的计数器仍会加1。</p><h2 id="线程中断与synchronized"><a href="#线程中断与synchronized" class="headerlink" title="线程中断与synchronized"></a>线程中断与synchronized</h2><h3 id="线程中断"><a href="#线程中断" class="headerlink" title="线程中断"></a>线程中断</h3><p>正如中断二字所表达的意义，在线程运行(run方法)中间打断它，在Java中，提供了以下3个有关线程中断的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//中断线程（实例方法）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> Thread.interrupt();</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断线程是否被中断（实例方法）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> Thread.isInterrupted();</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否被中断并清除当前中断状态（静态方法）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> Thread.interrupted();</span><br></pre></td></tr></table></figure><p>当一个线程处于被阻塞状态或者试图执行一个阻塞操作时，使用Thread.interrupt()方式中断该线程，注意此时将会抛出一个InterruptedException的异常，同时中断状态将会被复位(由中断状态改为非中断状态)，如下代码将演示该过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterruputSleepThread3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//while在try中，通过异常中断就可以退出run循环</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                        <span class="comment">//当前线程处于阻塞状态，异常必须捕捉处理，无法往外抛出</span></span><br><span class="line">                        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Interruted When Sleep&quot;</span>);</span><br><span class="line">                    <span class="keyword">boolean</span> interrupt = <span class="keyword">this</span>.isInterrupted();</span><br><span class="line">                    <span class="comment">//中断状态被复位</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;interrupt:&quot;</span>+interrupt);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t1.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//中断处于阻塞状态的线程</span></span><br><span class="line">        t1.interrupt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 输出结果:</span></span><br><span class="line"><span class="comment">           Interruted When Sleep</span></span><br><span class="line"><span class="comment">           interrupt:false</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上述代码所示，我们创建一个线程，并在线程中调用了sleep方法从而使用线程进入阻塞状态，启动线程后，调用线程实例对象的interrupt方法中断阻塞异常，并抛出InterruptedException异常，此时中断状态也将被复位。这里有些人可能会诧异，为什么不用Thread.sleep(2000);而是用TimeUnit.SECONDS.sleep(2);其实原因很简单，前者使用时并没有明确的单位说明，而后者非常明确表达秒的单位，事实上后者的内部实现最终还是调用了Thread.sleep(2000);，但为了编写的代码语义更清晰，建议使用TimeUnit.SECONDS.sleep(2);的方式，注意TimeUnit是个枚举类型。ok~，除了阻塞中断的情景，我们还可能会遇到处于运行期且非阻塞的状态的线程，这种情况下，直接调用Thread.interrupt()中断线程是不会得到任响应的，如下代码，将无法中断非阻塞状态下的线程：</p><h2 id="等待唤醒机制与synchronized"><a href="#等待唤醒机制与synchronized" class="headerlink" title="等待唤醒机制与synchronized"></a>等待唤醒机制与synchronized</h2><p>所谓等待唤醒机制本篇主要指的是notify/notifyAll和wait方法，在使用这3个方法时，必须处于synchronized代码块或者synchronized方法中，否则就会抛出IllegalMonitorStateException异常，这是因为调用这几个方法前必须拿到当前对象的监视器monitor对象，也就是说notify/notifyAll和wait方法依赖于monitor对象，在前面的分析中，我们知道monitor 存在于对象头的Mark Word 中(存储monitor引用指针)，而synchronized关键字可以获取 monitor ，这也就是为什么notify/notifyAll和wait方法必须在synchronized代码块或者synchronized方法调用的原因。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">       obj.wait();</span><br><span class="line">       obj.notify();</span><br><span class="line">       obj.notifyAll();         </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>需要特别理解的一点是，与sleep方法不同的是wait方法调用完成后，线程将被暂停，但wait方法将会释放当前持有的监视器锁(monitor)，直到有线程调用notify/notifyAll方法后方能继续执行，而sleep方法只让线程休眠并不释放锁。同时notify/notifyAll方法调用后，并不会马上释放监视器锁，而是在相应的synchronized(){}/synchronized方法执行结束后才自动释放锁。</p><h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><ul><li><a href="https://blog.csdn.net/javazejian/article/details/72828483">https://blog.csdn.net/javazejian/article/details/72828483</a></li><li><a href="https://mp.weixin.qq.com/s/ts2Pjz3VpWm50kY-Ru7iTA">https://mp.weixin.qq.com/s/ts2Pjz3VpWm50kY-Ru7iTA</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java复习3-类的继承</title>
      <link href="2018/07/10/java-class-inheritance/"/>
      <url>2018/07/10/java-class-inheritance/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本次学习面向对象设计的另外一个基本概念：继承（inheritance）。这是Java程序设计中的一项核心技术。另外，还要学习反射(reflection)的概念。</p><a id="more"></a><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="类、超类、子类"><a href="#类、超类、子类" class="headerlink" title="类、超类、子类"></a>类、超类、子类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键字extends表明正在构造的新类派生于一个已存在的类。已存在的类称为<strong>超类(superclass)**、</strong>基类(base class)<strong>或</strong>父类(parent class)<strong>; 新类称为</strong>子类(sbclass)<strong>、</strong>派生类(derived class)<strong>、</strong>孩子类(childe class)**. </p><h3 id="覆盖方法"><a href="#覆盖方法" class="headerlink" title="覆盖方法"></a>覆盖方法</h3><p>子类继承父类的字段和方法，但有些方法子类想要修改，可以使用**覆盖(override)**。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">int</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bonus;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBonus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bonus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBonus</span><span class="params">(<span class="keyword">int</span> bonus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bonus = bonus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;manager: &quot;</span> + <span class="keyword">super</span>.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getSalary() + bonus;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>extends关键字记得带s</li><li>超类的private字段是不能直接在子类中调用的，子类只能调用父类的protected和默认方法</li><li>覆盖的要求是完全一致，即子类的方法名，参数类型和顺序，返回值要完全一致</li><li>对于要覆盖的方法要添加注解<code>@Overide</code></li><li>想要调用父类的同名方法，使用<code>supper</code></li><li>子类覆盖父类的方法的权限不可以比父类小，父类是public的，子类也只能是public，父类是protected，子类不能是private</li></ul><p>值得关注的是<strong>子类不能继承父类的private相关字段和方法</strong>。</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Employee manager = <span class="keyword">new</span> Manager();</span><br></pre></td></tr></table></figure><p>可以将子类赋值给父类。那么，我们创建多个子类，都可以赋值给Employee，employee在运行时可以知道具体是哪个子类的实例，但只能执行父类已有的方法。即子类新加的方法不能执行。子类覆盖的方法可以执行。</p><p>一个对象变量可以指示多种实际类型的现象被称为<strong>多态(polymorphism)**。在运行时能够自动地选择调用哪个方法的现象称为</strong>动态绑定(dynamic binding)**.</p><p>Java不支持多继承，一个类只能继承一个类，而不是多个。要想要实现多个，可以使用接口。</p><p>所有的类都继承Object对象。</p><p>多态可以用关系<strong>is-a</strong>来描述，表明程序中出现超类的任何地方都可以用子类对象置换。</p><h3 id="理解方法调用"><a href="#理解方法调用" class="headerlink" title="理解方法调用"></a>理解方法调用</h3><p>假设要调用x.f(args), 隐式参数x声明为类C的一个对象。下面是调用过程的详细描述:</p><p>1)编译器查看对象的声明类型和方法名。假设调用x.f(args),且隐士参数x声明为C类对象。需要注意的是：有可能存在多个名字为f，但参数类型不一样的方法。例如，可能存在多个名字为f，但参数类型不一样的方法。例如，可能存在方法f(int)和方法f(String). 编译器会一一列举所有C类中名为f的方法和其超类中访问属性为public且名为f的方法(超类的私有方法不可访问)。</p><p>至此，编译器已获得所有可能被调用的候选方法。</p><p>2)接下来，编译器将查看调用方法时提供的参数类型。如果在所有名为f的方法中存在一个与提供的参数类型完全匹配，将选择这个方法。这个过程被称为**重载解析(overloading resolution)**。例如，对于调用x.f(“Hello”)，编译器将会挑选f(String), 而不是f(int). 由于允许类型转换(int可以转double，Manager可以转Employee), 所以这个过程可能很复杂。如果编译器找不到与参数匹配的方法，或发现经过类型转换后有多个方法与之匹配，将会报告一个错误。</p><p>至此，编译已获得需要调用的方法名字和参数类型。</p><p>3)如果是private方法、static方法、final方法或者构造器，那么编译器将可以准确地知道应该调用哪个方法，我们将这种调用方式成为**静态绑定(static binding)**。与之对应，调用的方法依赖于隐士参数的实际类型，并且在运行时实现动态绑定。</p><p>4)当程序运行，并且采用动态绑定调用方法时，虚拟机一定调用与x所引用对象的<strong>实际类型</strong>最合适的那个类的方法。假设x的实际类型是D, 它是C类的子类。如果D类定义了方法f(String), 就直接调用它，否则，将在D类的超类中寻找f(String)，以此类推。</p><p>每次调用方法都要进行搜索，时间开销相当大。因此，虚拟机预先为每个类创建了一个**方法表(method table)**，其中列出了所有方法的签名和实际调用的方法。这样一来，在真正调用方法的时候，虚拟机仅查找这个表就行了。</p><p>动态绑定有一个非常重要的特性：无需对现存程序进行扩展。</p><h3 id="阻止继承：final类和方法"><a href="#阻止继承：final类和方法" class="headerlink" title="阻止继承：final类和方法"></a>阻止继承：final类和方法</h3><p>有时候，可能希望阻止人们利用某个类定义的子类。不允许扩展的类被成为final类。如果在定义类的时候使用了final修饰符就表明这个类是final类。</p><p>类的特定方法也可以声明为final的。这样，子类就不能覆盖这个方法(final类中的所有方法自动成为final方法)。</p><p>我们将方法声明为final的主要目的是：确保他们不会在子类中改变语义。</p><h3 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h3><p>只能在继承层次内进行类型转换。  </p><p>在将超类转换成子类之前，应该使用instanceof进行检查。</p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>用abstract修饰的类是抽象类。用abstract修饰的方法是抽象方法。</p><p>抽象类不能实例化。抽象方法没有方法体。</p><h3 id="受保护访问"><a href="#受保护访问" class="headerlink" title="受保护访问"></a>受保护访问</h3><ol><li>仅本类可见–private</li><li>所有类可见–public</li><li>对本包和所有子类可见–protected</li><li>对本包可见–默认，不需要修饰符</li></ol><h3 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h3><p>java.util.Objects#equals</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object a, Object b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a == b) || (a != <span class="keyword">null</span> &amp;&amp; a.equals(b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java.util.Arrays#equals(long[], long[])</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(<span class="keyword">long</span>[] a, <span class="keyword">long</span>[] a2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a==a2)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (a==<span class="keyword">null</span> || a2==<span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> length = a.length;</span><br><span class="line">    <span class="keyword">if</span> (a2.length != length)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length; i++)</span><br><span class="line">        <span class="keyword">if</span> (a[i] != a2[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hashcode"><a href="#hashcode" class="headerlink" title="hashcode"></a>hashcode</h3><p>java.util.Objects#hashCode</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> o != <span class="keyword">null</span> ? o.hashCode() : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java.util.Arrays#hashCode(long[])</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">(<span class="keyword">long</span> a[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> element : a) &#123;</span><br><span class="line">        <span class="keyword">int</span> elementHash = (<span class="keyword">int</span>)(element ^ (element &gt;&gt;&gt; <span class="number">32</span>));</span><br><span class="line">        result = <span class="number">31</span> * result + elementHash;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象包装器与自动装箱"><a href="#对象包装器与自动装箱" class="headerlink" title="对象包装器与自动装箱"></a>对象包装器与自动装箱</h3><p>所有的基本类型都有一个 与之对应的类。Integer对应int。这些类称为包装器（wrapper）.</p><p>对象包装器不可变，且是final的。</p><p>int当做Integer叫做自动装箱（autoboxing）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">list.add(<span class="number">1</span>) 会被编译器编译成</span><br><span class="line"></span><br><span class="line">list.add(Integer.valueOf(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>Integer当做int叫做自动拆箱。</p><p>装箱和拆箱是编译器认可的，而不是虚拟机。编译器在生成类的字节码时，插入必要的方法调用。虚拟机只是执行这些字节码。</p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>反射库（reflection library）提供了一个非常丰富且精心设计的工具集，以便编写能够动态操纵Java代码的程序。</p><h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><p>Class类保存了Java对象归属类的信息。</p><p>虚拟机为每个类型管理一个Class对象。所以，只有是这个类的Class对象，都是同一个。如何获得这个Class呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;通过类名获取</span><br><span class="line">Class clazz &#x3D; Employee.class;</span><br><span class="line"></span><br><span class="line">Employee employee &#x3D; new Employee();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;通过实例获取</span><br><span class="line">Class&lt;? extends Employee&gt; aClass &#x3D; employee.getClass();</span><br><span class="line">String name &#x3D; aClass.getName();</span><br><span class="line">assertEquals(&quot;com.test.java.clazz.polimophic.entity.Employee&quot;, name);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;通过名字加载</span><br><span class="line">Class&lt;?&gt; fromName &#x3D; Class.forName(&quot;com.test.java.clazz.polimophic.entity.Employee&quot;);</span><br></pre></td></tr></table></figure><p>另外，数组的class对象有点特殊。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String doubleArrayName = Double[].class.getName();</span><br><span class="line">assertEquals(<span class="string">&quot;[Ljava.lang.Double;&quot;</span>, doubleArrayName);</span><br><span class="line"></span><br><span class="line">String intArrayName = <span class="keyword">int</span>[].class.getName();</span><br><span class="line">assertEquals(<span class="string">&quot;[I&quot;</span>, intArrayName);</span><br></pre></td></tr></table></figure><p>那么，我拿到Class对象如何确定是不是我需要的呢，用equals比较吗？因为虚拟机为每个类管理一个Class对象，所以可以用==。</p><p>对于上述三种方式获得的Class对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">assertTrue(clazz == aClass);</span><br><span class="line">assertEquals(clazz, aClass);</span><br><span class="line">assertEquals(clazz, fromName);</span><br></pre></td></tr></table></figure><p>Class.forName(“xxx.xx.xxx”)会抛出一个检查性异常，如果找不到class会报ClassNotFoundException.</p><h3 id="利用反射分析类的能力"><a href="#利用反射分析类的能力" class="headerlink" title="利用反射分析类的能力"></a>利用反射分析类的能力</h3><p>在java.lang.reflect包中有三个类Field、Method和Constructor分别用户描述类的字段、方法和构造器。这三个类都有一个getName方法，返回名称。</p><p>Field类有个getType方法，返回描述字段所属的Class对象。</p><p>Method和Constructor类有能够报告参数类型的方法，Method类还有一个可以报告返回类型的方法。</p><p>这三个类还有一个叫做getModifiers的方法，它将返回一个整型数值，用不同的位开关描述public和static这样的修饰符使用情况。总之Modifiers提供了修饰符的判断方法。</p><p>Class类中的getFields、getMethods和getConstructors方法将分别返回类提供的public字段、方法和构造器组，其中包括超类的共有成员。</p><p>Class类的getDeclareFields、getDeclareMethods和getDeclareConstructors方法将分别返回类中声明的全部字段、方法和构造器，其中包括私有和受保护的成员，但不包括超类的成员。</p><h4 id="获取Class-name-修饰符，父类"><a href="#获取Class-name-修饰符，父类" class="headerlink" title="获取Class name, 修饰符，父类"></a>获取Class name, 修饰符，父类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printClazz</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Class clazz = Employee.class;</span><br><span class="line">    Class superclass = clazz.getSuperclass();</span><br><span class="line">    String modifiers = Modifier.toString(clazz.getModifiers());</span><br><span class="line">    <span class="keyword">if</span> (modifiers.length()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        System.out.print(modifiers + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;class &quot;</span> + clazz.getName());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (superclass!=<span class="keyword">null</span> &amp;&amp; superclass != Object.class)&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot; extends &quot;</span> + superclass.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class com.test.java.clazz.polimophic.entity.Employee</span><br></pre></td></tr></table></figure><h4 id="获取构造器"><a href="#获取构造器" class="headerlink" title="获取构造器"></a>获取构造器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prinConstructor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    Class clazz = Manager.class;</span><br><span class="line">    Constructor[] declaredConstructors = clazz.getDeclaredConstructors();</span><br><span class="line">    <span class="keyword">for</span> (Constructor declaredConstructor : declaredConstructors) &#123;</span><br><span class="line">        String name = declaredConstructor.getName();</span><br><span class="line">        String modifiers = Modifier.toString(clazz.getModifiers());</span><br><span class="line">        <span class="keyword">if</span> (modifiers.length()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            sb.append(modifiers).append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(name).append(<span class="string">&quot;(&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印参数</span></span><br><span class="line">        Class[] parameterTypes = declaredConstructor.getParameterTypes();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameterTypes.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                sb.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(parameterTypes[i].getName());</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(<span class="string">&quot;);&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    assertEquals(<span class="string">&quot;public com.test.java.clazz.polimophic.entity.Manager(java.lang.String, int, int);&quot;</span>, sb.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="打印声明的方法"><a href="#打印声明的方法" class="headerlink" title="打印声明的方法"></a>打印声明的方法</h4><p>只打印自己的声明的方法，而不包含父类的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  public java.lang.String getName();</span></span><br><span class="line"><span class="comment"> *  public int getSalary();</span></span><br><span class="line"><span class="comment"> *  public void setBonus(arg0);</span></span><br><span class="line"><span class="comment"> *  public int getBonus();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    Class clazz = Manager.class;</span><br><span class="line">    Method[] methods = clazz.getDeclaredMethods();</span><br><span class="line">    <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">        Class&lt;?&gt; returnType = method.getReturnType();</span><br><span class="line">        String name = method.getName();</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        String modifiers = Modifier.toString(method.getModifiers());</span><br><span class="line">        <span class="keyword">if</span> (modifiers.length()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.print(modifiers + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.print(returnType.getName() + <span class="string">&quot; &quot;</span> + name + <span class="string">&quot;(&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Parameter[] parameters = method.getParameters();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameters.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(parameters[i].getName());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;);\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="打印声明的字段"><a href="#打印声明的字段" class="headerlink" title="打印声明的字段"></a>打印声明的字段</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  private int bonus;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printFields</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Class clazz = Manager.class;</span><br><span class="line">    Field[] declaredFields = clazz.getDeclaredFields();</span><br><span class="line">    <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">        Class&lt;?&gt; type = declaredField.getType();</span><br><span class="line">        String name = declaredField.getName();</span><br><span class="line">        System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        String modifiers = Modifier.toString(declaredField.getModifiers());</span><br><span class="line">        <span class="keyword">if</span> (modifiers.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.print(modifiers + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(type.getName() + <span class="string">&quot; &quot;</span> + name + <span class="string">&quot;;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取某个字段的value"><a href="#获取某个字段的value" class="headerlink" title="获取某个字段的value"></a>获取某个字段的value</h4><p>Field提供了get方法，来获取字段value。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getFieldVal</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;</span><br><span class="line">    Manager manager = <span class="keyword">new</span> Manager(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">    Class&lt;? extends Manager&gt; clazz = manager.getClass();</span><br><span class="line">    Field bonus = clazz.getDeclaredField(<span class="string">&quot;bonus&quot;</span>);</span><br><span class="line">    bonus.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    Object bonusVal = bonus.get(manager);</span><br><span class="line">    System.out.println((<span class="keyword">int</span>)bonusVal);</span><br><span class="line">    System.out.println(bonus.getInt(manager));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有几个需要注意的地方。</p><ul><li> clazz.getDeclaredField(“bonus”); 注意参数的内容要和filed一致</li><li> 由于该字段是private的，不能直接获取，需要设置访问权限，强制获取，bonus.setAccessible(true);</li><li> Field.get(instance)这个方法返回Object对象，可以强转，也可以使用其他api、</li></ul><h4 id="修改某个字段的value"><a href="#修改某个字段的value" class="headerlink" title="修改某个字段的value"></a>修改某个字段的value</h4><p>能读就能写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeFiledVal</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;</span><br><span class="line">    Manager manager = <span class="keyword">new</span> Manager(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">    Class&lt;? extends Manager&gt; clazz = manager.getClass();</span><br><span class="line">    Field bonus = clazz.getDeclaredField(<span class="string">&quot;bonus&quot;</span>);</span><br><span class="line">    bonus.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    bonus.set(manager, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    assertEquals(<span class="number">1000</span>, manager.getBonus());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="利用反射创建一个对象"><a href="#利用反射创建一个对象" class="headerlink" title="利用反射创建一个对象"></a>利用反射创建一个对象</h4><p>前面获取到constructor之后就可以使用newInstance方法来创建新对象了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">newInstanceTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException </span>&#123;</span><br><span class="line">    Class clazz = Manager.class;</span><br><span class="line">    Constructor constructor = clazz.getConstructor(String.class, <span class="keyword">int</span>.class, <span class="keyword">int</span>.class);</span><br><span class="line">    Manager instance = (Manager) constructor.newInstance(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    assertEquals(<span class="number">1</span>, instance.getBonus());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是基本类型的class是<code>int.class</code>，而不是<code>Integer.class</code>.<br>`</p><h4 id="利用反射创建数组"><a href="#利用反射创建数组" class="headerlink" title="利用反射创建数组"></a>利用反射创建数组</h4><p>数组和普通对象有所不同。下面演示通过反射拷贝数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">goodCopyOf</span><span class="params">(Object a, <span class="keyword">int</span> newLength)</span> </span>&#123;</span><br><span class="line">    Class cl = a.getClass();</span><br><span class="line">    <span class="keyword">if</span> (!cl.isArray()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> length = Array.getLength(a);</span><br><span class="line">    Object newArray = Array.newInstance(cl.getComponentType(), newLength);</span><br><span class="line">    System.arraycopy(a, <span class="number">0</span>, newArray, <span class="number">0</span>, Math.min(length, newLength));</span><br><span class="line">    <span class="keyword">return</span> newArray;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">newArray</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span>[] a2 =(<span class="keyword">int</span>[]) goodCopyOf(a, <span class="number">2</span>);</span><br><span class="line">    assertEquals(<span class="number">1</span>, a2[<span class="number">0</span>]);</span><br><span class="line">    assertEquals(<span class="number">2</span>, a2[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    String[] str = &#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line">    String[] str2 = (String[]) goodCopyOf(str, <span class="number">2</span>);</span><br><span class="line">    assertEquals(<span class="string">&quot;a&quot;</span>, str2[<span class="number">0</span>]);</span><br><span class="line">    assertEquals(<span class="string">&quot;b&quot;</span>, str2[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="反射执行instance的某个方法"><a href="#反射执行instance的某个方法" class="headerlink" title="反射执行instance的某个方法"></a>反射执行instance的某个方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invokeMethod</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">    Manager manager = <span class="keyword">new</span> Manager(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">    Class&lt;? extends Manager&gt; clazz = manager.getClass();</span><br><span class="line">    Method method = clazz.getDeclaredMethod(<span class="string">&quot;getBonus&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> rs = (<span class="keyword">int</span>) method.invoke(manager);</span><br><span class="line">    assertEquals(<span class="number">100</span>, rs);</span><br><span class="line"></span><br><span class="line">    Method setBonus = clazz.getDeclaredMethod(<span class="string">&quot;setBonus&quot;</span>, <span class="keyword">int</span>.class);</span><br><span class="line">    Object invoke = setBonus.invoke(manager, <span class="number">0</span>);</span><br><span class="line">    assertNull(invoke);</span><br><span class="line">    assertEquals(<span class="number">0</span>, manager.getBonus());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承的设计技巧"><a href="#继承的设计技巧" class="headerlink" title="继承的设计技巧"></a>继承的设计技巧</h2><ul><li>将公共操作和字段放在超类</li><li>不要使用受保护的字段，非必须要，不要使用protected，而推荐用private</li><li>使用继承实现<code>is-a</code>的关系，不是这样关系的类不应该使用继承</li><li>除非所有继承的方法都有意义，否则不要使用继承</li><li>在覆盖方法时，不要改变预期的行为</li><li>使用多态，而不是类型信息</li></ul><h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><ul><li>Java核心技术 卷一 原书第10版</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java复习2-对象与类</title>
      <link href="2018/07/07/java-class/"/>
      <url>2018/07/07/java-class/</url>
      
        <content type="html"><![CDATA[<p>回顾基础知识过程中遇到的感觉需要记录一下的知识点。</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>我们设计的class应当尽可能的高内聚，体现为封装的程度。一个class的属性应该只能自己修改，其他class都只是与本class沟通，而不应该有能力修改。比较常见的一个问题是Date属性。</p><p>业务开发中经常需要设计class的日期属性，比如birthday, createDate等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.birth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我经常设计一个entity，填入字段，然后就直接getter, setter出去，尤其使用lombok后，更是连生成都改自动了。按照封装的要求，这样的做法是不合适的。因为其他class可以获取Date对象，Date对象是可变的。那么，就有可能会产生日期被修改的可能。</p><p>如果项目有引入Findbugs的扫描，这个class肯定会被扫描出来的，不应该返回一个可变对象。那么，怎么做才可以避免这个问题？我们确实需要暴露Date啊。</p><p>答案是暴露一个不可变的对象。Java8推出了新的日期API，其中LocalDate就是不可变的。用LocalDate替换Date即可。LocalDate就像String一样，没有提供任何可以改变内部属性的方法，所有的修改之类的方法都将会创建一个新的对象。这样，修改操作将不会影响原来的class。</p><p>Date对象可以解决，但很多是自己定义的对象，这个怎么办？比如，User有个属性是Role。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> LocalDate birth;</span><br><span class="line">    <span class="keyword">private</span> Role role;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Role <span class="title">getRole</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.role;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和Date类似，当调用<code>getRole</code>之后，外界如果可以修改role的属性，比如把role改成admin，那么本对象就拥有了admin权限了。这是我们不愿看到的。可以模仿LocalDate，把Role的所有修改内部属性的方法关闭。这样，外部无法修改Role，就不会影响到User了。然而，我们web中需要把对象渲染成json发送出去，jackson会根据getter setter去做序列化和反序列化操作。这个setter还不能关闭。</p><p>那就只能处理User自己了。user唯一发生风险的地方在于getRole后，把自己内部属性暴露出去了。我们可以getRole的时候给一个新的出去，让其他class随便改都不会影响自己。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> LocalDate birth;</span><br><span class="line">    <span class="keyword">private</span> Role role;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Role <span class="title">getRole</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Role) <span class="keyword">this</span>.role.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现实是，我们很少关注这样的做法，都是直接返回。而且，也很少遇到错误。这时候可以 忽略findbugs的异常。但，最好的，还是推荐做这样的修改。</p><h2 id="方法传参的按值调用"><a href="#方法传参的按值调用" class="headerlink" title="方法传参的按值调用"></a>方法传参的按值调用</h2><p>初学Java的时候最容易搞不懂的地方就是传递参数到底是怎么传递的。</p><p>在程序设计语言中有关将参数传递给方法(或函数)的一些专业术语。<strong>按值调用</strong>(call by value)表示方法接收的是调用者提供的值。而<strong>按引用调用(call be reference)**表示方法接收的是调用者提供的</strong>变量地址<strong>。一个方法可以</strong>修改<strong>传递引用所对应的变量值，而不能修改传递值调用所对应的变量值。</strong>按…调用(call by)**是一个标准的计算机科学术语，它用来描述各种程序设计语言(不只Java)中方法参数的传递方式。</p><p>Java程序设计语言<strong>总是按值调用</strong>。也就是说，方法得到的是所有参数值的一个拷贝，特别是，方法不能修改传递给它的任何参数变量的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int a &#x3D; 10;</span><br><span class="line">addOne(a)</span><br></pre></td></tr></table></figure><p>不管addOne方法具体实现，a最终依旧还是10. 因为当a传递给addOne方法的时候，拷贝了一份a的值给参数，方法中运行过程中都是一份拷贝，不会影响原来的变量。</p><p>方法参数共有两种：   </p><ul><li>基本数据类型(数字、布尔值)</li><li>对象引用</li></ul><p>上述demo显示一个方法不可能修改一个基本数据类型的参数。那么对象引用呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">appendOne(sb);</span><br></pre></td></tr></table></figure><p>appendOne执行过程中会对sb产生影响吗？</p><p>这就要看具体方法内容了。比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendOne</span><span class="params">(StringBuilder sb)</span> </span>&#123;</span><br><span class="line">    sb.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>那么，我们最终执行完结果肯定sb内容添加了1。而换一个方式，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendOne2</span><span class="params">(StringBuilder s)</span></span>&#123;</span><br><span class="line">    s = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    s.append(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，方法外面的sb的内容会变成什么？</p><p>这个，首先要记住的是Java方法传参都只是传递拷贝。然后，明白传递拷贝的意义<br><img src="http://oe20lp6p0.bkt.clouddn.com/2018/java/basic/method1.png"></p><p>因为s指向的地址和sb相同，故，当s.append的时候，sb的内容也会改变。这也上开头讲述的封装不应返回一个可变变量的原因。任何拿到这个可变变量地址的方法都可以直接修改变量里的属性。那方法2有什么不同？</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/2018/java/basic/method2.png"></p><p>方法2中，把参数s指向了新地址，那么接下来的任何修改，都将不会影响旧地址。则方法外的sb对应的地址空间也就不会发生变化。这个可以理解为Java传递对象引用的时候只复制了对象引用的地址。</p><h2 id="类设计技巧"><a href="#类设计技巧" class="headerlink" title="类设计技巧"></a>类设计技巧</h2><ol><li>一定要保证数据私有，即封装性；</li><li>一定要对数据初始化，最好不要依赖系统的默认值，自己给定一个初始值；</li><li>不要在类中使用过多的基本类型，可以把相关的几个变量合成一个class，转为引用class，另外，能用包装类就不用基本类型；</li><li>不是所有的成员变量都应该提供对外访问方法，比如创建日期不可以修改；</li><li>将职责过多的类进行分解；</li><li>类名和方法名要能够体现他们的职责；</li><li>优先使用不可变的类。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java复习1-数据类型</title>
      <link href="2018/07/06/java-data-type/"/>
      <url>2018/07/06/java-data-type/</url>
      
        <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="整形"><a href="#整形" class="headerlink" title="整形"></a>整形</h3><table><thead><tr><th>type</th><th>存储</th><th>取值范围</th></tr></thead><tbody><tr><td>int</td><td>4字节</td><td>-2 147 483 648  ~ 2 147 483 647 (超过20亿)</td></tr><tr><td>short</td><td>2字节</td><td>-32 768 ~ 32 7677</td></tr><tr><td>long</td><td>8字节</td><td>-9 223 372 036 854 775 808 ~ 9 223 372 036 854 775 807</td></tr><tr><td>byte</td><td>1字节</td><td>-128 ~ 127</td></tr></tbody></table><p>关于范围的计算，1字节=8位。 1byte 即8个1和0的组合范围。</p><p>需要记住int是4个字节，32位。</p><a id="more"></a><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><table><thead><tr><th>type</th><th>存储</th><th>范围</th></tr></thead><tbody><tr><td>float</td><td>4字节</td><td>-2^128 ~ +2^127  有效位6~7位</td></tr><tr><td>double</td><td>8字节</td><td>-2^1024 ~ +2^1023  有效位 15位</td></tr></tbody></table><p>double数值精度是float的两倍，绝大部分都应该采用double而不是float。</p><h3 id="字符char"><a href="#字符char" class="headerlink" title="字符char"></a>字符char</h3><p>char用来表示单个字符，Java中采用16位来表示，即2个字节。但现在unicode字符长度已经超过了65536，一个char并不能完全覆盖所有的字符。所以，通常不要用char，而是string，否则会有乱码产生。</p><h3 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h3><p>只有true或false。唯一需要注意的是Java中基本类型和包装类的关系。对于一个class的字段，可以是boolean类型的，也可以是Boolean类型的。二者是不一样的！boolean类型的字段在初始化的时候，如果没有指定则默认位false。而Boolean默认是null。所以，在class里的成员变量的布尔类型都应该采用Boolean。</p><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>Java对字符处理通常用的是String，但在概念上，String不是数据类型，而一个class。String由char的值序列组成。但前面已经提到char只有两个字节16位，不能够表示所有的unicode编码，有时候需要两个unicode才可表示。那么，String的length方法就很有意思了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testCodePoint() &#123;</span><br><span class="line">    String a &#x3D; &quot;\uD835\uDD46㋛Hello&quot;;</span><br><span class="line">    System.out.println(a);</span><br><span class="line">    System.out.println(a.length());</span><br><span class="line">    a.codePoints().forEach(value -&gt; System.out.println((char) value));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">𝕆㋛Hello</span><br><span class="line">8</span><br><span class="line">핆</span><br><span class="line">㋛</span><br><span class="line">H</span><br><span class="line">e</span><br><span class="line">l</span><br><span class="line">l</span><br><span class="line">o</span><br></pre></td></tr></table></figure><p>a字符串的第一个字符是一个变形的O，<code>𝕆</code>. 这个字符的unicode是<code>U+1D546</code>, 在java中表示为<code>\uD835\uDD46</code>。所以length是8，但字符一共7个。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Returns the length of this string.</span><br><span class="line"> * The length is equal to the number of &lt;a href&#x3D;&quot;Character.html#unicode&quot;&gt;Unicode</span><br><span class="line"> * code units&lt;&#x2F;a&gt; in the string.</span><br><span class="line"> *</span><br><span class="line"> * @return  the length of the sequence of characters represented by this</span><br><span class="line"> *          object.</span><br><span class="line"> *&#x2F;</span><br><span class="line">public int length() &#123;</span><br><span class="line">    return value.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud学习6-如何创建一个服务消费者consumer</title>
      <link href="2018/07/04/springcloud-consumer/"/>
      <url>2018/07/04/springcloud-consumer/</url>
      
        <content type="html"><![CDATA[<p>上一节<a href="https://www.cnblogs.com/woshimrf/p/springcloud-provider.html">如何创建一个服务提供者provider</a>已经启动了一个provider的server，提供用户信息查询接口。接下来，我们启动另一个provider，由于是同一台机器本地测试，我们换一个端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--server.port&#x3D;8084</span><br></pre></td></tr></table></figure><p>通过启动传参数覆盖port。这样，我们就有两个provider实例了。接下来，可以使用我们consumer负载均衡的消费这两个provider。</p><a id="more"></a><h2 id="升级eureka依赖"><a href="#升级eureka依赖" class="headerlink" title="升级eureka依赖"></a>升级eureka依赖</h2><p>eureka之前的pom依赖过期了，需要修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring-cloud-starter-netflix-eureka-server</span><br></pre></td></tr></table></figure><p>同样的，所有的client都要修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring-cloud-starter-netflix-eureka-client</span><br></pre></td></tr></table></figure><h2 id="创建一个consumer工程"><a href="#创建一个consumer工程" class="headerlink" title="创建一个consumer工程"></a>创建一个consumer工程</h2><p>创建一个子模块。    </p><p><a href="https://github.com/Ryan-Miao/spring-cloud-Edgware-demo/tree/master/consumer-demo">https://github.com/Ryan-Miao/spring-cloud-Edgware-demo/tree/master/consumer-demo</a></p><p>配置基本和provider一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;!--springboot 依赖start--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-devtools&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.fasterxml.jackson.datatype&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jackson-datatype-jsr310&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;!--springboot 依赖结束--&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;springfox-swagger2&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;springfox-swagger-ui&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!--工具类 start--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.google.guava&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;guava&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;net.logstash.logback&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;logstash-logback-encoder&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;!--工具类end--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--内部依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.test&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;provider-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;!--内部依赖end--&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><ul><li><code>spring-cloud-starter-netflix-eureka-client</code> eureka客户端，负责维护注册和心跳</li><li><code>spring-cloud-starter-openfeign</code> 声明式的HttpClient Feign客户端</li><li><code>spring-cloud-starter-netflix-ribbon</code> 客户端负载均衡</li><li><code>spring-cloud-starter-netflix-hystrix</code> http请求健康熔断</li><li><code>provider-api</code> 我们定义好的provider请求的客户端</li></ul><h2 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h2><p>启动类和provider相同，多了一行注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>EnableFeignClients</code> 启用Feign</li></ul><h2 id="Swagger等基础配置"><a href="#Swagger等基础配置" class="headerlink" title="Swagger等基础配置"></a>Swagger等基础配置</h2><p>同provider，提供几个简单api。省略叙述。</p><h2 id="FeignClient-远程调用"><a href="#FeignClient-远程调用" class="headerlink" title="FeignClient 远程调用"></a>FeignClient 远程调用</h2><p>创建一个接口，继承我们provider-api里声明的接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@FeignClient(value &#x3D; &quot;PROVIDER-DEMO&quot;, fallback &#x3D; UserClientFallback.class)</span><br><span class="line">public interface UserClient extends UserApi &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>FeignClient</code>会标注这是一个Feign的客户端，在项目启动的时候就会扫描到，value是连接的service的名称，这里即我们的provider, fallback则是当远程请求失败的时候，服务降级，我们来决定做什么。</li></ul><p>如果不填写fallback，则请求遇到非200会报错，抛出一个RuntimeException, HystrixRuntimeException. 有可能是远程返回500， 400等，也有可能是连接超时，还有可能是hystrix 熔断。</p><p>而填写了fallback, 则会在服务调用失败的时候，转调用我们对应的fallback方法。</p><p>fallback就是实现我们这个UserClient接口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@RequestMapping(&quot;&#x2F;userClientFallback&quot;)</span><br><span class="line">public class UserClientFallback implements UserClient &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;UserVo&gt; list() &#123;</span><br><span class="line">        UserVo userVo &#x3D; new UserVo();</span><br><span class="line">        userVo.setAge(1);</span><br><span class="line">        userVo.setBirth(LocalDate.now());</span><br><span class="line">        userVo.setId(1);</span><br><span class="line">        userVo.setName(&quot;fallback&quot;);</span><br><span class="line">        return Lists.newArrayList(userVo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String fallback() &#123;</span><br><span class="line">        return &quot;访问失败后调用此方法，进行服务降级.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Component</code>是要把这个Fallback注册到spring容器里，FeignClient在项目启动的时候会读取fallback, 然后从context里读取这个instance，如果没有找到，就启动失败、</li></ul><p>见org.springframework.cloud.netflix.feign.HystrixTargeter#getFromContext</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">private &lt;T&gt; T getFromContext(String fallbackMechanism, String feignClientName, FeignContext context,</span><br><span class="line"> Class&lt;?&gt; beanType, Class&lt;T&gt; targetType) &#123;</span><br><span class="line">Object fallbackInstance &#x3D; context.getInstance(feignClientName, beanType);</span><br><span class="line">if (fallbackInstance &#x3D;&#x3D; null) &#123;</span><br><span class="line">throw new IllegalStateException(String.format(</span><br><span class="line">&quot;No &quot; + fallbackMechanism + &quot; instance of type %s found for feign client %s&quot;,</span><br><span class="line">beanType, feignClientName));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (!targetType.isAssignableFrom(beanType)) &#123;</span><br><span class="line">throw new IllegalStateException(</span><br><span class="line">String.format(</span><br><span class="line">&quot;Incompatible &quot; + fallbackMechanism + &quot; instance. Fallback&#x2F;fallbackFactory of type %s is not assignable to %s for feign client %s&quot;,</span><br><span class="line">beanType, targetType, feignClientName));</span><br><span class="line">&#125;</span><br><span class="line">return (T) fallbackInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@RequestMapping</code> 则是不得已而为之了。前文provider-demo里，我们把api抽取成UserApi</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;api&#x2F;v1&#x2F;users&quot;)</span><br><span class="line">public interface UserApi &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;&quot;)</span><br><span class="line">    List&lt;UserVo&gt; list();</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;fallback&quot;)</span><br><span class="line">    String fallback();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的RequestMapping会被spring启动的到时候扫描到，在初始化RequestMappingHandlerMapping的时候，扫描所有的bean，把RequestMapping的bean给注册RequestMapping. 这时候，它不管你是不是controller的。我们FeignClient所声明的接口上有@RequestMapping，也会被扫描。而我们Fallback也继承，也会有@RequestMapping，这时候重复定义RequestMapping会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;requestMappingHandlerMapping&#39; defined in class path resource [org&#x2F;springframework&#x2F;boot&#x2F;autoconfigure&#x2F;web&#x2F;WebMvcAutoConfiguration$EnableWebMvcConfiguration.class]: Invocation of init method failed; nested exception is java.lang.IllegalStateException: Ambiguous mapping. Cannot map &#39;com.test.cloud.client.UserClient&#39; method </span><br><span class="line">public abstract java.util.List&lt;com.test.cloud.vo.UserVo&gt; com.test.cloud.api.UserApi.list()</span><br><span class="line">to &#123;[&#x2F;api&#x2F;v1&#x2F;users&#x2F;],methods&#x3D;[GET]&#125;: There is already &#39;userClientFallback&#39; bean method</span><br><span class="line">public java.util.List&lt;com.test.cloud.vo.UserVo&gt; com.test.cloud.client.UserClientFallback.list() mapped.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>事实上，我们并不是要将FeignClient给注册到RequestMapping里的，而且OpenFeign也有自己的一套注解方案。只是spring-cloud为了方便集成和简化OpenFeign的用法，把Spring-Web的注解做了适配。不好的地方是RequestMapping的扫描并没有排除。</p><p>以下代码会找到方法注解@RequestMapping.</p><p>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#createRequestMappingInfo(java.lang.reflect.AnnotatedElement)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) &#123;</span><br><span class="line">RequestMapping requestMapping &#x3D; AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class);</span><br><span class="line">RequestCondition&lt;?&gt; condition &#x3D; (element instanceof Class ?</span><br><span class="line">getCustomTypeCondition((Class&lt;?&gt;) element) : getCustomMethodCondition((Method) element));</span><br><span class="line">return (requestMapping !&#x3D; null ? createRequestMappingInfo(requestMapping, condition) : null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而RequestMapping这个bean创建完后会扫描所有bean, 并注册</p><p>org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.MappingRegistry#register</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public void register(T mapping, Object handler, Method method) &#123;</span><br><span class="line">this.readWriteLock.writeLock().lock();</span><br><span class="line">try &#123;</span><br><span class="line">HandlerMethod handlerMethod &#x3D; createHandlerMethod(handler, method);</span><br><span class="line">assertUniqueMethodMapping(handlerMethod, mapping);</span><br><span class="line"></span><br><span class="line">if (logger.isInfoEnabled()) &#123;</span><br><span class="line">logger.info(&quot;Mapped \&quot;&quot; + mapping + &quot;\&quot; onto &quot; + handlerMethod);</span><br><span class="line">&#125;</span><br><span class="line">this.mappingLookup.put(mapping, handlerMethod);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; directUrls &#x3D; getDirectUrls(mapping);</span><br><span class="line">for (String url : directUrls) &#123;</span><br><span class="line">this.urlLookup.add(url, mapping);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String name &#x3D; null;</span><br><span class="line">if (getNamingStrategy() !&#x3D; null) &#123;</span><br><span class="line">name &#x3D; getNamingStrategy().getName(handlerMethod, mapping);</span><br><span class="line">addMappingName(name, handlerMethod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CorsConfiguration corsConfig &#x3D; initCorsConfiguration(handler, method, mapping);</span><br><span class="line">if (corsConfig !&#x3D; null) &#123;</span><br><span class="line">this.corsLookup.put(handlerMethod, corsConfig);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">this.registry.put(mapping, new MappingRegistration&lt;T&gt;(mapping, handlerMethod, directUrls, name));</span><br><span class="line">&#125;</span><br><span class="line">finally &#123;</span><br><span class="line">this.readWriteLock.writeLock().unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">private void assertUniqueMethodMapping(HandlerMethod newHandlerMethod, T mapping) &#123;</span><br><span class="line">HandlerMethod handlerMethod &#x3D; this.mappingLookup.get(mapping);</span><br><span class="line">if (handlerMethod !&#x3D; null &amp;&amp; !handlerMethod.equals(newHandlerMethod)) &#123;</span><br><span class="line">throw new IllegalStateException(</span><br><span class="line">&quot;Ambiguous mapping. Cannot map &#39;&quot; +newHandlerMethod.getBean() + &quot;&#39; method \n&quot; +</span><br><span class="line">newHandlerMethod + &quot;\nto &quot; + mapping + &quot;: There is already &#39;&quot; +</span><br><span class="line">handlerMethod.getBean() + &quot;&#39; bean method\n&quot; + handlerMethod + &quot; mapped.&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总之，由于这个冲突，fallback必须制定一个随意不相干的url地址。等后面我学会怎么手动排除RequestMapping的时候就不用了。</p><h3 id="接下来，直接调用FeignClient"><a href="#接下来，直接调用FeignClient" class="headerlink" title="接下来，直接调用FeignClient"></a>接下来，直接调用FeignClient</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Api</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;&#x2F;api&#x2F;v1&#x2F;users&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    private final UserClient userClient;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    public UserController(UserClient userClient) &#123;</span><br><span class="line">        this.userClient &#x3D; userClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;feign&quot;)</span><br><span class="line">    public List&lt;UserVo&gt; feign() &#123;</span><br><span class="line">        return userClient.list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;feign-fallback&quot;)</span><br><span class="line">    public String fallback() &#123;</span><br><span class="line">        return userClient.fallback();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在provider-api里，我设计<code>userClient.list()</code>返回用户列表，<code>userClient.fallback()</code>随机报500. 这样，启动，访问两个api可以观察到服务降级了。</p><h2 id="关于Feign，Hystrix，Ribbon的配置"><a href="#关于Feign，Hystrix，Ribbon的配置" class="headerlink" title="关于Feign，Hystrix，Ribbon的配置"></a>关于Feign，Hystrix，Ribbon的配置</h2><p>我目前用到的配置有以下几种，不全，暂时有这些</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#eureka客户端ribbon刷新时间</span><br><span class="line">#默认30s</span><br><span class="line">ribbon.ServerListRefreshInterval: 5000</span><br><span class="line"></span><br><span class="line"># ribbon默认配置</span><br><span class="line">#ribbon.ConnectTimeout&#x3D;250</span><br><span class="line">#ribbon.ReadTimeout&#x3D;1000</span><br><span class="line">#ribbon.OkToRetryOnAllOperations&#x3D;true</span><br><span class="line">#ribbon.MaxAutoRetriesNextServer&#x3D;2</span><br><span class="line">#ribbon.MaxAutoRetries&#x3D;0</span><br><span class="line"></span><br><span class="line"># feign日志配置, 指定某个service的日志级别</span><br><span class="line">#logging.level.com.test.cloud.client.UserClient: info</span><br><span class="line"></span><br><span class="line"># ribbon全局默认连接和等待时间</span><br><span class="line">ribbon.ConnectTimeout: 1000</span><br><span class="line">ribbon.ReadTimeout: 10000</span><br><span class="line"></span><br><span class="line"># ribbon指定service的连接和等待时间，注意service的名称要和在FeignClient注解里标注的内容一致, 要大写</span><br><span class="line">PROVIDER-DEMO.ribbon.ConnectTimeout: 1000</span><br><span class="line">PROVIDER-DEMO.ribbon.ReadTimeout: 1000</span><br><span class="line"></span><br><span class="line"># feign全局开启hystrix支持,默认false</span><br><span class="line">feign.hystrix.enabled: true</span><br><span class="line"># hystrix全局默认超时时间</span><br><span class="line">hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds: 5000</span><br><span class="line"># hystrix指定request的单独设置超时时间， commandkey的组成为ClientClassName#methodName(ParamTypeClassName..)</span><br><span class="line">hystrix.command.UserClient#list().execution.isolation.thread.timeoutInMilliseconds: 5000</span><br></pre></td></tr></table></figure><p>需要注意的是，需要理解几个超时的概念。即，需要明白hystrix是干啥的，ribbon又是干啥的，Feign如何把它们集成的。</p><h3 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h3><p>OpenFeign可以配置超时，日志，序列化和反序列化，重试等。只要手动声明对应的bean即可。具体配置见  </p><p>org.springframework.cloud.netflix.feign.FeignClientsConfiguration</p><p>值得注意的是，默认不会重试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">@ConditionalOnMissingBean</span><br><span class="line">public Retryer feignRetryer() &#123;</span><br><span class="line">return Retryer.NEVER_RETRY;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以及，默认不会采用hystrix</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ConditionalOnClass(&#123; HystrixCommand.class, HystrixFeign.class &#125;)</span><br><span class="line">protected static class HystrixFeignConfiguration &#123;</span><br><span class="line">@Bean</span><br><span class="line">@Scope(&quot;prototype&quot;)</span><br><span class="line">@ConditionalOnMissingBean</span><br><span class="line">@ConditionalOnProperty(name &#x3D; &quot;feign.hystrix.enabled&quot;, matchIfMissing &#x3D; false)</span><br><span class="line">public Feign.Builder feignHystrixBuilder() &#123;</span><br><span class="line">return HystrixFeign.builder();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要引入hystrix class和配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feign.hystrix.enabled: true</span><br></pre></td></tr></table></figure><h3 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h3><p>有关具体原理信息，参见<a href="https://github.com/Netflix/Hystrix">官网</a>。个人简单理解，Hystrix为每个依赖的服务创建一个线程池，服务在线程池里执行，hystrix会有一些策略决定什么时候执行超时，还可以获得执行结果的成功率。于是可以指定一些策略，比如超时后中断线程，比如成功率在某一段时间低于阀值后拒绝服务执行。这样就像一个保险丝一样，当不满足我们设置的策略时，直接烧断了，从而起到保护服务资源的作用。当然，实现会更复杂，还有恢复机制。</p><p>所以，hystrix会有个超时的配置，决定线程执行时间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># hystrix全局默认超时时间</span><br><span class="line">hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds: 5000</span><br><span class="line"># hystrix指定request的单独设置超时时间， commandkey的组成为ClientClassName#methodName(ParamTypeClassName..)</span><br><span class="line">hystrix.command.UserClient#list().execution.isolation.thread.timeoutInMilliseconds: 5000</span><br></pre></td></tr></table></figure><p>在Feign集成Hystrix的时候，把<code>ClientClassName#methodName(ParamTypeClassName..)</code>设置成Hystrix的CommandKey, CommandKey就是hystrix执行策略的最小单位，比如对应某个http请求，对应这个请求的最长时间即我们设置的超时。</p><p>feign.Feign#configKey(java.lang.Class, java.lang.reflect.Method)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static String configKey(Class targetType, Method method) &#123;</span><br><span class="line">    StringBuilder builder &#x3D; new StringBuilder();</span><br><span class="line">    builder.append(targetType.getSimpleName());</span><br><span class="line">    builder.append(&#39;#&#39;).append(method.getName()).append(&#39;(&#39;);</span><br><span class="line">    for (Type param : method.getGenericParameterTypes()) &#123;</span><br><span class="line">      param &#x3D; Types.resolve(targetType, targetType, param);</span><br><span class="line">      builder.append(Types.getRawType(param).getSimpleName()).append(&#39;,&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (method.getParameterTypes().length &gt; 0) &#123;</span><br><span class="line">      builder.deleteCharAt(builder.length() - 1);</span><br><span class="line">    &#125;</span><br><span class="line">    return builder.append(&#39;)&#39;).toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Feign会把host当作groupkey, 这里则是我们的服务名。</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/2018/springcloud/consumer-demo/feign-hystrix-key.png"></p><p>当然，还有更多细节的配置，比如线程池，时间窗口大小等。见<a href="https://github.com/Netflix/Hystrix/wiki/Configuration">官网Configuration</a></p><h3 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h3><p>Ribbon采用客户端负载均衡。与服务端负载均衡对应，比如我们访问baidu.com, 域名解析器后转向某个负载均衡设备来决定我们的请求打到哪台机器上，对于我们请求者来说是透明的，我们不知道负载信息。</p><p>而Ribbon则是自己维护所有可用的服务列表，根据某种策略，去选择请求哪个服务实例。比如随机选取，线性轮询选取，在线性轮询的基础上重试选取，权重选取，Zone优先选取等。</p><p>在Feign集成Ribbon的时候，把两个超时时间委托给Ribbon。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public FeignLoadBalancer(ILoadBalancer lb, IClientConfig clientConfig,</span><br><span class="line"> ServerIntrospector serverIntrospector) &#123;</span><br><span class="line">super(lb, clientConfig);</span><br><span class="line">this.setRetryHandler(RetryHandler.DEFAULT);</span><br><span class="line">this.clientConfig &#x3D; clientConfig;</span><br><span class="line">this.connectTimeout &#x3D; clientConfig.get(CommonClientConfigKey.ConnectTimeout);</span><br><span class="line">this.readTimeout &#x3D; clientConfig.get(CommonClientConfigKey.ReadTimeout);</span><br><span class="line">this.serverIntrospector &#x3D; serverIntrospector;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在不和Ribbon集成的时候，OpenFeign会设置连接超时和读取超时</p><p>feign.Client.Default#convertAndSend</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">final HttpURLConnection</span><br><span class="line">         connection &#x3D;</span><br><span class="line">         (HttpURLConnection) new URL(request.url()).openConnection();</span><br><span class="line">     if (connection instanceof HttpsURLConnection) &#123;</span><br><span class="line">       HttpsURLConnection sslCon &#x3D; (HttpsURLConnection) connection;</span><br><span class="line">       if (sslContextFactory !&#x3D; null) &#123;</span><br><span class="line">         sslCon.setSSLSocketFactory(sslContextFactory);</span><br><span class="line">       &#125;</span><br><span class="line">       if (hostnameVerifier !&#x3D; null) &#123;</span><br><span class="line">         sslCon.setHostnameVerifier(hostnameVerifier);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     connection.setConnectTimeout(options.connectTimeoutMillis());</span><br><span class="line">     connection.setReadTimeout(options.readTimeoutMillis());</span><br></pre></td></tr></table></figure><p>而和Ribbon集成后，Feign会读取ribbon的两个时间设置，即</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># ribbon全局默认连接和等待时间</span><br><span class="line">ribbon.ConnectTimeout: 1000</span><br><span class="line">ribbon.ReadTimeout: 10000</span><br><span class="line"></span><br><span class="line"># ribbon指定service的连接和等待时间，注意service的名称要和在FeignClient注解里标注的内容一致, 要大写</span><br><span class="line">PROVIDER-DEMO.ribbon.ConnectTimeout: 1</span><br><span class="line">PROVIDER-DEMO.ribbon.ReadTimeout: 1</span><br></pre></td></tr></table></figure><p>关于单独执行某个服务的超时配置，区别Ribbon全局时间配置，这个idea没有自动提示，debug了半天源码，找到配置为服务名大写+<code>.ribbon.ConnectTimeout</code></p><p>com.netflix.client.config.DefaultClientConfigImpl#getInstancePropName(java.lang.String, java.lang.String)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public String getInstancePropName(String restClientName, String key) &#123;</span><br><span class="line">    return restClientName + &quot;.&quot; + this.getNameSpace() + &quot;.&quot; + key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里设置为1只是为了测试超时设置。debug追踪发现，确实如此。这种最佳实践真的只能自己去实践。</p><h3 id="调优"><a href="#调优" class="headerlink" title="调优"></a>调优</h3><p>由于http rest请求的复杂性，可能需要调整超时时间，心跳时间，甚至根据当前服务的请求速率设置线程池大小和排队大小，设置熔断条件等。这个只能在监控上线后，根据监控信息去对应修改需要的配置。目前我还没有最佳实践，不乱说了。</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>到这里，在启动了eureka，provider之后，启动consumer就可以实现远程调用了。嗯，基本满足开发需求了。访问feign的接口，观察admin里两个provider的请求，可以发现我们的请求确实负载到不同的instance上了。访问fallback接口，可以看到失败的时候会执行我们的降级策略。</p><h2 id="Miao语"><a href="#Miao语" class="headerlink" title="Miao语"></a>Miao语</h2><p>基础很重要，基础很重要，基础非常重要。</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud学习5-如何创建一个服务提供者provider</title>
      <link href="2018/07/04/springcloud-provider/"/>
      <url>2018/07/04/springcloud-provider/</url>
      
        <content type="html"><![CDATA[<p>前几篇主要集中在注册中心eureka的使用上，接下来可以创建服务提供者provider来注册到eureka。</p><p>demo源码见： <a href="https://github.com/Ryan-Miao/spring-cloud-Edgware-demo/tree/master/provider-demo">https://github.com/Ryan-Miao/spring-cloud-Edgware-demo/tree/master/provider-demo</a></p><p>为了方便版本控制，接下来的项目都是基于<a href="https://github.com/Ryan-Miao/spring-cloud-Edgware-demo">https://github.com/Ryan-Miao/spring-cloud-Edgware-demo</a> 这个parent配置的。</p><a id="more"></a><h2 id="创建子moudle-provider-demo"><a href="#创建子moudle-provider-demo" class="headerlink" title="创建子moudle provider-demo"></a>创建子moudle provider-demo</h2><p>创建一个子module，项目名叫provider-demo. 填充springboot和springcloud依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">  &lt;!--springboot 依赖start--&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-devtools&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.datatype&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-datatype-jsr310&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-eureka&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;!--springboot 依赖结束--&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;!--工具类 start--&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.google.guava&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;guava&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;net.logstash.logback&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;logstash-logback-encoder&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;!--工具类end--&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><ul><li><code>spring-boot-starter-web</code> 提供web能力，必须</li><li><code>spring-boot-starter-actuator</code>提供项目统计和基础的监控endpoint, 想要使用spring-boot-admin监控就必须添加了</li><li><code>spring-boot-devtools</code>开发模式</li><li><code>jackson-datatype-jsr310</code>可以解决Java8新的时间API <a href="https://www.cnblogs.com/woshimrf/p/LocalDate-serialize-json-springboot.html">LocalDate解体</a></li><li><code>spring-cloud-starter-eureka</code> eureka客户端，负责维护心跳和注册</li><li><code>swagger</code> 提供Restful契约</li><li><code>lombok</code> 看起来很清爽的编译级别getter setter工具</li><li><code>guava</code> 大而全的Java必备类库</li><li><code>logstash-logback-encoder</code> 想要收集日志到ELK，使用这个appender</li></ul><h2 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@EnableDiscoveryClient</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class ProviderDemoApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ProviderDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@EnableDiscoveryClient</code>来启用服务注册</li></ul><p>这个ProviderDemoApplication应该放置于项目包的最外层，因为@SpringbootAppliatin包含了@ComponentScan的注解，默认扫描本类包下，否则必须手动指定scan。</p><h2 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h2><p>swagger就是一个配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">            .title(<span class="string">&quot;服务提供者 API&quot;</span>)</span><br><span class="line">            .description(<span class="string">&quot;提供用户信息查询&quot;</span>)</span><br><span class="line">            .termsOfServiceUrl(<span class="string">&quot;&quot;</span>)</span><br><span class="line">            .version(<span class="string">&quot;1.0.0&quot;</span>)</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义api配置.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">api</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .select()</span><br><span class="line">            .apis(RequestHandlerSelectors.withClassAnnotation(Api.class))</span><br><span class="line">            .build()</span><br><span class="line">            .apiInfo(apiInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于swagger页面的路由，需要我们来引导下：</p><p>创建一个controller来导航</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(value = &#123;&quot;/api&quot;, &quot;/&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">api</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/swagger-ui.html&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="来一个Controller-接口"><a href="#来一个Controller-接口" class="headerlink" title="来一个Controller 接口"></a>来一个Controller 接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/v1/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users = Lists.newArrayList(</span><br><span class="line">        <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;谭浩强&quot;</span>, <span class="number">100</span>, LocalDate.now()),</span><br><span class="line">        <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">&quot;严蔚敏&quot;</span>, <span class="number">120</span>, LocalDate.now()),</span><br><span class="line">        <span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">&quot;谭浩强&quot;</span>, <span class="number">100</span>, LocalDate.now()),</span><br><span class="line">        <span class="keyword">new</span> User(<span class="number">4</span>, <span class="string">&quot;James Gosling&quot;</span>, <span class="number">150</span>, LocalDate.now()),</span><br><span class="line">        <span class="keyword">new</span> User(<span class="number">6</span>, <span class="string">&quot;Doug Lea&quot;</span>, <span class="number">150</span>, LocalDate.now())</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserVo&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users.stream()</span><br><span class="line">            .map(u -&gt; <span class="keyword">new</span> UserVo(u.getId(), u.getName(), u.getAge(), u.getBirth()))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一些简单的环境配置"><a href="#一些简单的环境配置" class="headerlink" title="一些简单的环境配置"></a>一些简单的环境配置</h2><p>application.yml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: provider-demo</span><br><span class="line">  jackson:</span><br><span class="line">    serialization:</span><br><span class="line">      WRITE_DATES_AS_TIMESTAMPS: <span class="keyword">false</span></span><br><span class="line">    <span class="keyword">default</span>-property-inclusion: non_null</span><br><span class="line"></span><br><span class="line">#服务过期时间配置,超过这个时间没有接收到心跳EurekaServer就会将这个实例剔除</span><br><span class="line">#注意，EurekaServer一定要设置eureka.server.eviction-interval-timer-in-ms否则这个配置无效，这个配置一般为服务刷新时间配置的三倍</span><br><span class="line">#默认90s</span><br><span class="line">eureka.instance.lease-expiration-duration-in-seconds: <span class="number">15</span></span><br><span class="line">#服务刷新时间配置，每隔这个时间会主动心跳一次</span><br><span class="line">#默认30s</span><br><span class="line">eureka.instance.lease-renewal-interval-in-seconds: <span class="number">5</span></span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8082</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">springfox:</span><br><span class="line">  documentation:</span><br><span class="line">    swagger:</span><br><span class="line">      v2:</span><br><span class="line">        path: /swagger-resources/api-docs</span><br><span class="line"></span><br><span class="line">log:</span><br><span class="line">  path: logs</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>application-dev.yml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">management:</span><br><span class="line">  security:</span><br><span class="line">    enabled: <span class="keyword">false</span></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:8761/eureka/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logstash:</span><br><span class="line">  url: localhost:<span class="number">4560</span></span><br></pre></td></tr></table></figure><p>这里需要提一点，由于我集成了logstash, 所以必须安装好logstash, 见<a href="https://www.cnblogs.com/woshimrf/p/elk-springboot.html">ELK入门使用</a>。 当然可以跳过，只要不提供logback.xml的配置就行，把依赖中logstash移除即可。</p><h2 id="Log配置"><a href="#Log配置" class="headerlink" title="Log配置"></a>Log配置</h2><p>默认采用logback作为日志框架，简单配置如下，对于不想使用logstash的，移除logstash的appender即可。</p><p>在resource下新建logback-spring.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;configuration scan&#x3D;&quot;true&quot; scanPeriod&#x3D;&quot;60 seconds&quot; debug&#x3D;&quot;false&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;springProperty scope&#x3D;&quot;context&quot; name&#x3D;&quot;appName&quot; source&#x3D;&quot;spring.application.name&quot;</span><br><span class="line">    defaultValue&#x3D;&quot;unknown&quot;&#x2F;&gt;</span><br><span class="line">  &lt;springProperty scope&#x3D;&quot;context&quot; name&#x3D;&quot;log.path&quot; source&#x3D;&quot;log.path&quot;</span><br><span class="line">    defaultValue&#x3D;&quot;logs&quot;&#x2F;&gt;</span><br><span class="line">  &lt;springProperty scope&#x3D;&quot;context&quot; name&#x3D;&quot;logstashurl&quot; source&#x3D;&quot;logstash.url&quot;</span><br><span class="line">    defaultValue&#x3D;&quot;localhost:4560&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;include resource&#x3D;&quot;org&#x2F;springframework&#x2F;boot&#x2F;logging&#x2F;logback&#x2F;base.xml&quot;&#x2F;&gt;</span><br><span class="line">  &lt;!--输出到控制台--&gt;</span><br><span class="line">  &lt;appender name&#x3D;&quot;console&quot; class&#x3D;&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;LoggingInterceptor</span><br><span class="line"></span><br><span class="line">    &lt;encoder&gt;</span><br><span class="line">      &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; %X&#123;req.remoteHost&#125; %X&#123;req.requestURI&#125;</span><br><span class="line">        $&#123;appName&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n</span><br><span class="line">      &lt;&#x2F;pattern&gt;</span><br><span class="line">    &lt;&#x2F;encoder&gt;</span><br><span class="line">  &lt;&#x2F;appender&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!--输出到文件--&gt;</span><br><span class="line">  &lt;appender name&#x3D;&quot;file&quot; class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">    &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">      &lt;fileNamePattern&gt;$&#123;log.path&#125;&#x2F;$&#123;appName&#125;.%d&#123;yyyy-MM-dd&#125;.log&lt;&#x2F;fileNamePattern&gt;</span><br><span class="line">    &lt;&#x2F;rollingPolicy&gt;</span><br><span class="line">    &lt;encoder&gt;</span><br><span class="line">      &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; $&#123;appName&#125; %X&#123;req.remoteHost&#125; %X&#123;req.requestURI&#125;</span><br><span class="line">        %X&#123;req.userAgent&#125;</span><br><span class="line">        %X&#123;req.method&#125; - [%thread] %-5level %logger&#123;36&#125; - %msg%n</span><br><span class="line">      &lt;&#x2F;pattern&gt;</span><br><span class="line">    &lt;&#x2F;encoder&gt;</span><br><span class="line">  &lt;&#x2F;appender&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 输出到logstash--&gt;</span><br><span class="line">  &lt;appender name&#x3D;&quot;LOGSTASH&quot; class&#x3D;&quot;net.logstash.logback.appender.LogstashTcpSocketAppender&quot;&gt;</span><br><span class="line">    &lt;destination&gt;$&#123;logstashurl&#125;&lt;&#x2F;destination&gt;</span><br><span class="line">    &lt;encoder charset&#x3D;&quot;UTF-8&quot; class&#x3D;&quot;net.logstash.logback.encoder.LogstashEncoder&quot;&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;appender&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;springProfile name&#x3D;&quot;dev&quot;&gt;</span><br><span class="line">    &lt;root level&#x3D;&quot;info&quot;&gt;</span><br><span class="line">      &lt;appender-ref ref&#x3D;&quot;console&quot;&#x2F;&gt;</span><br><span class="line">      &lt;appender-ref ref&#x3D;&quot;file&quot;&#x2F;&gt;</span><br><span class="line">      &lt;appender-ref ref&#x3D;&quot;LOGSTASH&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;root&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;springProfile&gt;</span><br><span class="line">  &lt;springProfile name&#x3D;&quot;test, prod&quot;&gt;</span><br><span class="line">    &lt;root level&#x3D;&quot;info&quot;&gt;</span><br><span class="line">      &lt;appender-ref ref&#x3D;&quot;file&quot;&#x2F;&gt;</span><br><span class="line">      &lt;appender-ref ref&#x3D;&quot;LOGSTASH&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;root&gt;</span><br><span class="line">  &lt;&#x2F;springProfile&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>确保eureka已启动，admin最好也启动，方便查看app状态，ELK的日志系统也最好可以使用。当然，只有eureka是刚需。</p><p>编译打包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install package spring-boot:repackage</span><br></pre></td></tr></table></figure><p>运行main方法，指定profile为dev, 可以在idea中编辑运行配置，添加参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--spring.profiles.active&#x3D;dev</span><br></pre></td></tr></table></figure><p>或者命令行jar启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xms256m -Xmx1g -XX:+UseG1GC -jar .&#x2F;target&#x2F;provider-demo-0.0.1-SNAPSHOT.jar --spring.profiles.active&#x3D;dev</span><br></pre></td></tr></table></figure><p>启动后，访问eureka</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/2018/springcloud/provider-demo/eureka.png"></p><p>访问admin<br><img src="http://oe20lp6p0.bkt.clouddn.com/2018/springcloud/provider-demo/admin.png"></p><p>访问provider-demo<br><img src="http://oe20lp6p0.bkt.clouddn.com/2018/springcloud/provider-demo/provider.png"></p><h2 id="暴露我们的API给consumer"><a href="#暴露我们的API给consumer" class="headerlink" title="暴露我们的API给consumer"></a>暴露我们的API给consumer</h2><p>既然有服务提供者，必然是为了consumer消费。consumer应该如何消费？手动调用这个http请求即可。前面提到swagger Restful契约，就是服务提供者提供请求访问的参数和要求。consumer如果手动去开发这个client必然耗时，而且容易出错。所以，作为服务提供者，理应提供sdk或者client给consumer来用。</p><p>在spring cloud技术体系中，远程调用自然是重中之重。目前我找到的具体用法为Feign+Ribbon+Hystrix.</p><p>通过Feign的声明式接口对接，实现了consumer对provider的调用。ribbon客户端负载均衡，hystrix作健康熔断。</p><p>在这里，我们就首先要提供Feign的接口了。</p><p>把controller的api提炼成一个接口。首先，我们创建一个新的项目</p><p><a href="https://github.com/Ryan-Miao/spring-cloud-Edgware-demo/tree/master/provider-api">https://github.com/Ryan-Miao/spring-cloud-Edgware-demo/tree/master/provider-api</a></p><p>将这个项目放到provider-demo的依赖列表里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--内部依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.test&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;provider-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!--内部依赖end--&gt;</span><br></pre></td></tr></table></figure><p>抽离UserApi接口道provider-api项目中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/api/v1/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="function">List&lt;UserVo&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在provider-demo的controller里改造如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">implements</span> <span class="title">UserApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users = Lists.newArrayList(</span><br><span class="line">        <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;谭浩强&quot;</span>, <span class="number">100</span>, LocalDate.now()),</span><br><span class="line">        <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">&quot;严蔚敏&quot;</span>, <span class="number">120</span>, LocalDate.now()),</span><br><span class="line">        <span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">&quot;谭浩强&quot;</span>, <span class="number">100</span>, LocalDate.now()),</span><br><span class="line">        <span class="keyword">new</span> User(<span class="number">4</span>, <span class="string">&quot;James Gosling&quot;</span>, <span class="number">150</span>, LocalDate.now()),</span><br><span class="line">        <span class="keyword">new</span> User(<span class="number">6</span>, <span class="string">&quot;Doug Lea&quot;</span>, <span class="number">150</span>, LocalDate.now())</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserVo&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users.stream()</span><br><span class="line">            .map(u -&gt; <span class="keyword">new</span> UserVo(u.getId(), u.getName(), u.getAge(), u.getBirth()))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，controller没有变化，只是被抽离了api路径。而独立出来的module provider-api就是我们给consumer提供的client。下一节使用consumer消费。</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS安装Redis</title>
      <link href="2018/06/29/centos-install-redis/"/>
      <url>2018/06/29/centos-install-redis/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F;如果没有yum源</span><br><span class="line">wget http:&#x2F;&#x2F;dl.fedoraproject.org&#x2F;pub&#x2F;epel&#x2F;6&#x2F;x86_64&#x2F;epel-release-6-8.noarch.rpm</span><br><span class="line">rpm -ivh epel-release-6-8.noarch.rpm</span><br><span class="line">yum install -y http:&#x2F;&#x2F;rpms.famillecollet.com&#x2F;enterprise&#x2F;remi-release-6.rpm</span><br><span class="line">yum install redis</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service redis start </span><br><span class="line">or</span><br><span class="line">nohup redis-server &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;redis.conf</span><br></pre></td></tr></table></figure><p>修改为允许远程连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bind ip注释掉</span><br><span class="line">protected-mode no</span><br></pre></td></tr></table></figure><p>打开防火墙端口，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;sysconfig&#x2F;iptables</span><br><span class="line">追加</span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 6379 -j ACCEPT</span><br></pre></td></tr></table></figure><p>重启防火墙，重启redis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service iptables restart</span><br><span class="line">service redis restart</span><br></pre></td></tr></table></figure><p>如果发现redis没有重启，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep redis</span><br></pre></td></tr></table></figure><p>找到，kill， start</p><p>远程测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 192.168.2.22</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo next主题使用gitment评论</title>
      <link href="2018/06/28/switch-gitcomment/"/>
      <url>2018/06/28/switch-gitcomment/</url>
      
        <content type="html"><![CDATA[<p>之前关闭的关闭，翻墙的翻墙，最后选择了Hypercomments，最近发现全部收费了。只好再换，想来github总不会挂了。于是转用gitment.</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>可以参照官网 <a href="https://github.com/imsun/gitment#get-started">https://github.com/imsun/gitment#get-started</a></p><h2 id="我的修改过程"><a href="#我的修改过程" class="headerlink" title="我的修改过程"></a>我的修改过程</h2><p>首先，注释掉Hypercomments的配置。然后找到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gitment:</span><br><span class="line">  enable: true</span><br><span class="line">  mint: true # RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway</span><br><span class="line">  count: true # Show comments count in post meta area</span><br><span class="line">  lazy: false # Comments lazy loading with a button</span><br><span class="line">  cleanly: false # Hide &#39;Powered by ...&#39; on footer, and more</span><br><span class="line">  language: # Force language, or auto switch by theme</span><br><span class="line">  github_user: Ryan-Miao </span><br><span class="line">  github_repo: Ryan-Miao.github.io </span><br><span class="line">  client_id: &lt;yours&gt;</span><br><span class="line">  client_secret: &lt;yours&gt;</span><br><span class="line">  proxy_gateway: # Address of api proxy, See: https:&#x2F;&#x2F;github.com&#x2F;aimingoo&#x2F;intersect</span><br><span class="line">  redirect_protocol: # Protocol of redirect_uri with force_redirect_protocol when mint enabled</span><br></pre></td></tr></table></figure><p>在这之前，需要去github注册一个第三方用户，把自己的网站注册。</p><p>注册地址： <a href="https://github.com/settings/applications/new">https://github.com/settings/applications/new</a></p><p>Application name, 我填写博客名称<br>Homepage URL, 我填写博客首页地址<br>Application desc， 随意<br>Application callback URL,   这个我填博客域名，即  <a href="https://blog.rmiao.top/">https://blog.rmiao.top</a></p><p>然后，生成id和secret, 修改上述配置文件，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save gitment</span><br></pre></td></tr></table></figure><p>发布。打开一篇文章，最后面，登录github, 然后有一个初始化本页评论的按钮，点击就好。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud2.0入门3-新的eureka依赖</title>
      <link href="2018/06/14/springcloud2-eureka/"/>
      <url>2018/06/14/springcloud2-eureka/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SpringCloud2.0推出有一段时间了，是要学习1.5+还是从2.0开始？犹豫的原因是资料不全，目前现有的资料大部分是1.0的。但作为学习者，肯定要学习最新的。不如，先试试。</p><a id="more"></a><h2 id="搭建Eureka注册中心"><a href="#搭建Eureka注册中心" class="headerlink" title="搭建Eureka注册中心"></a>搭建Eureka注册中心</h2><p>关于Eureka的介绍，前文<a href="http://www.cnblogs.com/woshimrf/p/springclout-eureka.html">《SpringCloud入门1-服务注册与发现(Eureka)》</a>已经学习过了。这次主要针对2.0重新刷新一下。</p><h3 id="Maven-or-Gradle"><a href="#Maven-or-Gradle" class="headerlink" title="Maven or Gradle"></a>Maven or Gradle</h3><p>看官方文档，可以看出spring是特别希望大家都转gradle的，我也用了一段时间，最后发现国内这个真不流行。这次转为maven构建。</p><h3 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h3><p>新建一个springboot项目，添加eureka server的依赖。 </p><p>项目地址：   </p><p><a href="https://github.com/Ryan-Miao/spring-cloud-demo/tree/master/eureka-server">https://github.com/Ryan-Miao/spring-cloud-demo/tree/master/eureka-server</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;</span><br><span class="line">    &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">    &lt;spring-cloud.version&gt;Finchley.RC2&lt;&#x2F;spring-cloud.version&gt;</span><br><span class="line">  &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-cloud-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">        &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line">  &lt;&#x2F;dependencyManagement&gt;</span><br></pre></td></tr></table></figure><p>对比1.0可以发现，jar包依赖换了名字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring-cloud-starter-netflix-eureka-server</span><br></pre></td></tr></table></figure><p>接下来，只要一个启动类就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@EnableEurekaServer</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class EurekaServerApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Configuration</span><br><span class="line">    public static class SecurityPermitAllConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">            http.authorizeRequests().anyRequest().permitAll()&#x2F;&#x2F;</span><br><span class="line">                .and().csrf().disable();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@EnableEurekaServer表示启用Eureka   </li><li>关于SpringSecurity的问题，2.0以后只要classpath加载了spring security就会默认进行安全拦截，这里允许所有，先忽略安全问题。</li></ul><p>然后是配置文件application.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name&#x3D;spring-cloud-eureka-server</span><br><span class="line">server.port&#x3D;8761</span><br><span class="line">eureka.instance.hostname&#x3D;localhost</span><br><span class="line">eureka.client.serviceUrl.defaultZone&#x3D;http:&#x2F;&#x2F;localhost:$&#123;server.port&#125;&#x2F;eureka&#x2F;</span><br></pre></td></tr></table></figure><ul><li>port 8761是Eureka客户端默认的端口，选择我们就选择8761</li><li>我们需要name来显示项目名称</li><li>defaultZone是我们注册的地址，这里只开启一个节点，即向自己注册自己</li></ul><p>启动即可。</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/2018/springcloud/eureka2.0.png"></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> Eureka </tag>
            
            <tag> 服务治理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud2.0入门4-springboot-admin监控</title>
      <link href="2018/06/14/springcloud2-admin/"/>
      <url>2018/06/14/springcloud2-admin/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一节<a href="https://www.cnblogs.com/woshimrf/p/springboot-admin-demo.html">为springboot项目添加springboot-admin监控</a> 学习了基于springboot1.5自己注册到admin的方法。接下来学习结合Eureka使用以及2.0的改变。</p><a id="more"></a><h2 id="1-5spring-boot-admin集成eureka"><a href="#1-5spring-boot-admin集成eureka" class="headerlink" title="1.5spring-boot-admin集成eureka"></a>1.5spring-boot-admin集成eureka</h2><p>我们继续上一节的项目修改，admin-server依赖修改如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;de.codecentric&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-admin-starter-server&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;de.codecentric&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-admin-server-ui&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-cloud-starter-eureka&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line">&lt;&#x2F;dependencyManagement&gt;   </span><br></pre></td></tr></table></figure><p>修改启动类，添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@EnableDiscoveryClient</span><br><span class="line">@EnableAdminServer</span><br></pre></td></tr></table></figure><p>修改配置文件application.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server.port&#x3D;8081</span><br><span class="line">spring.application.name&#x3D;admin-server</span><br><span class="line">eureka.client.serviceUrl.defaultZone&#x3D;$&#123;EUREKA_SERVICE_URL:http:&#x2F;&#x2F;localhost:8761&#125;&#x2F;eureka&#x2F;</span><br><span class="line">management.security.enabled&#x3D;false</span><br></pre></td></tr></table></figure><p>注意，这里的eureka server要提前启动。具体细节，参见<a href="http://www.cnblogs.com/woshimrf/p/springclout-eureka.html">SpringCloud入门1-服务注册与发现(Eureka)</a></p><p>到这里就结束，可以直接启动。admin会自己拉取Eureka上注册的app信息，主动去注册。这也是唯一区别之前手动注册的地方，就是client端不需要admin-client的依赖，也不需要配置admin地址了，一切全部由admin-server自己实现。这样的设计对环境变化很友好，不用改了admin-server后去改所有app的配置了。</p><h2 id="spring-boot-admin2-0的巨变"><a href="#spring-boot-admin2-0的巨变" class="headerlink" title="spring-boot-admin2.0的巨变"></a>spring-boot-admin2.0的巨变</h2><p>以为2.0比1.5区别不大，也确实不很大。关于client主动注册的部分没有变化。</p><p>这里，重新学习一遍，并添加上安全登录功能。</p><h3 id="新建一个springboot项目"><a href="#新建一个springboot项目" class="headerlink" title="新建一个springboot项目"></a>新建一个springboot项目</h3><p>项目地址：    </p><p><a href="https://github.com/Ryan-Miao/spring-cloud-demo/tree/master/admin-server">https://github.com/Ryan-Miao/spring-cloud-demo/tree/master/admin-server</a>  </p><p>添加spring-boot-admin-server, 最终pom依赖如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.2.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">  &lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;</span><br><span class="line">    &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">    &lt;spring-boot-admin.version&gt;2.0.0&lt;&#x2F;spring-boot-admin.version&gt;</span><br><span class="line">    &lt;spring-cloud.version&gt;Finchley.RC2&lt;&#x2F;spring-cloud.version&gt;</span><br><span class="line">  &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;de.codecentric&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-admin-starter-server&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;!--还没有发布--&gt;</span><br><span class="line">    &lt;!--&lt;dependency&gt;--&gt;</span><br><span class="line">      &lt;!--&lt;groupId&gt;de.codecentric&lt;&#x2F;groupId&gt;--&gt;</span><br><span class="line">      &lt;!--&lt;artifactId&gt;spring-boot-admin-server-cloud&lt;&#x2F;artifactId&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;&#x2F;dependency&gt;--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;de.codecentric&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-admin-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;spring-boot-admin.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">        &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">        &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line">  &lt;&#x2F;dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;executions&gt;</span><br><span class="line">          &lt;execution&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">              &lt;goal&gt;build-info&lt;&#x2F;goal&gt;</span><br><span class="line">            &lt;&#x2F;goals&gt;</span><br><span class="line">          &lt;&#x2F;execution&gt;</span><br><span class="line">        &lt;&#x2F;executions&gt;</span><br><span class="line">      &lt;&#x2F;plugin&gt;</span><br><span class="line">    &lt;&#x2F;plugins&gt;</span><br><span class="line">  &lt;&#x2F;build&gt;</span><br><span class="line"></span><br><span class="line">  &lt;repositories&gt;</span><br><span class="line">    &lt;repository&gt;</span><br><span class="line">      &lt;id&gt;central&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">      &lt;name&gt;aliyun&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;&#x2F;repository&gt;</span><br><span class="line">    &lt;repository&gt;</span><br><span class="line">      &lt;id&gt;spring-milestones&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;name&gt;Spring Milestones&lt;&#x2F;name&gt;</span><br><span class="line">      &lt;url&gt;https:&#x2F;&#x2F;repo.spring.io&#x2F;milestone&lt;&#x2F;url&gt;</span><br><span class="line">      &lt;snapshots&gt;</span><br><span class="line">        &lt;enabled&gt;false&lt;&#x2F;enabled&gt;</span><br><span class="line">      &lt;&#x2F;snapshots&gt;</span><br><span class="line">    &lt;&#x2F;repository&gt;</span><br><span class="line">  &lt;&#x2F;repositories&gt;</span><br></pre></td></tr></table></figure><p>注意到里面添加spring cloud eureka的依赖，我们也把admin给注册到eureka。</p><h3 id="这次的配置文件比较复杂"><a href="#这次的配置文件比较复杂" class="headerlink" title="这次的配置文件比较复杂"></a>这次的配置文件比较复杂</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: admin-server</span><br><span class="line">  profiles:</span><br><span class="line">    active:</span><br><span class="line">      - secure</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># tag::configuration-eureka[]</span><br><span class="line">eureka:   #&lt;1&gt;</span><br><span class="line">  instance:</span><br><span class="line">    leaseRenewalIntervalInSeconds: 10</span><br><span class="line">    health-check-url-path: &#x2F;actuator&#x2F;health #2.0后actuator的地址发生了变化</span><br><span class="line">  client:</span><br><span class="line">    registryFetchIntervalSeconds: 5</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: $&#123;EUREKA_SERVICE_URL:http:&#x2F;&#x2F;localhost:8761&#125;&#x2F;eureka&#x2F;</span><br><span class="line"></span><br><span class="line"># 2.0开始，actuator默认不开放，所以要设置为开放</span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &quot;*&quot;  #&lt;2&gt;</span><br><span class="line">  endpoint:</span><br><span class="line">    health:</span><br><span class="line">      show-details: ALWAYS</span><br><span class="line">server:</span><br><span class="line">  port: 8081</span><br><span class="line"># end::configuration-eureka[]</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">spring:</span><br><span class="line">  profiles: insecure</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"># admin登录的用户名和密码</span><br><span class="line">spring:</span><br><span class="line">  profiles: secure</span><br><span class="line">  security:</span><br><span class="line">    user:</span><br><span class="line">      name: &quot;user&quot;</span><br><span class="line">      password: &quot;password&quot;</span><br><span class="line"></span><br><span class="line"># 注册给eureka的时候告诉eureka自己的密码</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    metadata-map:</span><br><span class="line">      &quot;user.name&quot;: $&#123;spring.security.user.name&#125;         #These two are needed so that the server</span><br><span class="line">      &quot;user.password&quot;: $&#123;spring.security.user.password&#125; #can access the protected client endpoints</span><br></pre></td></tr></table></figure><p>首先，我们同时支持两种安全配置，一种没有安全认证，一种有。注意到前面的依赖pom里有security的依赖。针对security方案，需要配置用户名和密码。</p><p>其次，配置了eureka client相关参数，把自己注册到eureka里。</p><p>然后，关于actuator的端点接口，设置为全部开放。</p><p>最后，设置我们的用户名和密码，并把用户名和密码放到eureka里，方便识别。</p><h3 id="配置security的安全过滤"><a href="#配置security的安全过滤" class="headerlink" title="配置security的安全过滤"></a>配置security的安全过滤</h3><p>最终的启动类如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableAdminServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(AdminServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Profile(&quot;insecure&quot;)</span></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityPermitAllConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            http.authorizeRequests().anyRequest().permitAll()<span class="comment">//</span></span><br><span class="line">                .and().csrf().disable();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Profile(&quot;secure&quot;)</span></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SecuritySecureConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String adminContextPath;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SecuritySecureConfig</span><span class="params">(AdminServerProperties adminServerProperties)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.adminContextPath = adminServerProperties.getContextPath();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="comment">// @formatter:off</span></span><br><span class="line">            SavedRequestAwareAuthenticationSuccessHandler successHandler = <span class="keyword">new</span> SavedRequestAwareAuthenticationSuccessHandler();</span><br><span class="line">            successHandler.setTargetUrlParameter(<span class="string">&quot;redirectTo&quot;</span>);</span><br><span class="line"></span><br><span class="line">            http.authorizeRequests()</span><br><span class="line">                .antMatchers(adminContextPath + <span class="string">&quot;/assets/**&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(adminContextPath + <span class="string">&quot;/login&quot;</span>).permitAll()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin().loginPage(adminContextPath + <span class="string">&quot;/login&quot;</span>).successHandler(successHandler)</span><br><span class="line">                .and()</span><br><span class="line">                .logout().logoutUrl(adminContextPath + <span class="string">&quot;/logout&quot;</span>).and()</span><br><span class="line">                .httpBasic().and()</span><br><span class="line">                .csrf().disable();</span><br><span class="line">            <span class="comment">// @formatter:on</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和之前没啥不同，唯一的区别是添加了安全认证相关的，即采用secure模式的时候必须输入用户名和密码。</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>我们启动并选择激活配置环境<code>secure</code></p><p>访问localhost:8081</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/2018/springcloud/admin2.0-login.png"></p><p><img src="http://oe20lp6p0.bkt.clouddn.com/2018/springcloud/admin2.0-list.png"></p><p>详细页  </p><p><img src="http://oe20lp6p0.bkt.clouddn.com/2018/springcloud/admin2.0-detail.png"></p><p>界面确实比1.5好很多啊。</p><h3 id="新建一个app来注册"><a href="#新建一个app来注册" class="headerlink" title="新建一个app来注册"></a>新建一个app来注册</h3><p>依旧采用手动注册的方式，新建一个springboot项目，项目地址      </p><p><a href="https://github.com/Ryan-Miao/spring-cloud-demo/tree/master/provider-demo">https://github.com/Ryan-Miao/spring-cloud-demo/tree/master/provider-demo</a></p><p>首先，pom依赖要有eureka</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">  xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;com.test&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;provider-demo&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;provider-demo&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.2.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">  &lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;</span><br><span class="line">    &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">    &lt;spring-cloud.version&gt;Finchley.RC2&lt;&#x2F;spring-cloud.version&gt;</span><br><span class="line">    &lt;spring-boot-admin.version&gt;2.0.0&lt;&#x2F;spring-boot-admin.version&gt;</span><br><span class="line">  &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-cloud-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;de.codecentric&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-admin-starter-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-devtools&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;springfox-swagger2&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.7.0&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;springfox-swagger-ui&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.7.0&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">        &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;de.codecentric&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-admin-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;spring-boot-admin.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">        &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line">  &lt;&#x2F;dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;executions&gt;</span><br><span class="line">          &lt;execution&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">              &lt;goal&gt;build-info&lt;&#x2F;goal&gt;</span><br><span class="line">            &lt;&#x2F;goals&gt;</span><br><span class="line">          &lt;&#x2F;execution&gt;</span><br><span class="line">        &lt;&#x2F;executions&gt;</span><br><span class="line">      &lt;&#x2F;plugin&gt;</span><br><span class="line">    &lt;&#x2F;plugins&gt;</span><br><span class="line">  &lt;&#x2F;build&gt;</span><br><span class="line"></span><br><span class="line">  &lt;repositories&gt;</span><br><span class="line">    &lt;repository&gt;</span><br><span class="line">      &lt;id&gt;central&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">      &lt;name&gt;aliyun&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;&#x2F;repository&gt;</span><br><span class="line">    &lt;repository&gt;</span><br><span class="line">      &lt;id&gt;spring-milestones&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;name&gt;Spring Milestones&lt;&#x2F;name&gt;</span><br><span class="line">      &lt;url&gt;https:&#x2F;&#x2F;repo.spring.io&#x2F;milestone&lt;&#x2F;url&gt;</span><br><span class="line">      &lt;snapshots&gt;</span><br><span class="line">        &lt;enabled&gt;false&lt;&#x2F;enabled&gt;</span><br><span class="line">      &lt;&#x2F;snapshots&gt;</span><br><span class="line">    &lt;&#x2F;repository&gt;</span><br><span class="line">  &lt;&#x2F;repositories&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，配置了eureka，用来注册。</p><p>依赖springfox-swagger2用来展示API。</p><p>spring-boot-admin-starter-client才是主动注册的核心库，用来发送注册申请。</p><p>需要再次强调了是build</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">  &lt;plugins&gt;</span><br><span class="line">    &lt;plugin&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;executions&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">          &lt;goals&gt;</span><br><span class="line">            &lt;goal&gt;build-info&lt;&#x2F;goal&gt;</span><br><span class="line">          &lt;&#x2F;goals&gt;</span><br><span class="line">        &lt;&#x2F;execution&gt;</span><br><span class="line">      &lt;&#x2F;executions&gt;</span><br><span class="line">    &lt;&#x2F;plugin&gt;</span><br><span class="line">  &lt;&#x2F;plugins&gt;</span><br><span class="line">&lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure><p>这里是为了生成版本信息，提供给spring-boot-admin展示。</p><h4 id="provider-demo的配置文件"><a href="#provider-demo的配置文件" class="headerlink" title="provider-demo的配置文件"></a>provider-demo的配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    leaseRenewalIntervalInSeconds: 10</span><br><span class="line">    health-check-url-path: &#x2F;actuator&#x2F;health</span><br><span class="line">  client:</span><br><span class="line">    registryFetchIntervalSeconds: 5</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: $&#123;EUREKA_SERVICE_URL:http:&#x2F;&#x2F;localhost:8761&#125;&#x2F;eureka&#x2F;</span><br><span class="line"></span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &quot;*&quot;</span><br><span class="line">  endpoint:</span><br><span class="line">    health:</span><br><span class="line">      show-details: ALWAYS</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 8082</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: provider-demo</span><br><span class="line">  boot:</span><br><span class="line">    admin:</span><br><span class="line">      client:</span><br><span class="line">        url: &quot;http:&#x2F;&#x2F;localhost:8081&quot;</span><br><span class="line">        password: password</span><br><span class="line">        username: user</span><br><span class="line">        instance:</span><br><span class="line">          prefer-ip: true</span><br></pre></td></tr></table></figure><p>eureka的配置和admin-server相同，毕竟都是eureka的client嘛。不同的是这里没有开启spting security，所以不添加用户名和密码信息到meta-data里。</p><p>actuator同样需要暴露全部。</p><p>关于spring-boot-admin-client的注册配置里多了username和password，这个不是自己的，而是admin-server设置的，即前文的里的。</p><p>启动后就可以看到前面的详细信息了。</p><h3 id="巨变在这里"><a href="#巨变在这里" class="headerlink" title="巨变在这里"></a>巨变在这里</h3><p>在1.5版本里，我们只要加上eureka注册，就可以admin-server自动发现所有的app并自己注册监控了。但这里居然行不通了。我调试了几个小时，把依赖包翻来覆去研究了好多遍—-就是不行！！！</p><p>无奈，只好去github把spring-boot-admin的源码下载下来，找到注册的代码开始追踪。我发现，根本没有提供任何和eureka注册中心相关的代码。看到了spring-boot-admin-server-cloud, 进去看了源码，这里有关于注册中心的监听代码，也就是admin自动发现app的密码所在。那我把这个加入dependency不就好了吗，太年轻。加上后发现找不到版本。我说不应该啊，我有导入dependencyManagement的pom啊。手动指定版本也不行。最后无奈的发现，原来根本没有发布！！！</p><blockquote><p>⚠️Note: Since Spring Cloud Finchley is not released yet, this version doesn’t include Spring Cloud Discovery support</p></blockquote><p>所以，手动注册吧，骚年。不然你再等等。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过这一下午的尝试，追踪源码，我发现自己确实挺乐在其中的。然而，这花费了大量的时间和精力。所以，我花费了更多的时间一定要把这次经历记录下来，也就是本文了。想说的是，最新的版本果然是坑巨多，慎入！！！如果是作为生产环境的选型，必须跳过这样的版本。当然，如果是自己个人研究，看新的没错。</p><p>那么，我到底应不应该学习2.0呢，毕竟1.5也没学完呢。</p><p>学吧，按2.0的学习，工作中还是用1.5. 嗯，就这样吧。</p><h2 id="Miao语"><a href="#Miao语" class="headerlink" title="Miao语"></a>Miao语</h2><p>没有解决不了的bug，只要你用心研究，都可以解决。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/codecentric/spring-boot-admin/issues/752">Spring-boot-admin-server-cloud没有发布的肯人issue</a></li><li><a href="https://github.com/codecentric/spring-boot-admin/releases/tag/2.0.0">Spring-boot-admin-server2.0发布Note</a></li><li><a href="http://codecentric.github.io/spring-boot-admin/2.0.0/#discover-clients-via-spring-cloud-discovery">Spring-boot-admin官方文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> Eureka </tag>
            
            <tag> 服务治理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux文件属性,权限和修改文件权限,所属者和所属组</title>
      <link href="2018/06/13/linux-file-property-and-permissin-change/"/>
      <url>2018/06/13/linux-file-property-and-permissin-change/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux中文件的属性"><a href="#Linux中文件的属性" class="headerlink" title="Linux中文件的属性"></a>Linux中文件的属性</h2><p>Linux的文件属性，简单的说，有这么几种</p><ul><li>权限</li><li>所属者</li><li>所属组</li></ul><p>下面是一个文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r--. 1 root root 51894267 May 15 12:58 kibana-5.6.5-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><p>对应关系为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r--. 1    root     root  51894267 May 15 12:58 kibana-5.6.5-linux-x86_64.tar.gz</span><br><span class="line">[    1   ][  2 ][   3  ][  4 ][    5   ][     6     ][       7          ]</span><br><span class="line">[  权限  ][连结][拥有者][群组][文件容量][  修改日期 ][      文件名        ]</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Linux中的文件权限"><a href="#Linux中的文件权限" class="headerlink" title="Linux中的文件权限"></a>Linux中的文件权限</h2><p>上述权限一栏可以3个一组，分为3组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-, rw-, r--, r--</span><br></pre></td></tr></table></figure><p>注意到，第一个字符单独分组，这个表示文件类型。</p><ul><li>当为[ d ]则是目录，例如上表档名为『.gconf』的那一行；</li><li>当为[ - ]则是文件，例如上表档名为『install.log』那一行；</li><li>若是[ l ]则表示为连结档(link file)；</li><li>若是[ b ]则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；</li><li>若是[ c ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。</li></ul><p>剩下的三组主要由[rwx]组成，r-read, w-write, x-execute, [-]表示占位符,即没权限。</p><ul><li>第一组为『文件拥有者的权限』，上栗中文件拥有者可读可写</li><li>第二组为『同群组的权限』；上栗中文件所属组可读</li><li>第三组为『其他非本群组的权限』，上栗中其他人可读</li></ul><p>权限除了字母表示外还可以用数字，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r&#x3D;4, w&#x3D;2, x&#x3D;1, -&#x3D;0</span><br></pre></td></tr></table></figure><p>关于为什么是4210，见参考[权限详解]。</p><p>所以，上述文件的权限也可以表示为<code>644</code></p><h2 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h2><p>命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod [可选项] &lt;mode&gt; &lt;file...&gt;</span><br></pre></td></tr></table></figure><p>可选项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">可选项：</span><br><span class="line">  -c, --changes          like verbose but report only when a change is made (若该档案权限确实已经更改，才显示其更改动作)</span><br><span class="line">  -f, --silent, --quiet  suppress most error messages  （若该档案权限无法被更改也不要显示错误讯息）</span><br><span class="line">  -v, --verbose          output a diagnostic for every file processed（显示权限变更的详细资料）</span><br><span class="line">       --no-preserve-root  do not treat &#39;&#x2F;&#39; specially (the default)</span><br><span class="line">       --preserve-root    fail to operate recursively on &#39;&#x2F;&#39;</span><br><span class="line">       --reference&#x3D;RFILE  use RFILE&#39;s mode instead of MODE values</span><br><span class="line">  -R, --recursive        change files and directories recursively （以递归的方式对目前目录下的所有档案与子目录进行相同的权限变更)</span><br><span class="line">       --help显示此帮助信息</span><br><span class="line">       --version显示版本信息</span><br></pre></td></tr></table></figure><p>mode</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">权限设定字串，详细格式如下 ：</span><br><span class="line">[ugoa...][[+-&#x3D;][rwxX]...][,...]，</span><br><span class="line"></span><br><span class="line">其中</span><br><span class="line">[ugoa...]</span><br><span class="line">u 表示该档案的拥有者，g 表示与该档案的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示所有（包含上面三者）。</span><br><span class="line">[+-&#x3D;]</span><br><span class="line">+ 表示增加权限，- 表示取消权限，&#x3D; 表示唯一设定权限。</span><br><span class="line">[rwxX]</span><br><span class="line">r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该档案是个子目录或者该档案已经被设定过为可执行。</span><br></pre></td></tr></table></figure><p>示例，修改所属者添加可执行权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost es]# ls -la</span><br><span class="line">-rw-r--r--. 1 es   es   51894267 May 15 12:58 kibana-5.6.5-linux-x86_64.tar.gz</span><br><span class="line">[root@localhost es]# chmod u+x kibana-5.6.5-linux-x86_64.tar.gz </span><br><span class="line">[root@localhost es]# ls -la</span><br><span class="line">-rwxr--r--. 1 es   es   51894267 May 15 12:58 kibana-5.6.5-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><p>另一个比较常用的修改方式是数字法。</p><p>rwx = 4+2+1 = 7  可读可写可执行<br>r-x = 4 + 1 = 5  可读可执行    </p><p>最常用的是755，即所属者拥有所有权限，所属组和其他人没有写权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 kibana-5.6.5-linux-x86_64.tar.gz </span><br></pre></td></tr></table></figure><h2 id="修改文件所属者"><a href="#修改文件所属者" class="headerlink" title="修改文件所属者"></a>修改文件所属者</h2><p>chown ：改变文件拥有者</p><p><strong>基本用法</strong><br>chown [-R] 账号名称 文件或目录<br>chown [-R] 账号名称:用户组名称 文件或目录     </p><p>示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jdata]# ls -la</span><br><span class="line">drwxr-xr-x.  2 root root  4096 Jun 14 00:05 es</span><br><span class="line">[root@localhost jdata]# chown -R es:es es</span><br><span class="line">[root@localhost jdata]# ls -la</span><br><span class="line">drwxr-xr-x.  2 es   es    4096 Jun 14 00:05 es</span><br></pre></td></tr></table></figure><ul><li>R recursive 递归</li></ul><h2 id="修改文件所属组"><a href="#修改文件所属组" class="headerlink" title="修改文件所属组"></a>修改文件所属组</h2><p>也可以单独修改文件所属组</p><p><strong>基本用法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp [-R] 用户组名称 dirname&#x2F;filename ...</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://cn.linux.vbird.org/linux_basic/0210filepermission.php">鸟哥的私房菜</a></li><li><a href="https://blog.csdn.net/u013197629/article/details/73608613">权限详解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>添加PMD插件扫描潜在的bug</title>
      <link href="2018/06/12/using-pmd/"/>
      <url>2018/06/12/using-pmd/</url>
      
        <content type="html"><![CDATA[<p>上一节<a href="">使用checkstyle来规范你的项目</a>主要解决了代码编码规范问题，比如缩进换行等。这次继续代码健康工具类PMD。</p><h2 id="什么是PMD"><a href="#什么是PMD" class="headerlink" title="什么是PMD"></a>什么是PMD</h2><p>PMD真的不像checkstyle这样的东西所见即所得啊，去官网找了半天也没有找到解释。官网都直接说是PMD。</p><blockquote><p>We’ve been trying to find the meaning of the letters PMD - because frankly, we don’t really know. We just think the letters sound good together.</p></blockquote><p>简单来说，PMD是一个代号，是一个静态代码检测工具。它可以用来检查</p><ul><li>潜在的bug：空的try/catch/finally/switch语句</li><li>未使用的代码：未使用的局部变量、参数、私有方法等</li><li>可选的代码：String/StringBuffer的滥用</li><li>复杂的表达式：不必须的if语句、可以使用while循环完成的for循环</li><li>重复的代码：拷贝/粘贴代码意味着拷贝/粘贴bugs</li></ul><p>总之，这是一个辅助我们检测潜在bug的工具，大大减少了人工审查成本，提高编码效率。</p><a id="more"></a><h3 id="在gradle中使用"><a href="#在gradle中使用" class="headerlink" title="在gradle中使用"></a>在gradle中使用</h3><p>gradle还是一贯的简单，新建pmd.gradle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * The PMD Plugin</span><br><span class="line"> *</span><br><span class="line"> * Gradle plugin that performs quality checks on your project’s Java source files using PMD</span><br><span class="line"> * and generates reports from these checks.</span><br><span class="line"> *</span><br><span class="line"> * Tasks:</span><br><span class="line"> * Run PMD against &#123;rootDir&#125;&#x2F;src&#x2F;main&#x2F;java: .&#x2F;gradlew pmdMain</span><br><span class="line"> * Run PMD against &#123;rootDir&#125;&#x2F;src&#x2F;test&#x2F;java: .&#x2F;gradlew pmdTest</span><br><span class="line"> *</span><br><span class="line"> * Reports:</span><br><span class="line"> * PMD reports can be found in &#123;project.buildDir&#125;&#x2F;build&#x2F;reports&#x2F;pmd</span><br><span class="line"> *</span><br><span class="line"> * Configuration:</span><br><span class="line"> * PMD is very configurable. The configuration file is located at &#123;rootDir&#125;&#x2F;config&#x2F;pmd&#x2F;pmd-ruleset.xml</span><br><span class="line"> *</span><br><span class="line"> * Additional Documentation:</span><br><span class="line"> * https:&#x2F;&#x2F;docs.gradle.org&#x2F;current&#x2F;userguide&#x2F;pmd_plugin.html</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">apply plugin: &#39;pmd&#39;</span><br><span class="line"></span><br><span class="line">pmd &#123;</span><br><span class="line">    &#x2F;&#x2F; The version of the code quality tool to be used.</span><br><span class="line">    &#x2F;&#x2F; The most recent version of PMD can be found at https:&#x2F;&#x2F;pmd.github.io</span><br><span class="line">    toolVersion &#x3D; &quot;5.8.1&quot;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; The source sets to be analyzed as part of the check and build tasks.</span><br><span class="line">    &#x2F;&#x2F; Use &#39;sourceSets &#x3D; []&#39; to remove PMD from the check and build tasks.</span><br><span class="line">    sourceSets &#x3D; [project.sourceSets.main]</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; The directory where reports will be generated.</span><br><span class="line">    reportsDir &#x3D; file(&quot;$project.buildDir&#x2F;reports&#x2F;pmd&quot;)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Whether to allow the build to continue if there are warnings.</span><br><span class="line">    ignoreFailures &#x3D; false</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Whether or not rule violations are to be displayed on the console.</span><br><span class="line">    consoleOutput &#x3D; true</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; The custom rule set files to be used.</span><br><span class="line">    ruleSetConfig &#x3D; resources.text.fromFile(&quot;$rootProject.projectDir&#x2F;config&#x2F;pmd&#x2F;pmd-ruleset.xml&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加我们的pmd-ruleset.xml配置文件, 这个ruleset有很多种，我们可以先把所有的加上，然后在开发中调整，直到找到最合适的配置方案。因为全部的规则太多，会导致你花费大量的时间解决PMD问题。</p><p>ruleset内容可以在<a href="https://maven.apache.org/plugins/maven-pmd-plugin/examples/usingRuleSets.html">https://maven.apache.org/plugins/maven-pmd-plugin/examples/usingRuleSets.html</a> 这里找到</p><p>然后在build.gradle中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply from: &#39;pmd.gradle&#39;</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;gradlew check  或者 .&#x2F;gradlew build</span><br></pre></td></tr></table></figure><p>报告位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build&#x2F;reports&#x2F;pmd&#x2F;main.html</span><br></pre></td></tr></table></figure><h3 id="在maven中使用"><a href="#在maven中使用" class="headerlink" title="在maven中使用"></a>在maven中使用</h3><p>maven需要把ruleset放到resources下读取，如果是单moudle项目，直接就可以。如果是多模块项目，需要额外做一些工作。</p><p>我们来新建一个项目来单独存储配置文件，build-tools. 在resources下放置ruleset。名字叫做pmd-ruleset.xml, 内容见<a href="https://maven.apache.org/plugins/maven-pmd-plugin/examples/usingRuleSets.html">https://maven.apache.org/plugins/maven-pmd-plugin/examples/usingRuleSets.html</a> </p><p>然后maven install把这个子模块给安装到本地仓库。</p><p>接着修改parent pom</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line"></span><br><span class="line">    &lt;pluginManagement&gt;</span><br><span class="line">      &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-pmd-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.10.0&lt;&#x2F;version&gt;</span><br><span class="line">          &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">              &lt;groupId&gt;com.shuwei&lt;&#x2F;groupId&gt;</span><br><span class="line">              &lt;artifactId&gt;build-tools&lt;&#x2F;artifactId&gt;</span><br><span class="line">              &lt;version&gt;0.0.1&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;&#x2F;dependency&gt;</span><br><span class="line">          &lt;&#x2F;dependencies&gt;</span><br><span class="line">          &lt;configuration&gt;</span><br><span class="line">            &lt;sourceEncoding&gt;utf-8&lt;&#x2F;sourceEncoding&gt;</span><br><span class="line">            &lt;minimumTokens&gt;100&lt;&#x2F;minimumTokens&gt;</span><br><span class="line">            &lt;targetJdk&gt;$&#123;java.version&#125;&lt;&#x2F;targetJdk&gt;</span><br><span class="line">            &lt;excludes&gt;</span><br><span class="line">              &lt;exclude&gt;**&#x2F;message&#x2F;*.java&lt;&#x2F;exclude&gt;</span><br><span class="line">              &lt;exclude&gt;**&#x2F;generated&#x2F;*.java&lt;&#x2F;exclude&gt;</span><br><span class="line">            &lt;&#x2F;excludes&gt;</span><br><span class="line">            &lt;excludeRoots&gt;</span><br><span class="line">              &lt;excludeRoot&gt;target&#x2F;generated-sources&lt;&#x2F;excludeRoot&gt;</span><br><span class="line">            &lt;&#x2F;excludeRoots&gt;</span><br><span class="line">            &lt;rulesets&gt;</span><br><span class="line">              &lt;ruleset&gt;pmd-ruleset.xml&lt;&#x2F;ruleset&gt;</span><br><span class="line">            &lt;&#x2F;rulesets&gt;</span><br><span class="line">            &lt;printFailingErrors&gt;true&lt;&#x2F;printFailingErrors&gt;</span><br><span class="line">          &lt;&#x2F;configuration&gt;</span><br><span class="line">          &lt;executions&gt;</span><br><span class="line">            &lt;execution&gt;</span><br><span class="line">              &lt;id&gt;install&lt;&#x2F;id&gt;</span><br><span class="line">              &lt;phase&gt;install&lt;&#x2F;phase&gt;</span><br><span class="line">              &lt;goals&gt;</span><br><span class="line">                &lt;goal&gt;pmd&lt;&#x2F;goal&gt;</span><br><span class="line">              &lt;&#x2F;goals&gt;</span><br><span class="line">            &lt;&#x2F;execution&gt;</span><br><span class="line">          &lt;&#x2F;executions&gt;</span><br><span class="line">        &lt;&#x2F;plugin&gt;</span><br><span class="line">      &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;pluginManagement&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!--所有子模块都要执行的plugin--&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-pmd-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;&#x2F;plugin&gt;</span><br><span class="line">    &lt;&#x2F;plugins&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;build&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;reporting&gt;</span><br><span class="line">    &lt;!--所有子模块都要执行的报告--&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-pmd-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;&#x2F;plugin&gt;</span><br><span class="line">    &lt;&#x2F;plugins&gt;</span><br><span class="line">  &lt;&#x2F;reporting&gt;</span><br></pre></td></tr></table></figure><p>和上一节checkstyle不同的时候，这里的plugin下新增了dependency节点。这个节点负责加载一些资源过来，比如我们的配置文件ruleset。所以，这个dependency要先于项目存在，所以才要先单独install一下。当然，也可以把这个项目放到maven私服上，这样更简单了。</p><p>依旧把pmd的运行绑定到install命令上，这样，我们运行maven install的时候就可以进行pmd检查了。</p><p>检查报告在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">j-context&#x2F;target&#x2F;site&#x2F;pmd.html</span><br></pre></td></tr></table></figure><p>也可以单独运行pmd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn pmd:pmd</span><br></pre></td></tr></table></figure><h3 id="idea插件"><a href="#idea插件" class="headerlink" title="idea插件"></a>idea插件</h3><p>搜索安装idea pmd插件，导入我们的ruleset， 然后在项目上右键，run pmd即可。</p><h3 id="Ruleset-default内容"><a href="#Ruleset-default内容" class="headerlink" title="Ruleset default内容"></a>Ruleset default内容</h3><p>可以在maven官网看到： <a href="https://maven.apache.org/plugins/maven-pmd-plugin/examples/usingRuleSets.html">https://maven.apache.org/plugins/maven-pmd-plugin/examples/usingRuleSets.html</a></p><p>PMD 包含 16 个规则集，涵盖了 Java 的各种常见问题，其中一些规则要比其他规则更有争议：</p><p><strong>基本（rulesets/basic.xml）</strong>—— 规则的一个基本合集，可能大多数开发人员都不认同它： catch 块不该为空，无论何时重写 equals()，都要重写 hashCode()，等等。</p><p><strong>命名（rulesets/naming.xml）</strong>—— 对标准 Java 命令规范的测试：变量名称不应太短；方法名称不应过长；类名称应当以小写字母开头；方法和字段名应当以小写字母开头，等等。</p><p><strong>未使用的代码（rulesets/unusedcode.xml）</strong>—— 查找从未使用的私有字段和本地变量、执行不到的语句、从未调用的私有方法，等等。</p><p><strong>设计（rulesets/design.xml）</strong>—— 检查各种设计良好的原则，例如： switch 语句应当有 default 块，应当避免深度嵌套的 if 块，不应当给参数重新赋值，不应该对 double 值进行相等比较。</p><p><strong>导入语句（rulesets/imports.xml）</strong>—— 检查 import 语句的问题，比如同一个类被导入两次或者被导入 java.lang 的类中。</p><p><strong>JUnit 测试（rulesets/junit.xml）</strong>—— 查找测试用例和测试方法的特定问题，例如方法名称的正确拼写，以及 suite() 方法是不是 static 和 public。</p><p><strong>字符串（rulesets/string.xml）</strong>—— 找出处理字符串时遇到的常见问题，例如重复的字符串标量，调用 String 构造函数，对 String 变量调用 toString() 方法。</p><p><strong>括号（rulesets/braces.xml）</strong>—— 检查 for、 if、 while 和 else 语句是否使用了括号。</p><p><strong>代码尺寸（rulesets/codesize.xml）</strong>—— 测试过长的方法、有太多方法的类以及重构方面的类似问题。</p><p><strong>Javabean（rulesets/javabeans.xml）</strong>—— 查看 JavaBean 组件是否违反 JavaBean 编码规范，比如没有序列化的 bean 类。</p><p><strong>终结函数（finalizer）</strong>—— 因为在 Java 语言中， finalize() 方法不是那么普遍（我上次编写这个代码也经是好多年前的事了），所以它们的使用规则虽然很详细，但是人们对它们相对不是很熟悉。这类检查查找 finalize() 方法的各种问题，例如空的终结函数，调用其他方法的 finalize() 方法，对 finalize() 的显式调用，等等。</p><p><strong>克隆（rulesets/clone.xml）</strong>—— 用于 clone() 方法的新规则。凡是重写 clone() 方法的类都必须实现 Cloneable， clone() 方法应该调用 super.clone()，而 clone() 方法应该声明抛出 CloneNotSupportedException 异常，即使实际上没有抛出异常，也要如此。</p><p><strong>耦合（rulesets/coupling.xml）</strong>—— 查找类之间过度耦合的迹象，比如导入内容太多；在超类型或接口就已经够用的时候使用子类的类型；类中的字段、变量和返回类型过多等。</p><p><strong>严格的异常（rulesets/strictexception.xml）</strong>—— 针对异常的测试：不应该声明该方法而抛出 java.lang.Exception 异常，不应当将异常用于流控制，不应该捕获 Throwable，等等。</p><p><strong>有争议的（rulesets/controversial.xml）</strong>—— PMD 的有些规则是有能力的 Java 程序员可以接受的。但还是有一些争议。这个规则集包含一些更有问题的检验，其中包括把 null 赋值给变量、方法中有多个返回点，以及从 sun 包导入等。</p><p><strong>日志（rulesets/logging-java.xml）</strong>—— 查找 java.util.logging.Logger 的不当使用，包括非终状态（nonfinal）、非静态的记录器，以及在一个类中有多个记录器。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://pmd.github.io/#about">PMD官网</a></li><li><a href="https://maven.apache.org/plugins/maven-pmd-plugin/examples/usingRuleSets.html">Maven插件</a></li><li><a href="https://docs.gradle.org/current/userguide/pmd_plugin.html">Gradle插件</a></li><li><a href="https://www.ibm.com/developerworks/cn/java/j-pmd/index.html">用 PMD 铲除 bug</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用checkstyle来构建你的项目规范</title>
      <link href="2018/06/12/using-checkstyle/"/>
      <url>2018/06/12/using-checkstyle/</url>
      
        <content type="html"><![CDATA[<h2 id="Checkstyle是什么"><a href="#Checkstyle是什么" class="headerlink" title="Checkstyle是什么"></a>Checkstyle是什么</h2><p>自从做了程序员，关于格式化的讨论就不曾中断过，到底什么才是正确的，什么才是错误的，到现在也没有完整的定论。但随着时间发展，渐渐衍生出一套规范出来。没有什么绝对的正确和错误，关键在于规范的定义。最出名的就是<a href="https://google.github.io/styleguide/javaguide.html">google style guide</a>. Checkstyle就是以这种风格开发出的一个自动化插件，来辅助判断代码格式是否满足规范。</p><h2 id="为什么要用，我们需要吗"><a href="#为什么要用，我们需要吗" class="headerlink" title="为什么要用，我们需要吗"></a>为什么要用，我们需要吗</h2><p>最初，我使用checkstyle是因为公司要求，在经历过一段痛苦的格式重构阶段后，渐渐习惯了这样的格式。到后来，我新建项目就会把这个加进去，最多改几条规则。前一段时间，由于赶项目进度，其他人不熟悉，只好先关掉了。到后面发现真的每个人的风格都不一样，都看着代码怪怪的。所以，又加回来了。对于多人合作的项目，还是建议采用这样的规范，内容不必拘泥于google-checks，找出适合你们团队的风格就好。</p><a id="more"></a><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="在gralde中使用"><a href="#在gralde中使用" class="headerlink" title="在gralde中使用"></a>在gralde中使用</h3><p>在gralde中用法比较简单。示例项目： <a href="https://github.com/Ryan-Miao/springboot-security-demo/blob/master/config/checkstyle/checkstyle.xml">https://github.com/Ryan-Miao/springboot-security-demo/blob/master/config/checkstyle/checkstyle.xml</a></p><p>新建一个checkstyle.gradle</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Checkstyle Plugin</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Gradle plugin that performs quality checks on your project&#x27;s Java source files using Checkstyle</span></span><br><span class="line"><span class="comment"> * and generates reports from these checks.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Tasks:</span></span><br><span class="line"><span class="comment"> * Run Checkstyle against &#123;rootDir&#125;/src/main/java: ./gradlew checkstyleMain</span></span><br><span class="line"><span class="comment"> * Run Checkstyle against &#123;rootDir&#125;/src/test/java: ./gradlew checkstyleTest</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Reports:</span></span><br><span class="line"><span class="comment"> * Checkstyle reports can be found in &#123;project.buildDir&#125;/build/reports/checkstyle</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Configuration:</span></span><br><span class="line"><span class="comment"> * Checkstyle is very configurable. The configuration file is located at &#123;rootDir&#125;/config/checkstyle/checkstyle.xml</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Additional Documentation:</span></span><br><span class="line"><span class="comment"> * https://docs.gradle.org/current/userguide/checkstyle_plugin.html</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">apply plugin: <span class="string">&#x27;checkstyle&#x27;</span></span><br><span class="line"></span><br><span class="line">checkstyle &#123;</span><br><span class="line">    <span class="comment">// The version of the code quality tool to be used.</span></span><br><span class="line">    <span class="comment">// The most recent version of Checkstyle can be found at https://github.com/checkstyle/checkstyle/releases</span></span><br><span class="line">    toolVersion = <span class="string">&quot;8.8&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// The source sets to be analyzed as part of the check and build tasks.</span></span><br><span class="line">    <span class="comment">// Use &#x27;sourceSets = []&#x27; to remove Checkstyle from the check and build tasks.</span></span><br><span class="line"><span class="comment">//    sourceSets = [project.sourceSets.main, project.sourceSets.test]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Whether or not to allow the build to continue if there are warnings.</span></span><br><span class="line">    ignoreFailures = <span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Whether or not rule violations are to be displayed on the console.</span></span><br><span class="line">    showViolations = <span class="keyword">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，在build.gradle中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply from: &#39;checkstyle.gradle&#39;</span><br></pre></td></tr></table></figure><p>应该庆幸gradle的繁荣，checkstyle都支持的到8.0以上了。后面用maven的时候遇到版本问题，完美主义追求最新版的心态会难受死。</p><p>然后，关键的地方是指定checkstyle.xml规则配置文件了。默认会读取根目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config&#x2F;checkstyle&#x2F;checkstyle.xml</span><br></pre></td></tr></table></figure><p>文件的内容来自：<a href="https://sourceforge.net/projects/checkstyle/files/checkstyle/">https://sourceforge.net/projects/checkstyle/files/checkstyle/</a></p><p>即，去maven中找到对应版本的checkstyle, 然后下载jar，解压，里面有google-checks.xml, 复制里面的内容即可。</p><p>还可以直接用最新版本，参见<a href="https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml">Github</a>。</p><p>运行任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;gradlew check</span><br></pre></td></tr></table></figure><p>然后可以在以下目录找到检查结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build&#x2F;reports&#x2F;checkstyle&#x2F;main.html</span><br></pre></td></tr></table></figure><p>更多细节，参考<a href="https://docs.gradle.org/current/userguide/checkstyle_plugin.html">gradle 官网</a>.</p><h3 id="idea自动格式化"><a href="#idea自动格式化" class="headerlink" title="idea自动格式化"></a>idea自动格式化</h3><p>对于检查的结果，手动修改可能比较慢，同样有人提供了idea对应的插件来格式化。</p><p><a href="https://github.com/google/styleguide/edit/gh-pages/intellij-java-google-style.xml">https://github.com/google/styleguide/edit/gh-pages/intellij-java-google-style.xml</a></p><p>用法是，intelij idea - settting - Editor - code style - scheme, 点击旁边的齿轮设置按钮，选择import scheme, intelij idea code style xml.</p><p>导入后，使用快捷键可以快速格式化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">contrl + alt + l</span><br></pre></td></tr></table></figure><h3 id="在maven中使用"><a href="#在maven中使用" class="headerlink" title="在maven中使用"></a>在maven中使用</h3><p>maven中对于单模块应用参见<a href="http://maven.apache.org/plugins/maven-checkstyle-plugin/usage.html">官网</a></p><p>pom中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;project&gt;</span><br><span class="line">  ...</span><br><span class="line">   &lt;reporting&gt;</span><br><span class="line">      &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-checkstyle-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.0.0&lt;&#x2F;version&gt;</span><br><span class="line">          &lt;reportSets&gt;</span><br><span class="line">            &lt;reportSet&gt;</span><br><span class="line">              &lt;reports&gt;</span><br><span class="line">                &lt;report&gt;checkstyle&lt;&#x2F;report&gt;</span><br><span class="line">              &lt;&#x2F;reports&gt;</span><br><span class="line">            &lt;&#x2F;reportSet&gt;</span><br><span class="line">          &lt;&#x2F;reportSets&gt;</span><br><span class="line">        &lt;&#x2F;plugin&gt;</span><br><span class="line">      &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;reporting&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><p>运行maven site即可在以下目录找到结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target&#x2F;site&#x2F;checkstyle.html</span><br></pre></td></tr></table></figure><p>也可以单独执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn checkstyle:checkstyle</span><br></pre></td></tr></table></figure><h4 id="checkstyle-plugin与checkstyle的版本对应关系"><a href="#checkstyle-plugin与checkstyle的版本对应关系" class="headerlink" title="checkstyle plugin与checkstyle的版本对应关系"></a>checkstyle plugin与checkstyle的版本对应关系</h4><p><a href="http://maven.apache.org/plugins/maven-checkstyle-plugin/history.html">http://maven.apache.org/plugins/maven-checkstyle-plugin/history.html</a></p><h4 id="Maven多模块的checkstyle配置"><a href="#Maven多模块的checkstyle配置" class="headerlink" title="Maven多模块的checkstyle配置"></a>Maven多模块的checkstyle配置</h4><p>大多数情况下，我们会把项目的逻辑按照模块拆分出来，便于分离和解耦，项目脉络也更加清晰。在这种情况下，我们为每个模块创建checkstyle任务，需要放到parent的pom里。</p><p>示例项目： <a href="https://github.com/Ryan-Miao/springboot-starter-feign/blob/master/pom.xml">https://github.com/Ryan-Miao/springboot-starter-feign/blob/master/pom.xml</a></p><p>在父项目，parent pom里：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--compiler在maven声明周期内置，所以后面不用声明也可使用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--公共checkstyle标准配置，可以在子模块中覆盖，修改自定义选项--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-checkstyle-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configLocation</span>&gt;</span>config/checkstyle/google-checks-6.18.xml<span class="tag">&lt;/<span class="name">configLocation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">consoleOutput</span>&gt;</span>true<span class="tag">&lt;/<span class="name">consoleOutput</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">consoleOutput</span>&gt;</span>true<span class="tag">&lt;/<span class="name">consoleOutput</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">failsOnError</span>&gt;</span>true<span class="tag">&lt;/<span class="name">failsOnError</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">linkXRef</span>&gt;</span>false<span class="tag">&lt;/<span class="name">linkXRef</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">skip</span>&gt;</span>false<span class="tag">&lt;/<span class="name">skip</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">violationSeverity</span>&gt;</span>error<span class="tag">&lt;/<span class="name">violationSeverity</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>install<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">phase</span>&gt;</span>install<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>checkstyle<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--所有子模块都要执行的plugin--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-checkstyle-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">reporting</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--所有子模块都要执行的报告--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-checkstyle-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里，<code>maven-compiler-plugin</code>不是必须的，事实上，maven会在项目生命周期中自动执行，我添加这个插件的原因是在idea里的java编译级别需要根据这里来指定。</p><p>checkstyle plugin的配置有点多，需要仔细理解一下maven中plugin的含义。</p><p><strong>build</strong></p><p>在maven指令执行的时候会读取这个节点的配置，决定哪个plugin应该执行，怎么执行。</p><p><strong>pluginManagement</strong></p><p>这个是版本和共同配置的节点, 同<code>dependencyManagement</code>, 为了约束子项目使用共同的配置。不同的是，这个是指plugin。</p><p><strong>plugin</strong> </p><p>这个表示一个插件，maven执行命令都可以用插件来理解。</p><p><strong>plugin&gt;configuration</strong>    </p><p>对于plugin的配置，具体有哪些配置项要看具体的plugin。</p><p><strong>executions&gt;execution</strong>   </p><p>plugin应该什么时候执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;execution&gt;</span><br><span class="line">  &lt;id&gt;install&lt;&#x2F;id&gt;</span><br><span class="line">  &lt;phase&gt;install&lt;&#x2F;phase&gt;</span><br><span class="line">  &lt;goals&gt;</span><br><span class="line">    &lt;goal&gt;checkstyle&lt;&#x2F;goal&gt;</span><br><span class="line">  &lt;&#x2F;goals&gt;</span><br><span class="line">&lt;&#x2F;execution&gt;</span><br></pre></td></tr></table></figure><p>id可以随意，phase则是需要绑定到lifecycle的phase中的哪个命令上，这里是绑定到install上，即当执行maven install的时候会执行本plugin。</p><p><strong>goals&gt;goal</strong><br>一个plugin有多个goals，即任务，是指绑定执行哪个任务。这里之绑定<code>checkstyle</code></p><h2 id="checkstyle的错误级别"><a href="#checkstyle的错误级别" class="headerlink" title="checkstyle的错误级别"></a>checkstyle的错误级别</h2><p>在checkstyle.xml的配置文件中，有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name&#x3D;&quot;severity&quot; value&#x3D;&quot;error&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>这里是说当前这个配置是什么错误级别。如果配置的是error，那么扫描到不符合条件的，就是打印error。对于配置了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;failsOnError&gt;true&lt;&#x2F;failsOnError&gt;</span><br></pre></td></tr></table></figure><p>则会打断命令执行，错误的时候会停止。否则，错误会生成报告，但不会阻止命令执行。如果配置了info</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[INFO] --- maven-checkstyle-plugin:3.0.0:checkstyle (install) @ j-d2-job ---</span><br><span class="line">[INFO] Starting audit...</span><br><span class="line">[INFO] E:\workspace\parent-demo\demo-job\src\main\java\com\demo\Service.java:147:34: WhitespaceAround: &#39;+&#39; is not preceded with whitespace. [WhitespaceAround]</span><br><span class="line">Audit done.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>会显示是info，不是error，不会阻断任务执行。最开始查了很久都没找到原因，原来在这里配置的，-_-||。</p><p><strong>checkstyle里允许的错误级别有error, warning, info</strong>. 只有error并配置了failsOnError会打断命令的执行。打断执行后会在对应的子模块的target下生成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target&#x2F;checkstyle-result.xml</span><br></pre></td></tr></table></figure><p>但不能生成html，或者可以选择声明plain，这个更不好看。纠结了半天就妥协了，就自己看xml结果吧，知道具体的class之后再结合idea checkstyle插件来修改就行。</p><h2 id="checkstyle遇到的错误"><a href="#checkstyle遇到的错误" class="headerlink" title="checkstyle遇到的错误"></a>checkstyle遇到的错误</h2><h3 id="checkstyle缓存"><a href="#checkstyle缓存" class="headerlink" title="checkstyle缓存"></a>checkstyle缓存</h3><p>修改checkstyle.xml后发现还报错，原因是没生效，过一会就好了。</p><h3 id="EmptyCatchBlockCheck"><a href="#EmptyCatchBlockCheck" class="headerlink" title="EmptyCatchBlockCheck"></a>EmptyCatchBlockCheck</h3><p>如果try-catch捕获了异常但却没有任何操作，则会报警。当然，你确实认为不需要任何操作，可以忽略，忽略配置方案</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;EmptyCatchBlock&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionVariableName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ignore|expected;/&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">&lt;/module&gt;</span></span></span><br></pre></td></tr></table></figure><p>此时，只要把捕获的excavation变量名称修改为<code>ignore</code>或者<code>expected</code>就可以避免审查。</p><p>比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">     throw new RuntimeException();</span><br><span class="line"> &#125; catch (RuntimeException expected) &#123;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> try &#123;</span><br><span class="line">     throw new RuntimeException();</span><br><span class="line"> &#125; catch (RuntimeException ignore) &#123;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>还可以配置注释，只要添加注释即可忽略</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;module name&#x3D;&quot;EmptyCatchBlock&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;exceptionVariableName&quot; value&#x3D;&quot;ignore|expected&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;commentFormat&quot; value&#x3D;&quot;ignore&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;module&gt;</span><br></pre></td></tr></table></figure><p>比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">     throw new RuntimeException();</span><br><span class="line"> &#125; catch (RuntimeException ex) &#123;</span><br><span class="line">     &#x2F;&#x2F;ignore</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="AbbreviationAsWordInName"><a href="#AbbreviationAsWordInName" class="headerlink" title="AbbreviationAsWordInName"></a>AbbreviationAsWordInName</h3><p>变量名称不允许连续大写，遵循驼峰命名规范。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;module name&#x3D;&quot;AbbreviationAsWordInName&quot;&gt;</span><br><span class="line">   &lt;property name&#x3D;&quot;tokens&quot; value&#x3D;&quot;VARIABLE_DEF,CLASS_DEF&quot;&#x2F;&gt;</span><br><span class="line">   &lt;property name&#x3D;&quot;ignoreStatic&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;</span><br><span class="line">   &lt;property name&#x3D;&quot;allowedAbbreviationLength&quot; value&#x3D;&quot;1&quot;&#x2F;&gt;</span><br><span class="line">   &lt;property name&#x3D;&quot;allowedAbbreviations&quot; value&#x3D;&quot;XML,URL&quot;&#x2F;&gt;</span><br><span class="line"> &lt;&#x2F;module&gt;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>没有尝试和努力解决之前，总是以为很难不可能做到。等像打怪升级一样把项目过一遍之后，你发现checkstyle貌似也不难。永远不要用做不到来限制你的未来。</p>]]></content>
      
      
      <categories>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为springboot项目添加springboot-admin监控</title>
      <link href="2018/06/11/springboot-admin-demo/"/>
      <url>2018/06/11/springboot-admin-demo/</url>
      
        <content type="html"><![CDATA[<p>我们知道spring-boot-actuator暴露了大量统计和监控信息的端点，spring-boot-admin<br>就是为此提供的监控项目。</p><p>先来看看大概会提供什么样的功能</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/2018/spring/admin-list.png"></p><p><img src="http://oe20lp6p0.bkt.clouddn.com/2018/spring/admin-detail.png"></p><p>从图中可以看出，主要内容都是由spring boot actuator来提供的。更多关于actuator的信息参见<a href="https://www.cnblogs.com/woshimrf/p/springboot-actuator.html">Springboot actuator</a></p><p>接下来，hello world时间。</p><a id="more"></a><h2 id="server端"><a href="#server端" class="headerlink" title="server端"></a>server端</h2><p>server端是一个单独的springboot项目，主要负责收集和展示监控指标，提供了ui page。</p><p>项目地址： <a href="https://github.com/Ryan-Miao/springboot-admin-demo">https://github.com/Ryan-Miao/springboot-admin-demo</a></p><p>新建一个springboot项目，可以使用idea自带的spring initializr. 主要添加以下两个依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot-admin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-server-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在启动类上添加<code>@EnableAdminServer</code></p><p>在配置文件中设置服务地址，这里假设为8081</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port&#x3D;8081</span><br></pre></td></tr></table></figure><p>启动。</p><h2 id="client-端"><a href="#client-端" class="headerlink" title="client 端"></a>client 端</h2><p>client端是指我们正常的app，我们的spring boot项目就是。在原有的基础上添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springboot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>build-info<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后配置相关信息：</p><p>client端添加admin的url，这里暂时忽略spring security</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">boot:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">http://localhost:8081</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>然后，启动我们的app。访问localhost:8081就可以看到文章开始图片里的信息了。</p><p>更多文档： <a href="https://codecentric.github.io/spring-boot-admin/1.5.0/#_what_is_spring_boot_admin">https://codecentric.github.io/spring-boot-admin/1.5.0/#_what_is_spring_boot_admin</a></p>]]></content>
      
      
      <categories>
          
          <category> Springboot </category>
          
          <category> admin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
            <tag> 监控 </tag>
            
            <tag> admin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenFeign封装为springboot starter</title>
      <link href="2018/06/11/springboot-with-feign/"/>
      <url>2018/06/11/springboot-with-feign/</url>
      
        <content type="html"><![CDATA[<h2 id="OpenFeign是什么"><a href="#OpenFeign是什么" class="headerlink" title="OpenFeign是什么"></a>OpenFeign是什么</h2><p>随着业务的增多，我们的单体应用越来越复杂，单机已经难以满足性能的需求，这时候出现了分布式。分布式通讯除了RPC, REST HTTP请求是最简单的一种方式。<a href="https://github.com/OpenFeign/feign/tree/master/hystrix">OpenFeign</a>是Netflix开源的参照Retrofit, JAXRS-2.0, and WebSocket的一个http client客户端，致力于减少http client客户端构建的复杂性。</p><a id="more"></a><h2 id="官方用法"><a href="#官方用法" class="headerlink" title="官方用法"></a>官方用法</h2><p>github提供了一个简单的demo，很容易理解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GitHub</span> </span>&#123;</span><br><span class="line">  <span class="meta">@RequestLine(&quot;GET /repos/&#123;owner&#125;/&#123;repo&#125;/contributors&quot;)</span></span><br><span class="line">  <span class="function">List&lt;Contributor&gt; <span class="title">contributors</span><span class="params">(<span class="meta">@Param(&quot;owner&quot;)</span> String owner, <span class="meta">@Param(&quot;repo&quot;)</span> String repo)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Contributor</span> </span>&#123;</span><br><span class="line">  String login;</span><br><span class="line">  <span class="keyword">int</span> contributions;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">  GitHub github = Feign.builder()</span><br><span class="line">                       .decoder(<span class="keyword">new</span> GsonDecoder())</span><br><span class="line">                       .target(GitHub.class, <span class="string">&quot;https://api.github.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Fetch and print a list of the contributors to this library.</span></span><br><span class="line">  List&lt;Contributor&gt; contributors = github.contributors(<span class="string">&quot;OpenFeign&quot;</span>, <span class="string">&quot;feign&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (Contributor contributor : contributors) &#123;</span><br><span class="line">    System.out.println(contributor.login + <span class="string">&quot; (&quot;</span> + contributor.contributions + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的说，这么用没问题。但如果想要集成到系统中，关于Hystrix的配置还需要自己指定。为此，我单独把配置方案提炼了一下。</p><p>项目地址： <a href="https://github.com/Ryan-Miao/springboot-starter-feign">https://github.com/Ryan-Miao/springboot-starter-feign</a></p><p>本项目提供了一个开箱即用的spring boot feign starter, 基于默认的约定配置<br>来简化和优化OpenFeign的使用流程.</p><h2 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h2><p>引入repo</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>jitpack.io<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://jitpack.io<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.Ryan-Miao<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在springboot 项目中添加Configuration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FeignFactory <span class="title">feignFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FeignFactory(environment, hystrixConfigurationProperties());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> HystrixConfigurationProperties <span class="title">hystrixConfigurationProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HystrixConfigurationProperties();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以使用了。</p><h3 id="使用和配置"><a href="#使用和配置" class="headerlink" title="使用和配置"></a>使用和配置</h3><p>约定了一些配置，大概如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrixConfig:</span></span><br><span class="line">    <span class="attr">&quot;hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds&quot;:</span> <span class="number">8000</span></span><br><span class="line">    <span class="string">&quot;hystrix.command.GithubConnector#getRepos.execution.isolation.thread.timeoutInMilliseconds&quot;</span><span class="string">:</span> <span class="number">15000</span></span><br><span class="line">  <span class="attr">endpointConfig:</span></span><br><span class="line">    <span class="attr">GithubConnector:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">https://api.github.com</span></span><br><span class="line">        <span class="attr">readTimeoutMillis:</span> <span class="number">8000</span></span><br><span class="line">        <span class="attr">connectTimeoutMillis:</span> <span class="number">5000</span></span><br><span class="line">      <span class="attr">getRepos:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">https://api.github.com</span></span><br><span class="line">        <span class="attr">readTimeoutMillis:</span> <span class="number">15000</span></span><br><span class="line">        <span class="attr">connectTimeoutMillis:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><ul><li>feign是配置的第一个索引</li><li>hystrixConfig是hystrix的配置，更多配置见<a href="https://github.com/Netflix/Hystrix/">Hystrix</a></li><li>endpointConfig是我们远程请求的host和超时配置，其中，第一个节点为Connector class<br>的名称，下一个是具体到某个请求的key，整个Connector class的默认配置是default<br>节点，如果该Connector里的某个请求的超时比较长，需要单独设置，则会覆盖默认节点。<br>另外，hystrix的超时配置commankey为[connectorClassName][#][methodName]</li></ul><p>定义一个GithubConnector，继承<code>com.miao.connect.Connector</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GithubConnector</span> <span class="keyword">extends</span> <span class="title">Connector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestLine(&quot;GET /users/&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Headers(&#123;&quot;Content-Type: application/json&quot;&#125;)</span></span><br><span class="line">    <span class="function">GithubUser <span class="title">getGithubUser</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestLine(&quot;GET /users/&#123;username&#125;/repos&quot;)</span></span><br><span class="line">    <span class="meta">@Headers(&#123;&quot;Content-Type: application/json&quot;&#125;)</span></span><br><span class="line">    <span class="function">Observable&lt;String&gt; <span class="title">getRepos</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> FeignFactory feignFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/profile/&#123;username&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> GithubUser <span class="title">getProfile</span><span class="params">(<span class="meta">@PathVariable</span> String username)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//采用Jackson作为编码和解码类库，url和超时配置按照default，即读取feign.endpointConfig.GithubConnector.default</span></span><br><span class="line">    <span class="keyword">final</span> GithubConnector connector = feignFactory.builder().getConnector(GithubConnector.class);</span><br><span class="line">    <span class="keyword">return</span> connector.getGithubUser(username);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/repos/&#123;username&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserRepos</span><span class="params">(<span class="meta">@PathVariable</span> String username)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//用String来接收返回值， url和超时单独指定配置，因为请求时间较长</span></span><br><span class="line">    <span class="comment">//采用connector的method来当做获取配置的key，即读取feign.endpointConfig.GithubConnector.getRepos</span></span><br><span class="line">    <span class="keyword">final</span> GithubConnector connector = feignFactory.builder()</span><br><span class="line">        .connectorMethod(<span class="string">&quot;getRepos&quot;</span>)</span><br><span class="line">        .stringDecoder()  <span class="comment">//默认使用jackson作为序列化工具，这里接收string，使用StringDecoder</span></span><br><span class="line">        .getConnector(GithubConnector.class);</span><br><span class="line">    <span class="keyword">return</span> connector.getRepos(username)</span><br><span class="line">        .onErrorReturn(e -&gt; &#123;</span><br><span class="line">            LOGGER.error(<span class="string">&quot;请求出错&quot;</span>, e);</span><br><span class="line">            Throwable cause = e.getCause();</span><br><span class="line">            <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> FeignErrorException) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (FeignErrorException) cause;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;请求失败&quot;</span>, e);</span><br><span class="line">        &#125;).toBlocking().first();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体见<a href="example">使用示例example</a></p><h2 id="相比原生有什么区别？"><a href="#相比原生有什么区别？" class="headerlink" title="相比原生有什么区别？"></a>相比原生有什么区别？</h2><p>最大的区别是hystrix配置的内容，原生并没有提供hystrix相关配置，需要自己额外<br>准备。这里集成hystrix的约定，只要按照hystrix官方参数配置即可。</p><p>然后是缓存，在使用原生OpenFeign的过程中发现每次请求都要创建一个Connector,<br>而且Connector的创建又依赖一大堆别的class。对于我们远程调用比较频繁的应用来说，<br>增大了垃圾收集器的开销，我们其实不想回收。所以对Connector做了缓存。</p><p>其他用法同OpenFeign。</p>]]></content>
      
      
      <categories>
          
          <category> Springboot </category>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
            <tag> 网络 </tag>
            
            <tag> feign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB分页的Java实现和分页需求的思考</title>
      <link href="2018/06/07/mongodb-pagenation-performance/"/>
      <url>2018/06/07/mongodb-pagenation-performance/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>传统关系数据库中都提供了基于row number的分页功能，切换MongoDB后，想要实现分页，则需要修改一下思路。</p><a id="more"></a><h2 id="传统分页思路"><a href="#传统分页思路" class="headerlink" title="传统分页思路"></a>传统分页思路</h2><p>假设一页大小为10条。则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;page 1</span><br><span class="line">1-10</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;page 2</span><br><span class="line">11-20</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;page 3</span><br><span class="line">21-30</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;page n</span><br><span class="line">10*(n-1) +1 - 10*n</span><br></pre></td></tr></table></figure><p>MongoDB提供了skip()和limit()方法。</p><p><strong>skip</strong>: 跳过指定数量的数据. 可以用来跳过当前页之前的数据，即跳过pageSize*(n-1)。<br><strong>limit</strong>: 指定从MongoDB中读取的记录条数，可以当做页面大小pageSize。</p><p>所以，分页可以这样做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Page 1</span><br><span class="line">db.users.find().limit (10)</span><br><span class="line">&#x2F;&#x2F;Page 2</span><br><span class="line">db.users.find().skip(10).limit(10)</span><br><span class="line">&#x2F;&#x2F;Page 3</span><br><span class="line">db.users.find().skip(20).limit(10)</span><br><span class="line">........</span><br></pre></td></tr></table></figure><p><strong>问题</strong>    </p><p>看起来，分页已经实现了，但是官方文档并不推荐，说会扫描全部文档，然后再返回结果。</p><blockquote><p>The cursor.skip() method requires the server to scan from the beginning of the input results set before beginning to return results. As the offset increases, cursor.skip() will become slower.</p></blockquote><p>所以，需要一种更快的方式。其实和mysql数量大之后不推荐用limit m,n一样，解决方案是先查出当前页的第一条，然后顺序数pageSize条。MongoDB官方也是这样推荐的。</p><h2 id="正确的分页办法"><a href="#正确的分页办法" class="headerlink" title="正确的分页办法"></a>正确的分页办法</h2><p>我们假设基于_id的条件进行查询比较。事实上，这个比较的基准字段可以是任何你想要的有序的字段，比如时间戳。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Page 1</span><br><span class="line">db.users.find().limit(pageSize);</span><br><span class="line">&#x2F;&#x2F;Find the id of the last document in this page</span><br><span class="line">last_id &#x3D; ...</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;Page 2</span><br><span class="line">users &#x3D; db.users.find(&#123;</span><br><span class="line">  &#39;_id&#39; :&#123; &quot;$gt&quot; :ObjectId(&quot;5b16c194666cd10add402c87&quot;)&#125;</span><br><span class="line">&#125;).limit(10)</span><br><span class="line">&#x2F;&#x2F;Update the last id with the id of the last document in this page</span><br><span class="line">last_id &#x3D; ...</span><br></pre></td></tr></table></figure><p>显然，第一页和后面的不同。对于构建分页API, 我们可以要求用户必须传递pageSize, lastId。</p><ul><li>pageSize 页面大小</li><li>lastId 上一页的最后一条记录的id，如果不传，则将强制为第一页</li></ul><h3 id="降序"><a href="#降序" class="headerlink" title="降序"></a>降序</h3><p><code>_id</code>降序，第一页是最大的，下一页的id比上一页的最后的id还小。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printStudents</span>(<span class="params">startValue, nPerPage</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> endValue = <span class="literal">null</span>;</span><br><span class="line">  db.students.find( &#123; <span class="attr">_id</span>: &#123; <span class="attr">$lt</span>: startValue &#125; &#125; )</span><br><span class="line">             .sort( &#123; <span class="attr">_id</span>: -<span class="number">1</span> &#125; )</span><br><span class="line">             .limit( nPerPage )</span><br><span class="line">             .forEach( <span class="function"><span class="params">student</span> =&gt;</span> &#123;</span><br><span class="line">               print( student.name );</span><br><span class="line">               endValue = student._id;</span><br><span class="line">             &#125; );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> endValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="升序"><a href="#升序" class="headerlink" title="升序"></a>升序</h3><p><code>_id</code>升序， 下一页的id比上一页的最后一条记录id还大。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printStudents</span>(<span class="params">startValue, nPerPage</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> endValue = <span class="literal">null</span>;</span><br><span class="line">  db.students.find( &#123; <span class="attr">_id</span>: &#123; <span class="attr">$gt</span>: startValue &#125; &#125; )</span><br><span class="line">             .sort( &#123; <span class="attr">_id</span>: <span class="number">1</span> &#125; )</span><br><span class="line">             .limit( nPerPage )</span><br><span class="line">             .forEach( <span class="function"><span class="params">student</span> =&gt;</span> &#123;</span><br><span class="line">               print( student.name );</span><br><span class="line">               endValue = student._id;</span><br><span class="line">             &#125; );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> endValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一共多少条"><a href="#一共多少条" class="headerlink" title="一共多少条"></a>一共多少条</h3><p>还有一共多少条和多少页的问题。所以，需要先查一共多少条count.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.find().count();</span><br></pre></td></tr></table></figure><h3 id="ObjectId的有序性问题"><a href="#ObjectId的有序性问题" class="headerlink" title="ObjectId的有序性问题"></a>ObjectId的有序性问题</h3><p>先看ObjectId生成规则：  </p><p><img src="http://oe20lp6p0.bkt.clouddn.com/2018/page/mongo-id.png"></p><p>比如<code>&quot;_id&quot; : ObjectId(&quot;5b1886f8965c44c78540a4fc&quot;)</code></p><p>取id的前4个字节。由于id是16进制的string，4个字节就是32位，对应id前8个字符。即<code>5b1886f8</code>, 转换成10进制为<code>1528334072</code>. 加上1970，就是当前时间。</p><p>事实上，更简单的办法是查看org.mongodb:bson:3.4.3里的ObjectId对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ObjectId</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(dateToTimestampSeconds(date), MACHINE_IDENTIFIER, PROCESS_IDENTIFIER, NEXT_COUNTER.getAndIncrement(), <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//org.bson.types.ObjectId#dateToTimestampSeconds </span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dateToTimestampSeconds</span><span class="params">(Date time)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)(time.getTime() / <span class="number">1000L</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//java.util.Date#getTime</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT</span></span><br><span class="line"><span class="comment"> * represented by this &lt;tt&gt;Date&lt;/tt&gt; object.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  the number of milliseconds since January 1, 1970, 00:00:00 GMT</span></span><br><span class="line"><span class="comment"> *          represented by this date.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getTimeImpl();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MongoDB的ObjectId应该是随着时间而增加的，即后插入的id会比之前的大。但考量id的生成规则，最小时间排序区分是秒，同一秒内的排序无法保证。当然，如果是同一台机器的同一个进程生成的对象，是有序的。</p><p>如果是分布式机器，不同机器时钟同步和偏移的问题。所以，如果你有个字段可以保证是有序的，那么用这个字段来排序是最好的。<code>_id</code>则是最后的备选方案。</p><h3 id="如果我一定要跳页"><a href="#如果我一定要跳页" class="headerlink" title="如果我一定要跳页"></a>如果我一定要跳页</h3><p>上面的分页看起来看理想，虽然确实是，但有个刚需不曾指明—我怎么跳页。</p><p>我们的分页数据要和排序键关联，所以必须有一个排序基准来截断记录。而跳页，我只知道第几页，条件不足，无法分页了。</p><p>现实业务需求确实提出了跳页的需求，虽然几乎不会有人用，人们更关心的是开头和结尾，而结尾可以通过逆排序的方案转成开头。所以，真正分页的需求应当是不存在的。如果你是为了查找某个记录，那么查询条件搜索是最快的方案。如果你不知道查询条件，通过肉眼去一一查看，那么下一页足矣。</p><p>说了这么多，就是想扭转传统分页的概念，在互联网发展的今天，大部分数据的体量都是庞大的，跳页的需求将消耗更多的内存和cpu，对应的就是查询慢。</p><p>当然，如果数量不大，如果不介意慢一点，那么skip也不是啥问题，关键要看业务场景。</p><p>我今天接到的需求就是要跳页，而且数量很小，那么skip吧，不费事，还快。</p><p><strong>来看看大厂们怎么做的</strong>  </p><p>Google最常用了，看起来是有跳页选择的啊。再仔细看，只有10页，多的就必须下一页，并没有提供一共多少页，跳到任意页的选择。这不就是我们的find-condition-then-limit方案吗，只是他的一页数量比较多，前端或者后端把这一页给切成了10份。<br><img src="http://oe20lp6p0.bkt.clouddn.com/2018/page/google-search-results-600x105.jpg"></p><p>同样，看Facebook，虽然提供了总count，但也只能下一页。<br><img src="http://oe20lp6p0.bkt.clouddn.com/2018/page/fb-search-600x121.jpg"></p><p>其他场景，比如Twitter，微博，朋友圈等，根本没有跳页的概念的。</p><h2 id="排序和性能"><a href="#排序和性能" class="headerlink" title="排序和性能"></a>排序和性能</h2><p>前面关注于分页的实现原理，但忽略了排序。既然分页，肯定是按照某个顺序进行分页的，所以必须要有排序的。</p><p>MongoDB的sort和find组合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.bios.find().sort( &#123; name: 1 &#125; ).limit( 5 )</span><br><span class="line">db.bios.find().limit( 5 ).sort( &#123; name: 1 &#125; )</span><br></pre></td></tr></table></figure><p>这两个都是等价的，顺序不影响执行顺序。即，都是先find查询符合条件的结果，然后在结果集中排序。</p><p>我们条件查询有时候也会按照某字段排序的，比如按照时间排序。查询一组时间序列的数据，我们想要按照时间先后顺序来显示内容，则必须先按照时间字段排序，然后再按照id升序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.find(&#123;name: &quot;Ryan&quot;&#125;).sort( &#123; birth: 1, _id: 1 &#125; ).limit( 5 )</span><br></pre></td></tr></table></figure><p>我们先按照birth升序，然后birth相同的record再按照_id升序，如此可以实现我们的分页功能了。</p><h3 id="多字段排序"><a href="#多字段排序" class="headerlink" title="多字段排序"></a>多字段排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.records.sort(&#123; a:1, b:-1&#125;)</span><br></pre></td></tr></table></figure><p>表示先按照a升序，再按照b降序。即，按照字段a升序，对于a相同的记录，再用b降序，而不是按a排完之后再全部按b排。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">db.user.find();</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"></span><br><span class="line">&#123; </span><br><span class="line">    &quot;_id&quot; : ObjectId(&quot;5b1886ac965c44c78540a4fb&quot;), </span><br><span class="line">    &quot;name&quot; : &quot;a&quot;, </span><br><span class="line">    &quot;age&quot; : 1.0, </span><br><span class="line">    &quot;id&quot; : &quot;1&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#123; </span><br><span class="line">    &quot;_id&quot; : ObjectId(&quot;5b1886f8965c44c78540a4fc&quot;), </span><br><span class="line">    &quot;name&quot; : &quot;a&quot;, </span><br><span class="line">    &quot;age&quot; : 2.0, </span><br><span class="line">    &quot;id&quot; : &quot;2&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#123; </span><br><span class="line">    &quot;_id&quot; : ObjectId(&quot;5b1886fa965c44c78540a4fd&quot;), </span><br><span class="line">    &quot;name&quot; : &quot;b&quot;, </span><br><span class="line">    &quot;age&quot; : 1.0, </span><br><span class="line">    &quot;id&quot; : &quot;3&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#123; </span><br><span class="line">    &quot;_id&quot; : ObjectId(&quot;5b1886fd965c44c78540a4fe&quot;), </span><br><span class="line">    &quot;name&quot; : &quot;b&quot;, </span><br><span class="line">    &quot;age&quot; : 2.0, </span><br><span class="line">    &quot;id&quot; : &quot;4&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#123; </span><br><span class="line">    &quot;_id&quot; : ObjectId(&quot;5b1886ff965c44c78540a4ff&quot;), </span><br><span class="line">    &quot;name&quot; : &quot;c&quot;, </span><br><span class="line">    &quot;age&quot; : 10.0, </span><br><span class="line">    &quot;id&quot; : &quot;5&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照名称升序，然后按照age降序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">db.user.find(&#123;&#125;).sort(&#123;name: 1, age: -1&#125;)</span><br><span class="line"></span><br><span class="line">结果：  </span><br><span class="line">&#123; </span><br><span class="line">    &quot;_id&quot; : ObjectId(&quot;5b1886f8965c44c78540a4fc&quot;), </span><br><span class="line">    &quot;name&quot; : &quot;a&quot;, </span><br><span class="line">    &quot;age&quot; : 2.0, </span><br><span class="line">    &quot;id&quot; : &quot;2&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#123; </span><br><span class="line">    &quot;_id&quot; : ObjectId(&quot;5b1886ac965c44c78540a4fb&quot;), </span><br><span class="line">    &quot;name&quot; : &quot;a&quot;, </span><br><span class="line">    &quot;age&quot; : 1.0, </span><br><span class="line">    &quot;id&quot; : &quot;1&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#123; </span><br><span class="line">    &quot;_id&quot; : ObjectId(&quot;5b1886fd965c44c78540a4fe&quot;), </span><br><span class="line">    &quot;name&quot; : &quot;b&quot;, </span><br><span class="line">    &quot;age&quot; : 2.0, </span><br><span class="line">    &quot;id&quot; : &quot;4&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#123; </span><br><span class="line">    &quot;_id&quot; : ObjectId(&quot;5b1886fa965c44c78540a4fd&quot;), </span><br><span class="line">    &quot;name&quot; : &quot;b&quot;, </span><br><span class="line">    &quot;age&quot; : 1.0, </span><br><span class="line">    &quot;id&quot; : &quot;3&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#123; </span><br><span class="line">    &quot;_id&quot; : ObjectId(&quot;5b1886ff965c44c78540a4ff&quot;), </span><br><span class="line">    &quot;name&quot; : &quot;c&quot;, </span><br><span class="line">    &quot;age&quot; : 10.0, </span><br><span class="line">    &quot;id&quot; : &quot;5&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="用索引优化排序"><a href="#用索引优化排序" class="headerlink" title="用索引优化排序"></a>用索引优化排序</h3><p>到这里必须考虑下性能。</p><blockquote><p><strong>$sort and Memory Restrictions</strong><br>The $sort stage has a limit of 100 megabytes of RAM. By default, if the stage exceeds this limit, $sort will produce an error. To allow for the handling of large datasets, set the <code>allowDiskUse</code> option to true to enable $sort operations to write to temporary files. See the allowDiskUse option in db.collection.aggregate() method and the aggregate command for details.</p><p>Changed in version 2.6: The memory limit for $sort changed from 10 percent of RAM to 100 megabytes of RAM.</p></blockquote><p>从2.6开始，sort只排序100M以内的数据，超过将会报错。可以通过设置<code>allowDiskUse</code>来允许排序大容量数据。</p><p>有索引的排序会比没有索引的排序快，所以官方推荐为需要排序的key建立索引。</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>对于单key排序，建立单独索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.records.createIndex( &#123; a: 1 &#125; )</span><br></pre></td></tr></table></figure><p><strong>索引可以支持同排序和逆序的sort</strong></p><p>索引又分升序(1)和降序(-1)，索引定义的排序方向以及逆转方向可以支持sort。对于上述单key索引a，可以支持<code>sort(&#123;a:1&#125;)</code>升序和<code>sort(&#123;a:-1&#125;)</code>降序。</p><p>对于多字段排序</p><p>如果想要使用索引。则可以建立复合(compound index)索引为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.records.createIndex( &#123; a: 1, b:-1 &#125; )</span><br></pre></td></tr></table></figure><p><strong>复合索引的字段顺序必须和sort一致</strong>   </p><p>复合多字段索引的顺序要和sort的字段一致才可以走索引。比如索引<code>&#123;a:1, b:1&#125;</code>, 可以支持<code>sort(&#123;a:1, b:1&#125;)</code>和逆序<code>sort(&#123;a:-1, b:-1&#125;)</code>， 但是，不支持a，b颠倒。即，不支持<code>sort(&#123;b:1, a:1&#125;)</code>.</p><p><strong>复合索引支持sort同排序和逆序</strong>    </p><p>索引<code>&#123;a:1, b:-1&#125;</code> 可以支持<code>sort(&#123;a:1, b:-1&#125;)</code>, 也可以支持<code>sort(&#123;a:-1, b:1&#125;)</code>    </p><p><strong>复合索引可以前缀子集支持sort</strong></p><p>对于多字段复合索引，可以拆分成多个前缀子集。比如<code>&#123;a:1, b:1, c:1&#125;</code>相当于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; a: 1 &#125;</span><br><span class="line">&#123; a: 1, b: 1 &#125;</span><br><span class="line">&#123; a: 1, b: 1, c: 1 &#125;</span><br></pre></td></tr></table></figure><p>示例：  </p><table><thead><tr><th>Example</th><th>Index Prefix</th></tr></thead><tbody><tr><td>db.data.find().sort( { a: 1 } )</td><td>{ a: 1 }</td></tr><tr><td>db.data.find().sort( { a: -1 } )</td><td>{ a: 1 }</td></tr><tr><td>db.data.find().sort( { a: 1, b: 1 } )</td><td>{ a: 1, b: 1 }</td></tr><tr><td>db.data.find().sort( { a: -1, b: -1 } )</td><td>{ a: 1, b: 1 }</td></tr><tr><td>db.data.find().sort( { a: 1, b: 1, c: 1 } )</td><td>{ a: 1, b: 1, c: 1 }</td></tr><tr><td>db.data.find( { a: { $gt: 4 } } ).sort( { a: 1, b: 1 } )</td><td>{ a: 1, b: 1 }</td></tr></tbody></table><p><strong>复合索引的非前缀子集可以支持sort，前提是前缀子集的元素要在find的查询条件里是equals</strong>   </p><p>这个条件比较绕口，复合索引的非前缀子集，只要find和sort的字段要组成索引前缀，并且find里的条件必须是相等。  </p><p>示例</p><table><thead><tr><th>Example</th><th>Index Prefix</th></tr></thead><tbody><tr><td>db.data.find( { a: 5 } ).sort( { b: 1, c: 1 } )</td><td>{ a: 1 , b: 1, c: 1 }</td></tr><tr><td>db.data.find( { b: 3, a: 4 } ).sort( { c: 1 } )</td><td>{ a: 1, b: 1, c: 1 }</td></tr><tr><td>db.data.find( { a: 5, b: { $lt: 3} } ).sort( { b: 1 } )</td><td>{ a: 1, b: 1 }</td></tr></tbody></table><p>find和sort的字段加起来满足前缀子集，find条件中可以使用其他字段进行非equals比较。</p><p>对于既不是前缀子集，也不是find相等条件的。索引无效。比如，对于索引<code>&#123;a:1, b:1, c:1&#125;</code>。以下两种方式不走索引。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.data.find( &#123; a: &#123; $gt: 2 &#125; &#125; ).sort( &#123; c: 1 &#125; )</span><br><span class="line">db.data.find( &#123; c: 5 &#125; ).sort( &#123; c: 1 &#125; )</span><br></pre></td></tr></table></figure><h2 id="Java代码分页"><a href="#Java代码分页" class="headerlink" title="Java代码分页"></a>Java代码分页</h2><p>由于确实有跳页的需求，目前还没有发现性能问题，仍旧采用skip做分页，当然也兼容条件分页</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PageResult&lt;StatByClientRs&gt; <span class="title">findByDurationPage</span><span class="params">(FindByDurationPageRq rq)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Criteria criteriaDefinition = Criteria.where(<span class="string">&quot;duration&quot;</span>).is(rq.getDuration());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Query query = <span class="keyword">new</span> Query(</span><br><span class="line">        criteriaDefinition</span><br><span class="line">    ).with(<span class="keyword">new</span> Sort(Lists.newArrayList(<span class="keyword">new</span> Order(Direction.ASC, <span class="string">&quot;_id&quot;</span>))));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> total = mongoTemplate.count(query, StatByClient.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分页逻辑</span></span><br><span class="line">    Integer pageSize = rq.getPageSize();</span><br><span class="line">    Integer pageNum = rq.getPageNum();</span><br><span class="line">    String lastId = rq.getLastId();</span><br><span class="line">    <span class="keyword">final</span> Integer pages = (<span class="keyword">int</span>) Math.ceil(total / (<span class="keyword">double</span>) pageSize);</span><br><span class="line">    <span class="keyword">if</span> (pageNum&lt;=<span class="number">0</span> || pageNum&gt; pages) &#123;</span><br><span class="line">        pageNum = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;StatByClient&gt; statByClientList;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNotBlank(lastId)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pageNum != <span class="number">1</span>) &#123;</span><br><span class="line">            criteriaDefinition.and(<span class="string">&quot;_id&quot;</span>).gt(<span class="keyword">new</span> ObjectId(lastId));</span><br><span class="line">        &#125;</span><br><span class="line">        query.limit(pageSize);</span><br><span class="line"></span><br><span class="line">        statByClientList = mongoTemplate</span><br><span class="line">            .find(query,</span><br><span class="line">                StatByClient.class);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> skip = pageSize * (pageNum - <span class="number">1</span>);</span><br><span class="line">        query.skip(skip).limit(pageSize);</span><br><span class="line">        statByClientList = mongoTemplate.find(query, StatByClient.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PageResult&lt;StatByClientRs&gt; pageResult = <span class="keyword">new</span> PageResult&lt;&gt;();</span><br><span class="line">    pageResult.setTotal(total);</span><br><span class="line">    pageResult.setPages(pages);</span><br><span class="line">    pageResult.setPageSize(pageSize);</span><br><span class="line">    pageResult.setPageNum(pageNum);</span><br><span class="line">    pageResult.setList(mapper.mapToListRs(statByClientList));</span><br><span class="line">    <span class="keyword">return</span> pageResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个示例中，目标是根据duration查询list，结果集进行分页。当请求体中包含<code>lastId</code>，那就走下一页方案。如果想要跳页，就不传<code>lastId</code>，随便你跳吧。</p><h3 id="抽取分页代码为公共工具类"><a href="#抽取分页代码为公共工具类" class="headerlink" title="抽取分页代码为公共工具类"></a>抽取分页代码为公共工具类</h3><p>考虑分页需求的旺盛，每个集合都这样写感觉比较麻烦，而且容易出错。我们来把这个封装成单独一个PageHelper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</span><br><span class="line"><span class="keyword">import</span> com.shuwei.d2.message.PageResult;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.bson.types.ObjectId;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Sort;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Sort.Direction;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Sort.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.MongoTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.query.Criteria;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.query.Query;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MongoDB分页查询工具类.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ryan Miao at 2018-06-07 14:46</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoPageHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FIRST_PAGE_NUM = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ID = <span class="string">&quot;_id&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MongoPageHelper</span><span class="params">(MongoTemplate mongoTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mongoTemplate = mongoTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询，直接返回集合类型的结果.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> MongoPageHelper#pageQuery(org.springframework.data.mongodb.core.query.Query,</span></span><br><span class="line"><span class="comment">     * java.lang.Class, java.util.function.Function, java.lang.Integer, java.lang.Integer,</span></span><br><span class="line"><span class="comment">     * java.lang.String)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">PageResult&lt;T&gt; <span class="title">pageQuery</span><span class="params">(Query query, Class&lt;T&gt; entityClass, Integer pageSize,</span></span></span><br><span class="line"><span class="function"><span class="params">        Integer pageNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pageQuery(query, entityClass, Function.identity(), pageSize, pageNum, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询，不考虑条件分页，直接使用skip-limit来分页.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> MongoPageHelper#pageQuery(org.springframework.data.mongodb.core.query.Query,</span></span><br><span class="line"><span class="comment">     * java.lang.Class, java.util.function.Function, java.lang.Integer, java.lang.Integer,</span></span><br><span class="line"><span class="comment">     * java.lang.String)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T, R&gt; <span class="function">PageResult&lt;R&gt; <span class="title">pageQuery</span><span class="params">(Query query, Class&lt;T&gt; entityClass, Function&lt;T, R&gt; mapper,</span></span></span><br><span class="line"><span class="function"><span class="params">        Integer pageSize, Integer pageNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pageQuery(query, entityClass, mapper, pageSize, pageNum, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> query Mongo Query对象，构造你自己的查询条件.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityClass Mongo collection定义的entity class，用来确定查询哪个集合.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mapper 映射器，你从db查出来的list的元素类型是entityClass, 如果你想要转换成另一个对象，比如去掉敏感字段等，可以使用mapper来决定如何转换.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize 分页的大小.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageNum 当前页.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lastId 条件分页参数, 区别于skip-limit，采用find(_id&gt;lastId).limit分页.</span></span><br><span class="line"><span class="comment">     * 如果不跳页，像朋友圈，微博这样下拉刷新的分页需求，需要传递上一页的最后一条记录的ObjectId。 如果是null，则返回pageNum那一页.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; collection定义的class类型.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;R&gt; 最终返回时，展现给页面时的一条记录的类型。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> PageResult，一个封装page信息的对象.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T, R&gt; <span class="function">PageResult&lt;R&gt; <span class="title">pageQuery</span><span class="params">(Query query, Class&lt;T&gt; entityClass, Function&lt;T, R&gt; mapper,</span></span></span><br><span class="line"><span class="function"><span class="params">        Integer pageSize, Integer pageNum, String lastId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//分页逻辑</span></span><br><span class="line">        <span class="keyword">long</span> total = mongoTemplate.count(query, entityClass);</span><br><span class="line">        <span class="keyword">final</span> Integer pages = (<span class="keyword">int</span>) Math.ceil(total / (<span class="keyword">double</span>) pageSize);</span><br><span class="line">        <span class="keyword">if</span> (pageNum &lt;= <span class="number">0</span> || pageNum &gt; pages) &#123;</span><br><span class="line">            pageNum = FIRST_PAGE_NUM;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> Criteria criteria = <span class="keyword">new</span> Criteria();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(lastId)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pageNum != FIRST_PAGE_NUM) &#123;</span><br><span class="line">                criteria.and(ID).gt(<span class="keyword">new</span> ObjectId(lastId));</span><br><span class="line">            &#125;</span><br><span class="line">            query.limit(pageSize);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> skip = pageSize * (pageNum - <span class="number">1</span>);</span><br><span class="line">            query.skip(skip).limit(pageSize);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> List&lt;T&gt; entityList = mongoTemplate</span><br><span class="line">            .find(query.addCriteria(criteria)</span><br><span class="line">                    .with(<span class="keyword">new</span> Sort(Lists.newArrayList(<span class="keyword">new</span> Order(Direction.ASC, ID)))),</span><br><span class="line">                entityClass);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> PageResult&lt;R&gt; pageResult = <span class="keyword">new</span> PageResult&lt;&gt;();</span><br><span class="line">        pageResult.setTotal(total);</span><br><span class="line">        pageResult.setPages(pages);</span><br><span class="line">        pageResult.setPageSize(pageSize);</span><br><span class="line">        pageResult.setPageNum(pageNum);</span><br><span class="line">        pageResult.setList(entityList.stream().map(mapper).collect(Collectors.toList()));</span><br><span class="line">        <span class="keyword">return</span> pageResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对了，还有PageResult对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonInclude;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonInclude.Include;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页结果.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ryan</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@JsonInclude(Include.NON_NULL)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;页码，从1开始&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageNum;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;页面大小&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageSize;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;总数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long total;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;总页数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer pages;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;数据&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; list;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用工具类"><a href="#使用工具类" class="headerlink" title="使用工具类"></a>使用工具类</h3><p>最初的查询语句，业务逻辑和分页逻辑分开。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PageResult&lt;StatByClientRs&gt; <span class="title">findByDurationPage</span><span class="params">(FindByDurationPageRq rq)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Criteria criteriaDefinition = Criteria.where(<span class="string">&quot;duration&quot;</span>).is(rq.getDuration());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rq.getClientId() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        criteriaDefinition.and(<span class="string">&quot;clientId&quot;</span>).ne(AllFlag.ALL_CLIENT);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        criteriaDefinition.and(<span class="string">&quot;clientId&quot;</span>).is(rq.getClientId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> Query query = <span class="keyword">new</span> Query(criteriaDefinition)</span><br><span class="line">        .with(<span class="keyword">new</span> Sort(Lists.newArrayList(<span class="keyword">new</span> Order(Direction.ASC, <span class="string">&quot;_id&quot;</span>))));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mongoPageHelper.pageQuery(query, StatByClient.class, mapper::mapToRs, rq.getPageSize(),</span><br><span class="line">        rq.getPageNum(), rq.getLastId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="把工具类共享到maven仓库"><a href="#把工具类共享到maven仓库" class="headerlink" title="把工具类共享到maven仓库"></a>把工具类共享到maven仓库</h3><p>新建一个maven项目，<a href="https://github.com/Ryan-Miao/mongo-page-helper">https://github.com/Ryan-Miao/mongo-page-helper</a>  </p><p>修改并提取刚才的工具类。</p><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><p>必须结合spring-boot-starter-data-mongodb来使用.</p><p>在pom里添加repository</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>jitpack.io<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://jitpack.io<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.Ryan-Miao<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mongo-page-helper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置Configuration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoConfiguration</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MongoPageHelper <span class="title">mongoPageHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MongoPageHelper(mongoTemplate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以使用MongoPageHelper来注入了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://docs.mongodb.com/manual/reference/method/cursor.skip/">官方分页推荐</a></li><li><a href="https://docs.mongodb.com/manual/reference/operator/aggregation/sort/index.html">官方sort文档</a></li><li><a href="https://docs.mongodb.com/manual/tutorial/sort-results-with-indexes/">官方使用索引优化sort文档</a></li><li><a href="https://docs.mongodb.com/manual/core/index-compound/#index-type-compound">官方复合索引</a></li><li><a href="http://www.ovaistariq.net/404/mysql-paginated-displays-how-to-kill-performance-vs-how-to-improve-performance/#.WxiEK4huaUk">如何正确看待分页的需求</a></li><li><a href="http://ian.wang/35.htm">http://ian.wang/35.htm</a></li><li><a href="https://cnodejs.org/topic/559a0bf493cb46f578f0a601">https://cnodejs.org/topic/559a0bf493cb46f578f0a601</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS安装postgresql</title>
      <link href="2018/05/31/centos-install-postgresql/"/>
      <url>2018/05/31/centos-install-postgresql/</url>
      
        <content type="html"><![CDATA[<h2 id="下载yum源"><a href="#下载yum源" class="headerlink" title="下载yum源"></a>下载yum源</h2><p>地址： <a href="https://yum.postgresql.org/repopackages.php">https://yum.postgresql.org/repopackages.php</a></p><h2 id="安装yum源"><a href="#安装yum源" class="headerlink" title="安装yum源"></a>安装yum源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install pgdg-centos10-10-2.noarch.rpm</span><br></pre></td></tr></table></figure><h2 id="查看可安装包"><a href="#查看可安装包" class="headerlink" title="查看可安装包"></a>查看可安装包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list postgres*</span><br></pre></td></tr></table></figure><h2 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install postgresql10-server.x86_64 </span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>首先找到安装好的服务，并不是postgres，查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@d2-test-2 init.d]# ls &#x2F;etc&#x2F;init.d&#x2F; | grep post</span><br><span class="line">postfix</span><br><span class="line">postgresql-10</span><br><span class="line">udev-post</span><br></pre></td></tr></table></figure><h3 id="初始化db"><a href="#初始化db" class="headerlink" title="初始化db"></a>初始化db</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service postgresql-10 initdb</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service postgresql-10 start</span><br></pre></td></tr></table></figure><h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service postgresql status</span><br></pre></td></tr></table></figure><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service postgresql restart</span><br></pre></td></tr></table></figure><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>默认root并不能连接，需要切换为用户postgres</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo su - postgres   </span><br><span class="line">-bash-4.1$ psql   </span><br><span class="line">psql (8.4.20)   </span><br><span class="line">Type &quot;help&quot; for help.   </span><br><span class="line">postgres&#x3D;#    </span><br></pre></td></tr></table></figure><h2 id="几个简单命令"><a href="#几个简单命令" class="headerlink" title="几个简单命令"></a>几个简单命令</h2><p>(1)列出所有的数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql: <span class="keyword">show</span> <span class="keyword">databases</span></span><br><span class="line">psql: \l或\<span class="keyword">list</span></span><br></pre></td></tr></table></figure><p>(2)切换数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql: use dbname</span><br><span class="line">psql: \c dbname</span><br></pre></td></tr></table></figure><p>(3)列出当前数据库下的数据表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql: show tables</span><br><span class="line">psql: \d</span><br></pre></td></tr></table></figure><p>(4)列出指定表的所有字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql: show columns from table name</span><br><span class="line">psql: \d tablename</span><br></pre></td></tr></table></figure><p>(5)查看指定表的基本情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql: describe tablename</span><br><span class="line">psql: \d+ tablename</span><br></pre></td></tr></table></figure><p>(6)退出登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql: quit 或者\q</span><br><span class="line">psql:\q</span><br></pre></td></tr></table></figure><p>(7)查看pgsl版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pg_ctl --version</span><br></pre></td></tr></table></figure><p>(8)命令行登陆数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql -h 192.168.2.125 -p 5432 &lt;dbname&gt; &lt;username&gt;</span><br></pre></td></tr></table></figure><p>(9)修改密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">psql登陆</span><br><span class="line"></span><br><span class="line">然后， \password postgres</span><br></pre></td></tr></table></figure><h2 id="安装后的配置"><a href="#安装后的配置" class="headerlink" title="安装后的配置"></a>安装后的配置</h2><p>数据库默认安装为：<code>/var/lib/pgsql/10/data</code></p><h3 id="修改监听IP和端口"><a href="#修改监听IP和端口" class="headerlink" title="修改监听IP和端口"></a>修改监听IP和端口</h3><p>进入data目录之后，编辑<code>postgresql.conf</code></p><p>修改为*表示允许所有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#listen_addresses &#x3D; &#39;*&#39;                 # what IP address(es) to listen on;   </span><br><span class="line">                                        # comma-separated list of addresses;   </span><br><span class="line">                                        # defaults to &#39;localhost&#39;, &#39;*&#39; &#x3D; all   </span><br><span class="line">                                        # (change requires restart)   </span><br><span class="line">#port &#x3D; 5432                            # (change requires restart)  </span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service postgresql-10 restart</span><br></pre></td></tr></table></figure><h3 id="修改连接权限"><a href="#修改连接权限" class="headerlink" title="修改连接权限"></a>修改连接权限</h3><p>默认只有本地用户可以访问，所以除了修改ip还要修改权限。</p><p>修改<code>pg_hba.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># TYPE DATABASE  USER    CIDR-ADDRESS     METHOD</span><br><span class="line"># &quot;local&quot; is for Unix domain socket connections only</span><br><span class="line">local all    all               trust</span><br><span class="line"># IPv4 local connections:</span><br><span class="line">host  all    all    127.0.0.1&#x2F;32     trust</span><br><span class="line">host  all    all    192.168.1.0&#x2F;24    md5</span><br><span class="line"># IPv6 local connections:</span><br><span class="line">host  all    all    ::1&#x2F;128       trust</span><br></pre></td></tr></table></figure><p>重点是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host  all    all    192.168.1.0&#x2F;24    md5</span><br></pre></td></tr></table></figure><p>表示允许网段192.168.1.0上的所有主机使用所有合法的数据库用户名访问数据库，并提供加密的密码验证。</p><p>其中，24是子网掩码，表示允许192.168.1.0–192.168.1.255的主机访问。</p><p>重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service postgresql-10 restart</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/p106786860/article/details/49877483">https://blog.csdn.net/p106786860/article/details/49877483</a></li><li><a href="https://blog.csdn.net/ll136078/article/details/12747403">https://blog.csdn.net/ll136078/article/details/12747403</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PostgreSQL </category>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> PostgreSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LocalDate序列化为JSON，Springboot中使用</title>
      <link href="2018/05/29/serialize-LocalDate-with-Springboot/"/>
      <url>2018/05/29/serialize-LocalDate-with-Springboot/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java8的date API一经推出便广受好评，今日也准备用一用，然后就用出问题了。基本用法见<a href="https://www.cnblogs.com/woshimrf/p/java8-date-api.html">https://www.cnblogs.com/woshimrf/p/java8-date-api.html</a> </p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>LocalDate可以很友好的toString为<code>YYYY-MM-dd</code>的格式，很适合我当前的业务，但当我把它丢到json的时候，瞬间解体了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;year&quot;: 2018,</span><br><span class="line">  &quot;month&quot;: &quot;AUGUST&quot;,</span><br><span class="line">  &quot;era&quot;: &quot;CE&quot;,</span><br><span class="line">  &quot;dayOfMonth&quot;: 1,</span><br><span class="line">  &quot;dayOfWeek&quot;: &quot;TUESDAY&quot;,</span><br><span class="line">  &quot;dayOfYear&quot;: 213,</span><br><span class="line">  &quot;leapYear&quot;: false,</span><br><span class="line">  &quot;monthValue&quot;: 8,</span><br><span class="line">  &quot;chronology&quot;: &#123;</span><br><span class="line">      &quot;id&quot;:&quot;ISO&quot;,</span><br><span class="line">      &quot;calendarType&quot;:&quot;iso8601&quot;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>可我想要的是yyyy-MM-dd啊。加上jackson format试一试，也不行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@JsonFormat(shape &#x3D; JsonFormat.Shape.STRING,</span><br><span class="line">        pattern &#x3D; &quot;yyyy-MM-dd&quot;, timezone &#x3D; &quot;Asia&#x2F;Shanghai&quot;)</span><br></pre></td></tr></table></figure><p>难道要手动实现JsonSerializer? google之，果然有人解决了。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.fasterxml.jackson.datatype&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;jackson-datatype-jsr310&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.8.6&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testJsonFormat() throws JsonProcessingException &#123;</span><br><span class="line">    ObjectMapper mapper &#x3D; new ObjectMapper();</span><br><span class="line">    mapper.registerModule(new JavaTimeModule());</span><br><span class="line">    mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);</span><br><span class="line"></span><br><span class="line">    LocalDate date &#x3D; LocalDate.of(2018, 5, 5);</span><br><span class="line">    String dateStr &#x3D; mapper.writeValueAsString(date);</span><br><span class="line">    Assert.assertEquals(&quot;\&quot;2018-05-05\&quot;&quot;, dateStr);</span><br><span class="line"></span><br><span class="line">    LocalDateTime dateTime &#x3D; LocalDateTime.of(2018, 5, 5, 1, 1, 1);</span><br><span class="line">    Assert.assertEquals(&quot;\&quot;2018-05-05T01:01:01\&quot;&quot;, mapper.writeValueAsString(dateTime));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而，在Springboot中，默认提供了ObjectMapper，我又不想自定义。</p><h2 id="Springboot中使用"><a href="#Springboot中使用" class="headerlink" title="Springboot中使用"></a>Springboot中使用</h2><p>同样把上述jar加入依赖。然后修改配置文件，新增</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  jackson:</span><br><span class="line">    serialization:</span><br><span class="line">      WRITE_DATES_AS_TIMESTAMPS: false</span><br></pre></td></tr></table></figure><p>这样可以直接使用LocalDate，不用单独JsonFormat就可以实现自己的功能了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>原文连接：<a href="https://reflectoring.io/configuring-localdate-serialization-spring-boot/">https://reflectoring.io/configuring-localdate-serialization-spring-boot/</a>   作者： Tom Hombergs</p>]]></content>
      
      
      <categories>
          
          <category> Java8 </category>
          
          <category> Springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8 </tag>
            
            <tag> JSON </tag>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8新的日期API</title>
      <link href="2018/05/29/java8-date-api/"/>
      <url>2018/05/29/java8-date-api/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于Java Date的各种问题，Java8推出了新的日期API，很受一拨人的追捧。</p><h2 id="为什么我们需要新的Java日期-时间API？"><a href="#为什么我们需要新的Java日期-时间API？" class="headerlink" title="为什么我们需要新的Java日期/时间API？"></a>为什么我们需要新的Java日期/时间API？</h2><p>在开始研究Java 8日期/时间API之前，让我们先来看一下为什么我们需要这样一个新的API。在Java中，现有的与日期和时间相关的类存在诸多问题，其中有：</p><ul><li>Java的日期/时间类的定义并不一致，在java.util和java.sql的包中都有日期类，此外用于格式化和解析的类在java.text包中定义。</li><li>java.util.Date同时包含日期和时间，而java.sql.Date仅包含日期，将其纳入java.sql包并不合理。另外这两个类都有相同的名字，这本身就是一个非常糟糕的设计。<br>对于时间、时间戳、格式化以及解析，并没有一些明确定义的类。对于格式化和解析的需求，我们有java.text.DateFormat抽象类，但通常情况下，SimpleDateFormat类被用于此类需求。</li><li>所有的日期类都是可变的，因此他们都不是线程安全的，这是Java日期类最大的问题之一。</li><li>日期类并不提供国际化，没有时区支持，因此Java引入了java.util.Calendar和java.util.TimeZone类，但他们同样存在上述所有的问题。</li></ul><p>在现有的日期和日历类中定义的方法还存在一些其他的问题，但以上问题已经很清晰地表明：Java需要一个健壮的日期/时间类。这也是为什么Joda Time在Java日期/时间需求中扮演了高质量替换的重要角色。</p><a id="more"></a><h2 id="Java-8日期-时间API"><a href="#Java-8日期-时间API" class="headerlink" title="Java 8日期/时间API"></a>Java 8日期/时间API</h2><p>Java 8日期/时间API是JSR-310的实现，它的实现目标是克服旧的日期时间实现中所有的缺陷，新的日期/时间API的一些设计原则是：<br>不变性：新的日期/时间API中，所有的类都是不可变的，这对多线程环境有好处。<br>关注点分离：新的API将人可读的日期时间和机器时间（unix timestamp）明确分离，它为日期（Date）、时间（Time）、日期时间（DateTime）、时间戳（unix timestamp）以及时区定义了不同的类。<br>清晰：在所有的类中，方法都被明确定义用以完成相同的行为。举个例子，要拿到当前实例我们可以使用now()方法，在所有的类中都定义了format()和parse()方法，而不是像以前那样专门有一个独立的类。为了更好的处理问题，所有的类都使用了工厂模式和策略模式，一旦你使用了其中某个类的方法，与其他类协同工作并不困难。<br>实用操作：所有新的日期/时间API类都实现了一系列方法用以完成通用的任务，如：加、减、格式化、解析、从日期/时间中提取单独部分，等等。<br>可扩展性：新的日期/时间API是工作在ISO-8601日历系统上的，但我们也可以将其应用在非IOS的日历上。</p><h2 id="Java日期-时间API包"><a href="#Java日期-时间API包" class="headerlink" title="Java日期/时间API包"></a>Java日期/时间API包</h2><p>Java日期/时间API包含以下相应的包。</p><ol><li><code>java.time</code>包：这是新的Java日期/时间API的基础包，所有的主要基础类都是这个包的一部分，如：LocalDate, LocalTime, LocalDateTime, Instant, Period, Duration等等。所有这些类都是不可变的和线程安全的，在绝大多数情况下，这些类能够有效地处理一些公共的需求。</li><li><code>java.time.chrono</code>包：这个包为非ISO的日历系统定义了一些泛化的API，我们可以扩展AbstractChronology类来创建自己的日历系统。<br>java.time.format包：这个包包含能够格式化和解析日期时间对象的类，在绝大多数情况下，我们不应该直接使用它们，因为java.time包中相应的类已经提供了格式化和解析的方法。</li><li><code>java.time.temporal</code>包：这个包包含一些时态对象，我们可以用其找出关于日期/时间对象的某个特定日期或时间，比如说，可以找到某月的第一天或最后一天。你可以非常容易地认出这些方法，因为它们都具有“withXXX”的格式。</li><li><code>java.time.zone</code>包：这个包包含支持不同时区以及相关规则的类。</li></ol><h2 id="Java日期-时间API示例"><a href="#Java日期-时间API示例" class="headerlink" title="Java日期/时间API示例"></a>Java日期/时间API示例</h2><p>我们已经浏览了Java日期/时间API的大多数重要部分，现在是时候根据示例仔细看一下最重要的一些类了。</p><ol><li>java.time.LocalDate：LocalDate是一个不可变的类，它表示默认格式(yyyy-MM-dd)的日期，我们可以使用now()方法得到当前时间，也可以提供输入年份、月份和日期的输入参数来创建一个LocalDate实例。该类为now()方法提供了重载方法，我们可以传入ZoneId来获得指定时区的日期。该类提供与java.sql.Date相同的功能，对于如何使用该类，我们来看一个简单的例子。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLocalDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Current Date</span></span><br><span class="line">    LocalDate today = LocalDate.now();</span><br><span class="line">    System.out.println(<span class="string">&quot;Current Date=&quot;</span> + today);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Creating LocalDate by providing input arguments</span></span><br><span class="line">    LocalDate firstDay_2014 = LocalDate.of(<span class="number">2014</span>, Month.JANUARY, <span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;Specific Date=&quot;</span> + firstDay_2014);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Try creating date by providing invalid inputs</span></span><br><span class="line">    <span class="comment">//LocalDate feb29_2014 = LocalDate.of(2014, Month.FEBRUARY, 29);</span></span><br><span class="line">    <span class="comment">//Exception in thread &quot;main&quot; java.time.DateTimeException:</span></span><br><span class="line">    <span class="comment">//Invalid date &#x27;February 29&#x27; as &#x27;2014&#x27; is not a leap year</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Current date in &quot;Asia/Kolkata&quot;, you can get it from ZoneId javadoc</span></span><br><span class="line">    LocalDate todayKolkata = LocalDate.now(ZoneId.of(<span class="string">&quot;Asia/Kolkata&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;Current Date in IST=&quot;</span> + todayKolkata);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//java.time.zone.ZoneRulesException: Unknown time-zone ID: IST</span></span><br><span class="line">    <span class="comment">//LocalDate todayIST = LocalDate.now(ZoneId.of(&quot;IST&quot;));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Getting date from the base date i.e 01/01/1970</span></span><br><span class="line">    LocalDate dateFromBase = LocalDate.ofEpochDay(<span class="number">365</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;365th day from base date= &quot;</span> + dateFromBase);</span><br><span class="line"></span><br><span class="line">    LocalDate hundredDay2014 = LocalDate.ofYearDay(<span class="number">2014</span>, <span class="number">100</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;100th day of 2014=&quot;</span> + hundredDay2014);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Current Date&#x3D;2018-05-29</span><br><span class="line">Specific Date&#x3D;2014-01-01</span><br><span class="line">Current Date in IST&#x3D;2018-05-29</span><br><span class="line">365th day from base date&#x3D; 1971-01-01</span><br><span class="line">100th day of 2014&#x3D;2014-04-10</span><br></pre></td></tr></table></figure><ol start="2"><li>java.time.LocalTime：LocalTime是一个不可变的类，它的实例代表一个符合人类可读格式的时间，默认格式是hh:mm:ss.zzz。像LocalDate一样，该类也提供了时区支持，同时也可以传入小时、分钟和秒等输入参数创建实例，我们来看一个简单的程序，演示该类的使用方法。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLocalTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Current Time</span></span><br><span class="line">    LocalTime time = LocalTime.now();</span><br><span class="line">    System.out.println(<span class="string">&quot;Current Time=&quot;</span> + time);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Creating LocalTime by providing input arguments</span></span><br><span class="line">    LocalTime specificTime = LocalTime.of(<span class="number">12</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">40</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;Specific Time of Day=&quot;</span> + specificTime);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Try creating time by providing invalid inputs</span></span><br><span class="line">    <span class="comment">//LocalTime invalidTime = LocalTime.of(25,20);</span></span><br><span class="line">    <span class="comment">//Exception in thread &quot;main&quot; java.time.DateTimeException:</span></span><br><span class="line">    <span class="comment">//Invalid value for HourOfDay (valid values 0 - 23): 25</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Current date in &quot;Asia/Kolkata&quot;, you can get it from ZoneId javadoc</span></span><br><span class="line">    LocalTime timeKolkata = LocalTime.now(ZoneId.of(<span class="string">&quot;Asia/Kolkata&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;Current Time in IST=&quot;</span> + timeKolkata);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//java.time.zone.ZoneRulesException: Unknown time-zone ID: IST</span></span><br><span class="line">    <span class="comment">//LocalTime todayIST = LocalTime.now(ZoneId.of(&quot;IST&quot;));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Getting date from the base date i.e 01/01/1970</span></span><br><span class="line">    LocalTime specificSecondTime = LocalTime.ofSecondOfDay(<span class="number">10000</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;10000th second time= &quot;</span> + specificSecondTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Current Time&#x3D;19:09:39.656</span><br><span class="line">Specific Time of Day&#x3D;12:20:25.000000040</span><br><span class="line">Current Time in IST&#x3D;16:39:39.657</span><br><span class="line">10000th second time&#x3D; 02:46:40</span><br></pre></td></tr></table></figure><ol start="3"><li>java.time.LocalDateTime：LocalDateTime是一个不可变的日期-时间对象，它表示一组日期-时间，默认格式是yyyy-MM-dd-HH-mm-ss.zzz。它提供了一个工厂方法，接收LocalDate和LocalTime输入参数，创建LocalDateTime实例。我们来看一个简单的例子。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLocalDateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Current Date</span></span><br><span class="line">    LocalDateTime today = LocalDateTime.now();</span><br><span class="line">    System.out.println(<span class="string">&quot;Current DateTime=&quot;</span> + today);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Current Date using LocalDate and LocalTime</span></span><br><span class="line">    today = LocalDateTime.of(LocalDate.now(), LocalTime.now());</span><br><span class="line">    System.out.println(<span class="string">&quot;Current DateTime=&quot;</span> + today);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Creating LocalDateTime by providing input arguments</span></span><br><span class="line">    LocalDateTime specificDate = LocalDateTime.of(<span class="number">2014</span>, Month.JANUARY, <span class="number">1</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">30</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;Specific Date=&quot;</span> + specificDate);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Try creating date by providing invalid inputs</span></span><br><span class="line">    <span class="comment">//LocalDateTime feb29_2014 = LocalDateTime.of(2014, Month.FEBRUARY, 28, 25,1,1);</span></span><br><span class="line">    <span class="comment">//Exception in thread &quot;main&quot; java.time.DateTimeException:</span></span><br><span class="line">    <span class="comment">//Invalid value for HourOfDay (valid values 0 - 23): 25</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Current date in &quot;Asia/Kolkata&quot;, you can get it from ZoneId javadoc</span></span><br><span class="line">    LocalDateTime todayKolkata = LocalDateTime.now(ZoneId.of(<span class="string">&quot;Asia/Kolkata&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;Current Date in IST=&quot;</span> + todayKolkata);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//java.time.zone.ZoneRulesException: Unknown time-zone ID: IST</span></span><br><span class="line">    <span class="comment">//LocalDateTime todayIST = LocalDateTime.now(ZoneId.of(&quot;IST&quot;));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Getting date from the base date i.e 01/01/1970</span></span><br><span class="line">    LocalDateTime dateFromBase = LocalDateTime.ofEpochSecond(<span class="number">10000</span>, <span class="number">0</span>, ZoneOffset.UTC);</span><br><span class="line">    System.out.println(<span class="string">&quot;10000th second time from 01/01/1970= &quot;</span> + dateFromBase);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在所有这三个例子中，我们已经看到如果我们提供了无效的参数去创建日期/时间，那么系统会抛出java.time.DateTimeException，这是一种运行时异常，我们并不需要显式地捕获它。<br>同时我们也看到，能够通过传入ZoneId得到日期/时间数据，你可以从它的Javadoc中得到支持的Zoneid的列表，当运行以上类时，可以得到以下输出</p><p>打印</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Current DateTime&#x3D;2018-05-29T19:10:00.353</span><br><span class="line">Current DateTime&#x3D;2018-05-29T19:10:00.353</span><br><span class="line">Specific Date&#x3D;2014-01-01T10:10:30</span><br><span class="line">Current Date in IST&#x3D;2018-05-29T16:40:00.353</span><br><span class="line">10000th second time from 01&#x2F;01&#x2F;1970&#x3D; 1970-01-01T02:46:40</span><br></pre></td></tr></table></figure><ol start="4"><li>java.time.Instant：Instant类是用在机器可读的时间格式上的，它以Unix时间戳的形式存储日期时间，我们来看一个简单的程序</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTimestampForInstant</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Current timestamp</span></span><br><span class="line">    Instant timestamp = Instant.now();</span><br><span class="line">    System.out.println(<span class="string">&quot;Current Timestamp = &quot;</span> + timestamp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Instant from timestamp</span></span><br><span class="line">    Instant specificTime = Instant.ofEpochMilli(timestamp.toEpochMilli());</span><br><span class="line">    System.out.println(<span class="string">&quot;Specific Time = &quot;</span> + specificTime);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Duration example</span></span><br><span class="line">    Duration thirtyDay = Duration.ofDays(<span class="number">30</span>);</span><br><span class="line">    System.out.println(thirtyDay);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li>日期API工具：我们早些时候提到过，大多数日期/时间API类都实现了一系列工具方法，如：加/减天数、周数、月份数，等等。还有其他的工具方法能够使用TemporalAdjuster调整日期，并计算两个日期间的周期。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDateTool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LocalDate today = LocalDate.now();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Get the Year, check if it&#x27;s leap year</span></span><br><span class="line">    System.out.println(<span class="string">&quot;Year &quot;</span> + today.getYear() + <span class="string">&quot; is Leap Year? &quot;</span> + today.isLeapYear());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Compare two LocalDate for before and after</span></span><br><span class="line">    System.out</span><br><span class="line">        .println(<span class="string">&quot;Today is before 01/01/2015? &quot;</span> + today.isBefore(LocalDate.of(<span class="number">2015</span>, <span class="number">1</span>, <span class="number">1</span>)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Create LocalDateTime from LocalDate</span></span><br><span class="line">    System.out.println(<span class="string">&quot;Current Time=&quot;</span> + today.atTime(LocalTime.now()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//plus and minus operations</span></span><br><span class="line">    System.out.println(<span class="string">&quot;10 days after today will be &quot;</span> + today.plusDays(<span class="number">10</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;3 weeks after today will be &quot;</span> + today.plusWeeks(<span class="number">3</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;20 months after today will be &quot;</span> + today.plusMonths(<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;10 days before today will be &quot;</span> + today.minusDays(<span class="number">10</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;3 weeks before today will be &quot;</span> + today.minusWeeks(<span class="number">3</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;20 months before today will be &quot;</span> + today.minusMonths(<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Temporal adjusters for adjusting the dates</span></span><br><span class="line">    System.out.println(</span><br><span class="line">        <span class="string">&quot;First date of this month= &quot;</span> + today.with(TemporalAdjusters.firstDayOfMonth()));</span><br><span class="line">    LocalDate lastDayOfYear = today.with(TemporalAdjusters.lastDayOfYear());</span><br><span class="line">    System.out.println(<span class="string">&quot;Last date of this year= &quot;</span> + lastDayOfYear);</span><br><span class="line"></span><br><span class="line">    Period period = today.until(lastDayOfYear);</span><br><span class="line">    System.out.println(<span class="string">&quot;Period Format= &quot;</span> + period);</span><br><span class="line">    System.out.println(<span class="string">&quot;Months remaining in the year= &quot;</span> + period.getMonths());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>解析和格式化：将一个日期格式转换为不同的格式，之后再解析一个字符串，得到日期时间对象，这些都是很常见的。我们来看一下简单的例子。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFormat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Format examples</span></span><br><span class="line">    LocalDate date = LocalDate.now();</span><br><span class="line">    <span class="comment">//default format</span></span><br><span class="line">    System.out.println(<span class="string">&quot;Default format of LocalDate=&quot;</span> + date);</span><br><span class="line">    <span class="comment">//specific format</span></span><br><span class="line">    System.out.println(date.format(DateTimeFormatter.ofPattern(<span class="string">&quot;d::MMM::uuuu&quot;</span>)));</span><br><span class="line">    System.out.println(date.format(DateTimeFormatter.BASIC_ISO_DATE));</span><br><span class="line"></span><br><span class="line">    LocalDateTime dateTime = LocalDateTime.now();</span><br><span class="line">    <span class="comment">//default format</span></span><br><span class="line">    System.out.println(<span class="string">&quot;Default format of LocalDateTime=&quot;</span> + dateTime);</span><br><span class="line">    <span class="comment">//specific format</span></span><br><span class="line">    System.out.println(dateTime.format(DateTimeFormatter.ofPattern(<span class="string">&quot;d::MMM::uuuu HH::mm::ss&quot;</span>)));</span><br><span class="line">    System.out.println(dateTime.format(DateTimeFormatter.BASIC_ISO_DATE));</span><br><span class="line"></span><br><span class="line">    Instant timestamp = Instant.now();</span><br><span class="line">    <span class="comment">//default format</span></span><br><span class="line">    System.out.println(<span class="string">&quot;Default format of Instant=&quot;</span> + timestamp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Parse examples</span></span><br><span class="line">    LocalDateTime dt = LocalDateTime.parse(<span class="string">&quot;27::五月::2014 21::39::48&quot;</span>,</span><br><span class="line">        DateTimeFormatter.ofPattern(<span class="string">&quot;d::MMM::uuuu HH::mm::ss&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;Default format after parsing = &quot;</span> + dt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>原文链接： journaldev 翻译： ImportNew.com - Justin Wu<br>译文链接： <a href="http://www.importnew.com/14140.html">http://www.importnew.com/14140.html</a>    </p>]]></content>
      
      
      <categories>
          
          <category> Java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot集成mongodb</title>
      <link href="2018/05/29/springboot-with-mongodb/"/>
      <url>2018/05/29/springboot-with-mongodb/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MongoDB（来自于英文单词“Humongous”，中文含义为“庞大”）是可以应用于各种规模的企业、各个行业以及各类应用程序的开源数据库。作为一个适用于敏捷开发的数据库，MongoDB的数据模式可以随着应用程序的发展而灵活地更新。与此同时，它也为开发人员 提供了传统数据库的功能：二级索引，完整的查询系统以及严格一致性等等。 MongoDB能够使企业更加具有敏捷性和可扩展性，各种规模的企业都可以通过使用MongoDB来创建新的应用，提高与客户之间的工作效率，加快产品上市时间，以及降低企业成本。</p><a id="more"></a><h2 id="安装mongoDB"><a href="#安装mongoDB" class="headerlink" title="安装mongoDB"></a>安装mongoDB</h2><p><a href="https://www.cnblogs.com/woshimrf/p/linux-install-mongodb.html">https://www.cnblogs.com/woshimrf/p/linux-install-mongodb.html</a></p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p><a href="https://github.com/Ryan-Miao/springboot-with-mongodb">https://github.com/Ryan-Miao/springboot-with-mongodb</a></p><p>pom</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">  xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;com.test&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;springboot-with-mongodb&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;springboot-with-mongodb&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.2.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">  &lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;</span><br><span class="line">    &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">  &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;springfox-swagger2&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.7.0&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;springfox-swagger-ui&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.7.0&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-devtools&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;&#x2F;plugin&gt;</span><br><span class="line">    &lt;&#x2F;plugins&gt;</span><br><span class="line">  &lt;&#x2F;build&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.data.mongodb.uri&#x3D;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;demo</span><br></pre></td></tr></table></figure><h2 id="创建一个表-集合"><a href="#创建一个表-集合" class="headerlink" title="创建一个表/集合"></a>创建一个表/集合</h2><p>一个消费者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">public class Customer &#123;</span><br><span class="line"></span><br><span class="line">    @Id</span><br><span class="line">    public String id;</span><br><span class="line"></span><br><span class="line">    public String firstName;</span><br><span class="line">    public String lastName;</span><br><span class="line">    private List&lt;Hobby&gt; hobbies;</span><br><span class="line"></span><br><span class="line">    public Customer() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Customer(String firstName, String lastName, List&lt;Hobby&gt; hobbies) &#123;</span><br><span class="line">        this.firstName &#x3D; firstName;</span><br><span class="line">        this.lastName &#x3D; lastName;</span><br><span class="line">        this.hobbies &#x3D; hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>import org.springframework.data.annotation.Id;</code> 是mongodb里的主键</li></ul><h2 id="创建Repository"><a href="#创建Repository" class="headerlink" title="创建Repository"></a>创建Repository</h2><p>JPA的一个特性就是简化了CRUD, 通过解析方法名实现数据的传输</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import com.test.springbootwithmongodb.entity.Customer;</span><br><span class="line">import java.util.List;</span><br><span class="line">import org.springframework.data.mongodb.repository.MongoRepository;</span><br><span class="line"></span><br><span class="line">public interface CustomerRepository extends MongoRepository&lt;Customer, String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    Customer findByFirstName(String firstName);</span><br><span class="line"></span><br><span class="line">    List&lt;Customer&gt; findByLastName(String lastName);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法名<code>findBy字段名</code>即可实现查询。</p><h2 id="启动并测试"><a href="#启动并测试" class="headerlink" title="启动并测试"></a>启动并测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootWithMongodbApplication</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CustomerRepository repository;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BookRepository bookRepository;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AuthorRepository authorRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpringbootWithMongodbApplication</span><span class="params">(CustomerRepository repository,</span></span></span><br><span class="line"><span class="function"><span class="params">        BookRepository bookRepository,</span></span></span><br><span class="line"><span class="function"><span class="params">        AuthorRepository authorRepository)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.repository = repository;</span><br><span class="line">        <span class="keyword">this</span>.bookRepository = bookRepository;</span><br><span class="line">        <span class="keyword">this</span>.authorRepository = authorRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootWithMongodbApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        repository.deleteAll();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// save a couple of customers</span></span><br><span class="line">        repository.save(<span class="keyword">new</span> Customer(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Smith&quot;</span>, Lists.newArrayList(<span class="keyword">new</span> Hobby(<span class="string">&quot;读书&quot;</span>, <span class="number">1</span>), <span class="keyword">new</span> Hobby(<span class="string">&quot;看电影&quot;</span>, <span class="number">2</span>))));</span><br><span class="line">        repository.save(<span class="keyword">new</span> Customer(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Smith&quot;</span>, Lists.newArrayList()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// fetch all customers</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Customers found with findAll():&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Customer customer : repository.findAll()) &#123;</span><br><span class="line">            System.out.println(customer);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// fetch an individual customer</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Customer found with findByFirstName(&#x27;Alice&#x27;):&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(repository.findByFirstName(<span class="string">&quot;Alice&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Customers found with findByLastName(&#x27;Smith&#x27;):&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Customer customer : repository.findByLastName(<span class="string">&quot;Smith&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(customer);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，hello world完成。基本实现了mongoDB持久层的工作，只要继续深入开发即可。</p><h2 id="关联表"><a href="#关联表" class="headerlink" title="关联表"></a>关联表</h2><p>创建一个书籍的集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.annotation.Id;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.mapping.Document;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.mapping.Field;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Document(collection = &quot;books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="meta">@Field(&quot;published&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDate publicationDate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// No args Constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String title, LocalDate publicationDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">this</span>.publicationDate = publicationDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@Field</code>指定数据库映射的字段</li><li><code>@Transient</code>标注的字段则不会映射到db</li><li><code>@Document(collection = &quot;books&quot;)</code>可以指定集合名称，如果不指定则是类名首字母小写</li></ul><p>创建一个作者，作者拥有书籍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> ObjectId id;</span><br><span class="line">    <span class="meta">@Indexed(unique = true)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@DBRef</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Book&gt; books;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// No args Constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Author</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@DBRef</code>会引用books的表</li><li><code>@Indexed(unique = true)</code>设置索引，并且是唯一性索引</li></ul><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><p>暂时不自定义查询了，利用内置的查询即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AuthorRepository</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">Author</span>, <span class="title">ObjectId</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookRepository</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">Book</span>, <span class="title">ObjectId</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">bookRepository.deleteAll();</span><br><span class="line">authorRepository.deleteAll();</span><br><span class="line">Book ci = <span class="keyword">new</span> Book(<span class="string">&quot;Continous Integration&quot;</span>, LocalDate.now());</span><br><span class="line"><span class="comment">// id will be generated after save</span></span><br><span class="line">bookRepository.save(ci);</span><br><span class="line">Book c2 = <span class="keyword">new</span> Book(<span class="string">&quot;Java编程思想&quot;</span>, LocalDate.now());</span><br><span class="line">Book c3 = <span class="keyword">new</span> Book(<span class="string">&quot;Java核心技术&quot;</span>, LocalDate.now());</span><br><span class="line">Book c4 = <span class="keyword">new</span> Book(<span class="string">&quot;Effective Java&quot;</span>, LocalDate.now());</span><br><span class="line">Book c5 = <span class="keyword">new</span> Book(<span class="string">&quot;深入理解虚拟机&quot;</span>, LocalDate.now());</span><br><span class="line">Book c6 = <span class="keyword">new</span> Book(<span class="string">&quot;深入理解虚拟机&quot;</span>, LocalDate.now());</span><br><span class="line">bookRepository.save(c2);</span><br><span class="line">bookRepository.save(c3);</span><br><span class="line">bookRepository.save(c4);</span><br><span class="line">bookRepository.save(c5);</span><br><span class="line">bookRepository.save(c6);</span><br><span class="line"></span><br><span class="line">List&lt;Book&gt; books = bookRepository.findAll();</span><br><span class="line">System.out.println(books);</span><br><span class="line"></span><br><span class="line">Author julius = <span class="keyword">new</span> Author(<span class="string">&quot;Julius&quot;</span>);</span><br><span class="line">julius.setBooks(Stream.of(ci, c2, c3, c4, c5, c6).collect(Collectors.toSet()));</span><br><span class="line">authorRepository.save(julius);</span><br><span class="line">System.out.println(authorRepository.findAll());</span><br></pre></td></tr></table></figure><p>启动可以看到控制台输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Book(id&#x3D;5b0bec767a49d017f0e46c63, title&#x3D;Continous Integration, publicationDate&#x3D;2018-05-28), Book(id&#x3D;5b0bec767a49d017f0e46c64, title&#x3D;Java编程思想, publicationDate&#x3D;2018-05-28), Book(id&#x3D;5b0bec767a49d017f0e46c65, title&#x3D;Java核心技术, publicationDate&#x3D;2018-05-28), Book(id&#x3D;5b0bec767a49d017f0e46c66, title&#x3D;Effective Java, publicationDate&#x3D;2018-05-28), Book(id&#x3D;5b0bec767a49d017f0e46c67, title&#x3D;深入理解虚拟机, publicationDate&#x3D;2018-05-28), Book(id&#x3D;5b0bec767a49d017f0e46c68, title&#x3D;深入理解虚拟机, publicationDate&#x3D;2018-05-28)]</span><br><span class="line">[Author(id&#x3D;5b0bec767a49d017f0e46c69, name&#x3D;Julius, books&#x3D;[Book(id&#x3D;5b0bec767a49d017f0e46c64, title&#x3D;Java编程思想, publicationDate&#x3D;2018-05-28), Book(id&#x3D;5b0bec767a49d017f0e46c68, title&#x3D;深入理解虚拟机, publicationDate&#x3D;2018-05-28), Book(id&#x3D;5b0bec767a49d017f0e46c67, title&#x3D;深入理解虚拟机, publicationDate&#x3D;2018-05-28), Book(id&#x3D;5b0bec767a49d017f0e46c63, title&#x3D;Continous Integration, publicationDate&#x3D;2018-05-28), Book(id&#x3D;5b0bec767a49d017f0e46c65, title&#x3D;Java核心技术, publicationDate&#x3D;2018-05-28), Book(id&#x3D;5b0bec767a49d017f0e46c66, title&#x3D;Effective Java, publicationDate&#x3D;2018-05-28)])]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>连接db，查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">db.author.find(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">&#123; </span><br><span class="line">    &quot;_id&quot; : ObjectId(&quot;5b0bec767a49d017f0e46c69&quot;), </span><br><span class="line">    &quot;name&quot; : &quot;Julius&quot;, </span><br><span class="line">    &quot;books&quot; : [</span><br><span class="line">        DBRef(&quot;books&quot;, ObjectId(&quot;5b0bec767a49d017f0e46c64&quot;)), </span><br><span class="line">        DBRef(&quot;books&quot;, ObjectId(&quot;5b0bec767a49d017f0e46c68&quot;)), </span><br><span class="line">        DBRef(&quot;books&quot;, ObjectId(&quot;5b0bec767a49d017f0e46c67&quot;)), </span><br><span class="line">        DBRef(&quot;books&quot;, ObjectId(&quot;5b0bec767a49d017f0e46c63&quot;)), </span><br><span class="line">        DBRef(&quot;books&quot;, ObjectId(&quot;5b0bec767a49d017f0e46c65&quot;)), </span><br><span class="line">        DBRef(&quot;books&quot;, ObjectId(&quot;5b0bec767a49d017f0e46c66&quot;))</span><br><span class="line">    ], </span><br><span class="line">    &quot;_class&quot; : &quot;com.test.springbootwithmongodb.entity.Author&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="MongoTemplate"><a href="#MongoTemplate" class="headerlink" title="MongoTemplate"></a>MongoTemplate</h2><p>可以自己注入MongoTemplate来实现更多操作, 比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">List&lt;Customer&gt; list = mongoTemplate.findAll(Customer.class);  </span><br></pre></td></tr></table></figure><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>还可以这样设置联合索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Document</span><br><span class="line">@CompoundIndexes(&#123;</span><br><span class="line">    @CompoundIndex(name &#x3D; &quot;email_age&quot;, def &#x3D; &quot;&#123;&#39;email.id&#39; : 1, &#39;age&#39;: 1&#125;&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">public class User &#123;</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">db.user.getIndexes();</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;v&quot; : 1,</span><br><span class="line">    &quot;key&quot; : &#123;</span><br><span class="line">        &quot;email.id&quot; : 1,</span><br><span class="line">        &quot;age&quot; : 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;name&quot; : &quot;email_age&quot;,</span><br><span class="line">    &quot;ns&quot; : &quot;test.user&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Springboot </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos安装Mongodb</title>
      <link href="2018/05/28/centos-install-mongodb/"/>
      <url>2018/05/28/centos-install-mongodb/</url>
      
        <content type="html"><![CDATA[<p>本文基于centos6安装mongod 3</p><a id="more"></a><h2 id="添加repo"><a href="#添加repo" class="headerlink" title="添加repo"></a>添加repo</h2><p>vim /etc/yum.repos.d/mongodb-org-3.6.repo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mongodb-org-3.6]</span><br><span class="line">name&#x3D;MongoDB Repository</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;repo.mongodb.org&#x2F;yum&#x2F;redhat&#x2F;$releasever&#x2F;mongodb-org&#x2F;3.6&#x2F;x86_64&#x2F;</span><br><span class="line">gpgcheck&#x3D;1</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;www.mongodb.org&#x2F;static&#x2F;pgp&#x2F;server-3.6.asc</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y mongodb-org</span><br></pre></td></tr></table></figure><h2 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h2><h3 id="SELinux"><a href="#SELinux" class="headerlink" title="SELinux"></a>SELinux</h3><p>如果安装了<code>SELinux </code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">semanage port -a -t mongod_port_t -p tcp 27017</span><br></pre></td></tr></table></figure><p>或者直接关闭 /etc/selinux/config</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELINUX&#x3D;disabled</span><br></pre></td></tr></table></figure><h3 id="mongodb配置绑定ip"><a href="#mongodb配置绑定ip" class="headerlink" title="mongodb配置绑定ip"></a>mongodb配置绑定ip</h3><p>默认绑定端口为本机，可以指定ip，也可以开放所有。下面开放所有</p><p>vim /etc/mongod.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 0.0.0.0</span><br></pre></td></tr></table></figure><p>如果指定ip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 127.0.0.1,192.168.1.100</span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mongod restart</span><br></pre></td></tr></table></figure><h3 id="centos6开放ip端口"><a href="#centos6开放ip端口" class="headerlink" title="centos6开放ip端口"></a>centos6开放ip端口</h3><p>vim /etc/sysconfig/iptables 添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -p tcp -m tcp --dport 27017 -j ACCEPT</span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables restart</span><br></pre></td></tr></table></figure><h2 id="测试启动"><a href="#测试启动" class="headerlink" title="测试启动"></a>测试启动</h2><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mongod start</span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mongod restart</span><br></pre></td></tr></table></figure><p>本机连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure><p>远程连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo --host 192.168.2.125:27017</span><br></pre></td></tr></table></figure><p>查看db</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; show dbs;</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br></pre></td></tr></table></figure><p>进入db</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; use config</span><br><span class="line">switched to db config</span><br></pre></td></tr></table></figure><p>查看当前db</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db</span><br><span class="line">config</span><br></pre></td></tr></table></figure><p>查看集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; show collections</span><br><span class="line">system.sessions</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.cnblogs.com/woshimrf/p/5503228.html">http://www.cnblogs.com/woshimrf/p/5503228.html</a></p><p><a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/">https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> CentOS </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu安装Mysql</title>
      <link href="2018/05/27/ubuntu-install-mysql/"/>
      <url>2018/05/27/ubuntu-install-mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo apt-get --purge remove mysql-server mysql-common mysql-client</span><br><span class="line">sudo apt-get install mysql-server mysql-common mysql-client</span><br><span class="line"></span><br><span class="line">mysqladmin -u root password your-new-password</span><br><span class="line">sudo &#x2F;etc&#x2F;init.d&#x2F;mysql restart</span><br></pre></td></tr></table></figure><p>mariadb</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install mariadb-server</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="字符集修改utf8"><a href="#字符集修改utf8" class="headerlink" title="字符集修改utf8"></a>字符集修改utf8</h2><p>如果装的mariadb, 默认字符集已经是utf8了。mysql则不是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#39;char%&#39;;</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| character_set_client     | utf8                       |</span><br><span class="line">| character_set_connection | utf8                       |</span><br><span class="line">| character_set_database   | latin1                     |</span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line">| character_set_results    | utf8                       |</span><br><span class="line">| character_set_server     | latin1                     |</span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line">| character_sets_dir       | &#x2F;usr&#x2F;share&#x2F;mysql&#x2F;charsets&#x2F; |</span><br><span class="line">+--------------------------+----------------------------+</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#39;collation%&#39;;</span><br><span class="line">+----------------------+-------------------+</span><br><span class="line">| Variable_name        | Value             |</span><br><span class="line">+----------------------+-------------------+</span><br><span class="line">| collation_connection | utf8_general_ci   |</span><br><span class="line">| collation_database   | latin1_swedish_ci |</span><br><span class="line">| collation_server     | latin1_swedish_ci |</span><br><span class="line">+----------------------+-------------------+</span><br></pre></td></tr></table></figure><p>修改字符集：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;mysql&#x2F;my.cnf</span><br></pre></td></tr></table></figure><p>添加以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">collation-server &#x3D; utf8_unicode_ci</span><br><span class="line">init-connect&#x3D;&#39;SET NAMES utf8&#39;</span><br><span class="line">character-set-server &#x3D; utf8</span><br></pre></td></tr></table></figure><p>重启：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure><h2 id="登录权限问题"><a href="#登录权限问题" class="headerlink" title="登录权限问题"></a>登录权限问题</h2><p>Ubuntu18.04 安装mysql或者mariadb之后，发现普通用户和远程都没有权限连接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1045: Access denied for user: &#39;root@localhost&#39; (Using </span><br><span class="line">password: YES)</span><br></pre></td></tr></table></figure><p>修改了密码也不对。然后<code>sudo mysql -u root</code>即可登录。这显然不是我们想要的。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>删除root，重新创建用户。</p><p>首先，登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql -u root</span><br></pre></td></tr></table></figure><p>然后查看当前用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">SELECT User,Host FROM mysql.user;</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| User             | Host      |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| admin            | localhost |</span><br><span class="line">| debian-sys-maint | localhost |</span><br><span class="line">| magento_user     | localhost |</span><br><span class="line">| mysql.sys        | localhost |</span><br><span class="line">| root             | localhost |</span><br></pre></td></tr></table></figure><p>删除root账号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DROP USER &#39;root&#39;@&#39;localhost&#39;;</span><br><span class="line">Query OK, 0 rows affected (0,00 sec)</span><br></pre></td></tr></table></figure><p>重新创建root：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE USER &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;;</span><br><span class="line">Query OK, 0 rows affected (0,00 sec)</span><br></pre></td></tr></table></figure><p>授权</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; WITH GRANT OPTION;</span><br><span class="line">Query OK, 0 rows affected (0,00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br><span class="line">Query OK, 0 rows affected (0,01 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="关于重置密码"><a href="#关于重置密码" class="headerlink" title="关于重置密码"></a>关于重置密码</h2><p>host为<code>%</code>时允许远程登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET PASSWORD FOR root@&#39;localhost&#39; &#x3D; PASSWORD(&#39;password&#39;);</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE mysql.user SET Password&#x3D;PASSWORD(&#39;newpwd&#39;) WHERE User&#x3D;&#39;root&#39;;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">USE mysql</span><br><span class="line">UPDATE user SET Password &#x3D; PASSWORD(&#39;newpwd&#39;)</span><br><span class="line">WHERE Host &#x3D; &#39;localhost&#39; AND User &#x3D; &#39;root&#39;;</span><br></pre></td></tr></table></figure><p>允许任何地方登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">USE mysql</span><br><span class="line">UPDATE user SET Password &#x3D; PASSWORD(&#39;newpwd&#39;)</span><br><span class="line">WHERE Host &#x3D; &#39;%&#39; AND User &#x3D; &#39;root&#39;;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://askubuntu.com/questions/766334/cant-login-as-mysql-user-root-from-normal-user-account-in-ubuntu-16-04">https://askubuntu.com/questions/766334/cant-login-as-mysql-user-root-from-normal-user-account-in-ubuntu-16-04</a></li><li><a href="https://help.ubuntu.com/community/MysqlPasswordReset">https://help.ubuntu.com/community/MysqlPasswordReset</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot集成ELK，ELK初步使用</title>
      <link href="2018/05/27/springboot-with-elk/"/>
      <url>2018/05/27/springboot-with-elk/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ELK官方的<a href="https://www.elastic.co/cn/">中文文档</a>写的已经挺好了，为啥还要记录本文？因为我发现，我如果不写下来，过几天就忘记了，而再次捡起来必然还要经历资料查找筛选测试的过程。虽然这个过程很有意义，但并不总是有那么多时间去做。因此，接下来的内容仅仅是我根据查询到的资料，筛选，组装，测试后达到我的目标的一个过程。</p><h2 id="什么是ELK"><a href="#什么是ELK" class="headerlink" title="什么是ELK"></a>什么是ELK</h2><p>K我最初还以为是Kafka，事实上，ELK平台是一个完整的日志分析解决方案，由这三个开源工具构建而成：Elasticsearch、Logstash、Kibana。</p><p>Elasticsearch用于深度搜索和数据分析，它是基于Apache Lucene的分布式开源搜索引擎，无须预先定义数据结构就能动态地对数据进行索引；</p><p>Logstash用于日志集中管理，包括从多台服务器上传输和转发日志，并对日志进行丰富和解析，是一个数据管道，提供了大量插件来支持数据的输入和输出处理；</p><p>最后是Kibana，提供了强大而美观的数据可视化，Kibana完全使用HTML和Javascript编写，它利用Elasticsearch 的RESTful API来实现其强大的搜索能力，将结果显示位各种震撼的图形提供给最终的用户。</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/2018/elk.jpg" alt="关系图"></p><a id="more"></a><h2 id="安装Elasticsearch"><a href="#安装Elasticsearch" class="headerlink" title="安装Elasticsearch"></a>安装Elasticsearch</h2><p><a href="https://www.elastic.co/cn/downloads">官网</a>下载对应平台的安装包。</p><p>Windows用法比较简单，只要下载后双机bin/elasticsearch.bat就启动成功了. 下面关注linux上的安装使用。</p><p>ES不允许root运行，所以，最好我们创建专门的用户来运行。</p><p>解压后，运行<code>./bin/elasticsearch</code>就会启动成功。如果失败，应该是用root启动的，改成普通用户即可。</p><p>然后浏览器访问：<a href="http://localhost:9200/">http://localhost:9200/</a>  可以看到响应</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;ZSedUub&quot;,</span><br><span class="line">    &quot;cluster_name&quot;: &quot;elasticsearch&quot;,</span><br><span class="line">    &quot;cluster_uuid&quot;: &quot;_pS5AOR4Rf2oGPk5uRKK-A&quot;,</span><br><span class="line">    &quot;version&quot;: &#123;</span><br><span class="line">        &quot;number&quot;: &quot;6.2.4&quot;,</span><br><span class="line">        &quot;build_hash&quot;: &quot;ccec39f&quot;,</span><br><span class="line">        &quot;build_date&quot;: &quot;2018-04-12T20:37:28.497551Z&quot;,</span><br><span class="line">        &quot;build_snapshot&quot;: false,</span><br><span class="line">        &quot;lucene_version&quot;: &quot;7.2.1&quot;,</span><br><span class="line">        &quot;minimum_wire_compatibility_version&quot;: &quot;5.6.0&quot;,</span><br><span class="line">        &quot;minimum_index_compatibility_version&quot;: &quot;5.0.0&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;tagline&quot;: &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="安装Kibana"><a href="#安装Kibana" class="headerlink" title="安装Kibana"></a>安装Kibana</h2><p><a href="https://www.elastic.co/cn/downloads">官网</a>下载对应平台的安装包。然后，解压。<br>启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;bin&#x2F;kibana</span><br></pre></td></tr></table></figure><p>浏览器访问： <a href="http://localhost:5601/">http://localhost:5601</a></p><h2 id="安装logstash"><a href="#安装logstash" class="headerlink" title="安装logstash"></a>安装logstash</h2><p><a href="https://www.elastic.co/cn/downloads">官网</a>下载对应平台的安装包。然后，解压。</p><p>这里采用压缩包的方式，当然也可以使用系统安装包，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;ubuntu</span><br><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install logstash</span><br></pre></td></tr></table></figure><p>centos</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">rpm --import https:&#x2F;&#x2F;artifacts.elastic.co&#x2F;GPG-KEY-elasticsearch</span><br><span class="line"></span><br><span class="line">在&#x2F;etc&#x2F;yum.repos.d&#x2F; 新建logstash.repo</span><br><span class="line"></span><br><span class="line">[logstash-6.x]</span><br><span class="line">name&#x3D;Elastic repository for 6.x packages</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;artifacts.elastic.co&#x2F;packages&#x2F;6.x&#x2F;yum</span><br><span class="line">gpgcheck&#x3D;1</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;artifacts.elastic.co&#x2F;GPG-KEY-elasticsearch</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">autorefresh&#x3D;1</span><br><span class="line">type&#x3D;rpm-md</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo yum install logstash</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>甚至docker。</p><p>修改ruby仓库地址为中国：编辑<code>Gemfile</code></p><p>修改为<code>source &quot;https://gems.ruby-china.org/&quot;</code></p><p>启动： <code>bin/logstash -e &#39;input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;&#39;</code></p><p>这是一个交互式输入，你输入的内容将被当做message收集起来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">test</span><br><span class="line">&#123;</span><br><span class="line">       &quot;message&quot; &#x3D;&gt; &quot;test&quot;,</span><br><span class="line">      &quot;@version&quot; &#x3D;&gt; &quot;1&quot;,</span><br><span class="line">    &quot;@timestamp&quot; &#x3D;&gt; 2018-05-26T14:29:09.212Z,</span><br><span class="line">          &quot;host&quot; &#x3D;&gt; &quot;ryan-900X5L&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>到这里就算安装成功了。</p><p>遇到的问题，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unsupported platform: x86_64-linux</span><br></pre></td></tr></table></figure><p>原因是Java9不支持，卸载Java9即可。</p><p>安装<code>logstash-codec-json_lines</code>插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ryan@ryan-900X5L:~&#x2F;apps&#x2F;logstash-6.2.4$ .&#x2F;bin&#x2F;logstash-plugin install logstash-codec-json_lines</span><br><span class="line">Validating logstash-codec-json_lines</span><br><span class="line">Installing logstash-codec-json_lines</span><br><span class="line">Installation successful</span><br></pre></td></tr></table></figure><p>接下来，我们直接编写我们springboot需要的配置方案，新建config/logstash-sample.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    tcp &#123;</span><br><span class="line">        port &#x3D;&gt; 4560</span><br><span class="line">        codec &#x3D;&gt; json_lines</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output&#123;</span><br><span class="line">  elasticsearch &#123; </span><br><span class="line">      hosts &#x3D;&gt; [&quot;localhost:9200&quot;] </span><br><span class="line">      index &#x3D;&gt; &quot;%&#123;[appName]&#125;-%&#123;+YYYY.MM.dd&#125;&quot; #用一个项目名称来做索引</span><br><span class="line">  &#125;</span><br><span class="line">  stdout &#123; codec &#x3D;&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>4560 是logstash接收数据的端口</li><li>codec =&gt; json_lines是一个json解析器，接收json的数据。这个要装 <code>logstash-codec-json_lines</code> 插件</li><li>ouput elasticsearch指向我们安装的地址</li><li>stdout会打印收到的消息，调试用</li></ul><p>启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;bin&#x2F;logstash -f config&#x2F;logstash-sample.conf </span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 新建一个springboot项目</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">项目地址： https:&#x2F;&#x2F;github.com&#x2F;Ryan-Miao&#x2F;springboot-with-elk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pom</span><br><span class="line"></span><br></pre></td></tr></table></figure><?xml version="1.0" encoding="UTF-8"?><p><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"><br>    <modelVersion>4.0.0</modelVersion></p><pre><code>&lt;groupId&gt;com.test&lt;/groupId&gt;&lt;artifactId&gt;springboot-with-elk&lt;/artifactId&gt;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&lt;packaging&gt;jar&lt;/packaging&gt;&lt;name&gt;springboot-with-elk&lt;/name&gt;&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;&lt;parent&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;    &lt;version&gt;2.0.2.RELEASE&lt;/version&gt;    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&lt;/parent&gt;&lt;properties&gt;    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;    &lt;java.version&gt;1.8&lt;/java.version&gt;&lt;/properties&gt;&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;net.logstash.logback&lt;/groupId&gt;        &lt;artifactId&gt;logstash-logback-encoder&lt;/artifactId&gt;        &lt;version&gt;5.1&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;        &lt;scope&gt;runtime&lt;/scope&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;        &lt;scope&gt;test&lt;/scope&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;&lt;build&gt;    &lt;plugins&gt;        &lt;plugin&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;        &lt;/plugin&gt;    &lt;/plugins&gt;&lt;/build&gt;</code></pre></project><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">新建启动类</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class SpringbootWithElkApplication implements CommandLineRunner &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SpringbootWithElkApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run(String... args) throws Exception &#123;</span><br><span class="line">        Logger logger &#x3D; LoggerFactory.getLogger(SpringbootWithElkApplication.class);</span><br><span class="line">        logger.info(&quot;测试log&quot;);</span><br><span class="line"></span><br><span class="line">        for (int i &#x3D; 0; i &lt; 10; i++) &#123;</span><br><span class="line">            logger.error(&quot;something wrong. id&#x3D;&#123;&#125;; name&#x3D;Ryan-&#123;&#125;;&quot;, i, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在resources下新建logback-spring.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;appender name&#x3D;&quot;LOGSTASH&quot; class&#x3D;&quot;net.logstash.logback.appender.LogstashTcpSocketAppender&quot;&gt;</span><br><span class="line">    &lt;destination&gt;localhost:4560&lt;&#x2F;destination&gt;</span><br><span class="line">    &lt;encoder charset&#x3D;&quot;UTF-8&quot; class&#x3D;&quot;net.logstash.logback.encoder.LogstashEncoder&quot; &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;appender&gt;</span><br><span class="line"></span><br><span class="line">  &lt;include resource&#x3D;&quot;org&#x2F;springframework&#x2F;boot&#x2F;logging&#x2F;logback&#x2F;base.xml&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;root level&#x3D;&quot;INFO&quot;&gt;</span><br><span class="line">    &lt;appender-ref ref&#x3D;&quot;LOGSTASH&quot; &#x2F;&gt;</span><br><span class="line">    &lt;appender-ref ref&#x3D;&quot;CONSOLE&quot; &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;root&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动。然后就可以观察到，logsash控制台打印我们的日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       &quot;@version&quot; &#x3D;&gt; &quot;1&quot;,</span><br><span class="line">    &quot;thread_name&quot; &#x3D;&gt; &quot;restartedMain&quot;,</span><br><span class="line">        &quot;message&quot; &#x3D;&gt; &quot;something wrong. id&#x3D;9; name&#x3D;Ryan-9;&quot;,</span><br><span class="line">    &quot;logger_name&quot; &#x3D;&gt; &quot;com.test.springbootwithelk.SpringbootWithElkApplication&quot;,</span><br><span class="line">    &quot;level_value&quot; &#x3D;&gt; 40000,</span><br><span class="line">     &quot;@timestamp&quot; &#x3D;&gt; 2018-05-26T15:21:05.109Z,</span><br><span class="line">           &quot;host&quot; &#x3D;&gt; &quot;localhost&quot;,</span><br><span class="line">          &quot;level&quot; &#x3D;&gt; &quot;ERROR&quot;,</span><br><span class="line">           &quot;port&quot; &#x3D;&gt; 34902</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在kibana- management - index pattern里新建一个pattern，我们就用*吧。创建好了，点击discover。就可以看到我们的日志了</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/elk/kibana.png"></p><p>到这里，hello world完成。当然还要继续高级配置和查询啥的，后面再说。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.elastic.co/guide/en/logstash/current/getting-started-with-logstash.html">logstash官网</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Springboot </category>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
            <tag> 监控 </tag>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux用户user和组group管理</title>
      <link href="2018/05/24/linux-user-group/"/>
      <url>2018/05/24/linux-user-group/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安全介绍3A"><a href="#1-安全介绍3A" class="headerlink" title="1.安全介绍3A"></a>1.安全介绍3A</h2><p>Authentication: 认证，用户名和对应口令</p><p>Authorization: 授权，不同用户权限不同</p><p>Accouting/Audition: 审计</p><h2 id="2-所属者和所属组"><a href="#2-所属者和所属组" class="headerlink" title="2. 所属者和所属组"></a>2. 所属者和所属组</h2><h3 id="user-用户"><a href="#user-用户" class="headerlink" title="user: 用户"></a>user: 用户</h3><p>用户标识: UserID, UID(16bits二进制，0-65535)</p><p>管理员： root, UID=0</p><p>普通用户: 1-65535(又分系统用户和登陆用户两种)</p><p>系统用户: 1-499(centos6), 1-999(centos7)由系统保留，作为管理账号，对守护进程获取资源进行权限分配；</p><p>登陆用户：500-60000(centos6), 1000-60000(centos7)</p><p>名称转换： username&lt;&gt;UID,通过<code>/etc/passwd</code></p><h3 id="group-组"><a href="#group-组" class="headerlink" title="group: 组"></a>group: 组</h3><p>组标识: groupid, gid</p><p>管理员组: root, UID=0</p><p>**用户主要组(主组)**：   </p><ul><li>用户必须属于一个且只有一个主组(基本组)；</li><li>基本组名同用户名，且仅包含一个用户，也叫私有组(即，新建的用户，也会新建要给组，但组里只有用户自己)</li></ul><p>用户的附加组： secondary group</p><p>基本组以外的组属于用户的附加族。</p><p><img src="https://s3.51cto.com/wyfs02/M01/8D/72/wKioL1ichHby9VfGAAAgEgTv0EY748.png"></p><p>注意：  </p><ul><li>一个用户只有一个主组，但可以属于0或者多个附加组。    </li><li>一般第一个为用户的主组，后面是附加组。   </li><li>系统识别用户不是看用户名，而是id编号。</li></ul><a id="more"></a><hr><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="1-主要配置文件"><a href="#1-主要配置文件" class="headerlink" title="1.  主要配置文件"></a>1.  主要配置文件</h3><p><code>/etc/passwd</code>: 用户及其属性信息(名称，UID,主组ID)   </p><p><code>/etc/shadow</code>: 用户密码及相关属性。   </p><p><code>/etc/group</code>: 组及其属性信息。    </p><p><code>/etc/gshadow</code>: 组密码及相关属性。</p><h3 id="2-etc-passwd"><a href="#2-etc-passwd" class="headerlink" title="2. /etc/passwd"></a>2. /etc/passwd</h3><p>格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name:password:UID:GID:GECOS:directory:shell</span><br></pre></td></tr></table></figure><p><code>/etc/passwd</code> 由“：”分割成7段，每个字段含义如下：</p><p><strong>①login name</strong>：</p><p>登录用户名（wang）</p><p><strong>②passwd</strong>：</p><p>密码，口令(x) 现在放在 /etc/shadow  如果要想回到之前的状态用（命令 pwunconv）但是这样的话/etc/shadow文件就没有了，恢复使用（命令 pwconv）  </p><p><strong>③UID</strong>：</p><p>用户身份编号 管理员：0，系统默认为root，但是可以修改。普通用户：500+；1000+</p><p><strong>④GID</strong>：</p><p>组标识号登录默认所在组编号(1000)</p><p><strong>⑤GECOS</strong>：</p><p>用户全名或注释；</p><p>用命令chfn 可以修改注释信息；</p><p>用命令 finger 可以更加详细的查看修改和用户信息；</p><p><strong>⑥home</strong> directory：</p><p>用户主目录(/home/wang)</p><p>root 的家目录是/root ,普通用户的家目录则为/home/username,用户家目录可以自己定义。</p><p><strong>⑦shell</strong>：</p><p>用户默认使用shell (/bin/bash)</p><p>用 chsh命令 可以直接修改用户的shell</p><p>示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost home]# getent passwd ryan</span><br><span class="line">ryan:x:500:500:centos6:&#x2F;home&#x2F;ryan:&#x2F;bin&#x2F;bash</span><br><span class="line">[root@localhost home]# </span><br><span class="line">[root@localhost home]# cat &#x2F;etc&#x2F;passwd</span><br><span class="line">root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br><span class="line">bin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin</span><br><span class="line">daemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin</span><br><span class="line">adm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin</span><br><span class="line">lp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin</span><br><span class="line">sync:x:5:0:sync:&#x2F;sbin:&#x2F;bin&#x2F;sync</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-etc-shadow"><a href="#3-etc-shadow" class="headerlink" title="3.  /etc/shadow"></a>3.  /etc/shadow</h3><p>/etc/shadow和/etc/passwd类似，由”:”分割成9段，只有管理员可以查看。</p><p>1.登陆用户名；2.用户密码，一般sha512加密； 3.从1970.1.1起，密码最近一次被更改的时间； 4.密码再过多少天就可以被更改，默认0，即不受限制； 5.密码多少天后过期，默认99999表示永远不用； 6.密码过期前几天提醒用户，默认一周； 7.密码过期几天后被锁定； 8.生命周期，从1970.1.1之后，多少天后账号失效； 9.没有意义，保留。</p><p>示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost home]# getent shadow ryan</span><br><span class="line">ryan:$1$w7vV7KvG$kaxEMBMaLna7Iaf59NCQl1:17670:0:99999:7:::</span><br><span class="line">[root@localhost home]# </span><br><span class="line">[root@localhost home]# cat &#x2F;etc&#x2F;shadow</span><br><span class="line">root:$1$w7vV7KvG$kaxEMBMaLna7Iaf59NCQl1:17670:0:99999:7:::</span><br><span class="line">bin:*:15980:0:99999:7:::</span><br><span class="line">daemon:*:15980:0:99999:7:::</span><br><span class="line">adm:*:15980:0:99999:7:::</span><br><span class="line">lp:*:15980:0:99999:7:::</span><br><span class="line">sync:*:15980:0:99999:7:::</span><br></pre></td></tr></table></figure><h3 id="4-etc-group组"><a href="#4-etc-group组" class="headerlink" title="4. /etc/group组"></a>4. /etc/group组</h3><p>1.组群名称； 2.组群密码，通常不设定，密码记录在/etc/gshadow; 3. GID. 组id；  4. 以当前组为附加组的用户列表。</p><p>示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost home]# getent group ryan</span><br><span class="line">ryan:x:500:</span><br><span class="line">[root@localhost home]# cat &#x2F;etc&#x2F;group</span><br><span class="line">root:x:0:</span><br><span class="line">bin:x:1:bin,daemon</span><br><span class="line">daemon:x:2:bin,daemon</span><br><span class="line">sys:x:3:bin,adm</span><br><span class="line">adm:x:4:adm,daemon</span><br><span class="line">tty:x:5:</span><br><span class="line">disk:x:6:</span><br><span class="line">lp:x:7:daemon</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-etc-gshadow"><a href="#5-etc-gshadow" class="headerlink" title="5. /etc/gshadow"></a>5. /etc/gshadow</h3><p>1.群组名称；  2.群组密码，一般不设置，如果设置了，普通用户知道口令后可以直接加进来，不设置反而安全；   3. 组管理员列表；   4.以当前组为附加组的用户列表；</p><p>示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost home]# cat &#x2F;etc&#x2F;gshadow</span><br><span class="line">root:::</span><br><span class="line">bin:::bin,daemon</span><br><span class="line">daemon:::bin,daemon</span><br><span class="line">sys:::bin,adm</span><br><span class="line">adm:::adm,daemon</span><br><span class="line">tty:::</span><br><span class="line">disk:::</span><br><span class="line">lp:::daemon</span><br><span class="line">mem:::</span><br><span class="line">kmem:::</span><br><span class="line">wheel:::</span><br><span class="line">mail:::mail,postfix</span><br></pre></td></tr></table></figure><h2 id="添加用户和删除用户user"><a href="#添加用户和删除用户user" class="headerlink" title="添加用户和删除用户user"></a>添加用户和删除用户user</h2><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd username</span><br></pre></td></tr></table></figure><p>-g groupname: 指定用户的基本组(事先存在), 没指定则使用与用户名相同的组名；<br>-G group1,group2: 指定用户所属的附加组，要事先存在；<br>-c “comment”:  注释信息；<br>-d HOME_DIR:   家目录；<br>-s SHELL: 指定用户默认的shell，可用的所有shell列表在/etc/shells中；     </p><p>useradd -D显示默认配置。</p><h3 id="创建-修改密码"><a href="#创建-修改密码" class="headerlink" title="创建/修改密码"></a>创建/修改密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd username</span><br></pre></td></tr></table></figure><p>修改自己密码<code>passwd</code></p><h3 id="usermod-userdel用户属性修改和删除用户"><a href="#usermod-userdel用户属性修改和删除用户" class="headerlink" title="usermod, userdel用户属性修改和删除用户"></a>usermod, userdel用户属性修改和删除用户</h3><p>修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod username</span><br></pre></td></tr></table></figure><p>-u UID: 修改用户id为新的；<br>-g GID: 修改用户基本组为新的;<br>-G group1, group2: 修改用户附加组，原来的被覆盖；</p><p>删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel username</span><br></pre></td></tr></table></figure><p>-r: 删除用户时，一起删除家目录</p><h2 id="添加组和删除组group"><a href="#添加组和删除组group" class="headerlink" title="添加组和删除组group"></a>添加组和删除组group</h2><h3 id="创建组"><a href="#创建组" class="headerlink" title="创建组"></a>创建组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd groupname</span><br></pre></td></tr></table></figure><h3 id="修改组"><a href="#修改组" class="headerlink" title="修改组"></a>修改组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupmod -n new_name： 修改组名</span><br></pre></td></tr></table></figure><h3 id="删除组"><a href="#删除组" class="headerlink" title="删除组"></a>删除组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel groupname</span><br></pre></td></tr></table></figure><h3 id="更改查看组成员"><a href="#更改查看组成员" class="headerlink" title="更改查看组成员"></a>更改查看组成员</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupmems -g groupname [action]</span><br></pre></td></tr></table></figure><p>-a,–add username: 指定用户加入组；<br>-d,–delete username: 从组中删除用户；<br>-p,–purge :从组中清除所有成员；<br>-l,–list:  显示组成员列表;   </p><p><code>groups</code>查看当前用户所在全部组。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://blog.51cto.com/1992tao/1834120">http://blog.51cto.com/1992tao/1834120</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8-理解Collector</title>
      <link href="2018/04/22/java8-customize-collector/"/>
      <url>2018/04/22/java8-customize-collector/</url>
      
        <content type="html"><![CDATA[<p>上一节学习了Java8中比较常用的内置collector的用法。接下来就来理解下collector的组成。</p><h2 id="Collector定义"><a href="#Collector定义" class="headerlink" title="Collector定义"></a>Collector定义</h2><p>Collector接口包含了一系列方法，为实现具体的归约操作(即收集器)提供了范本。我们已经看过了Collector接口中实现的许多收集器，例如toList或groupingBy。这也意味着你可以为Collector接口提供自己的实现，从而自由创建自定义归约操作。</p><p>要开始使用Collector接口，我们先来看看toList的实现方法，这个在日常中使用最频繁的东西其实也简单。</p><p>Collector接口定义了5个函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collector</span>&lt;<span class="title">T</span>, <span class="title">A</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Supplier&lt;A&gt; <span class="title">supplier</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">BiConsumer&lt;A, T&gt; <span class="title">accumulator</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">BinaryOperator&lt;A&gt; <span class="title">combiner</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Function&lt;A, R&gt; <span class="title">finisher</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Set&lt;Characteristics&gt; <span class="title">characteristics</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>T是流中要收集的对象的泛型</li><li>A是累加器的类型，累加器是在收集过程中用于累积部分结果的对象。</li><li>R是收集操作得到的对象(通常但不一定是集合)的类型。</li></ol><p>对于toList, 我们收集的对象是T, 累加器是List<T>, 最终收集的结果也是一个List<T>，于是创建ToListCollector如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToListCollector</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Collector</span>&lt;<span class="title">T</span>, <span class="title">List</span>&lt;<span class="title">T</span>&gt;, <span class="title">List</span>&lt;<span class="title">T</span>&gt;&gt; </span></span><br></pre></td></tr></table></figure><h2 id="理解Collector几个函数"><a href="#理解Collector几个函数" class="headerlink" title="理解Collector几个函数"></a>理解Collector几个函数</h2><h3 id="建立新的结果容器-supplier方法"><a href="#建立新的结果容器-supplier方法" class="headerlink" title="建立新的结果容器 supplier方法"></a>建立新的结果容器 supplier方法</h3><p>supplier方法必须返回一个结果为空的Supplier，也就是一个无参数函数，在调用时，它会创建一个空的累加器实例，供数据收集过程使用。就个人通俗的理解来说，这个方法定义你如何收集数据，之所以提炼出来就是为了让你可以传lambda表达式来指定收集器。对于toList, 我们直接返回一个空list就好。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Supplier&lt;List&lt;T&gt;&gt; supplier() &#123;</span><br><span class="line">    <span class="keyword">return</span> ArrayList::<span class="keyword">new</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="累加器执行累加的具体实现-accumulator方法"><a href="#累加器执行累加的具体实现-accumulator方法" class="headerlink" title="累加器执行累加的具体实现 accumulator方法"></a>累加器执行累加的具体实现 accumulator方法</h3><p>accumulator方法会返回执行归约操作的函数，该函数将返回void。当遍历到流中第n个元素时，这个函数就会执行。函数有两个参数，第一个参数是累计值，第二参数是第n个元素。累加值与元素n如何做运算就是accumulator做的事情了。比如toList, 累加值就是一个List，对于元素n，当然就是add。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> BiConsumer&lt;List&lt;T&gt;, T&gt; accumulator() &#123;</span><br><span class="line">    <span class="keyword">return</span> List::add;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对结果容器应用最终转换-finisher方法"><a href="#对结果容器应用最终转换-finisher方法" class="headerlink" title="对结果容器应用最终转换 finisher方法"></a>对结果容器应用最终转换 finisher方法</h3><p>当遍历完流之后，我们需要对结果做一个处理，返回一个我们想要的结果。这就是finisher方法所定义的事情。finisher方法必须返回在累积过程的最后要调用的一个函数，以便将累加器对象转换为整个集合操作的最终结果， 这个返回的函数在执行时，会有个参数，该参数就是累积值，会有一个返回值，返回值就是我们最终要返回的东西。对于toList, 我最后就只要拿到那个收集的List就好，所以直接返回List。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Function&lt;List&lt;T&gt;, List&lt;T&gt;&gt; finisher() &#123;</span><br><span class="line">    <span class="keyword">return</span> (i) -&gt; i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于接收一个参数，返回一个value，我们可以想到Function函数，正如finisher()的返回值。对于这个返回参数本身的做法，Function有个静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T&gt; <span class="function">Function&lt;T, T&gt; <span class="title">identity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t -&gt; t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以用<code>Function.identity()</code>代替上述lambda表达式。</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/java8/collector-sequence.png" alt="顺序归约"></p><h3 id="合并两个结果容器-combiner"><a href="#合并两个结果容器-combiner" class="headerlink" title="合并两个结果容器 combiner"></a>合并两个结果容器 combiner</h3><p>上面看起来似乎已经可以工作了，这是针对顺序执行的情况。我们知道Stream天然支持并行，但并行却不是毫无代价的。想要并行首先就必然要把任务分段，然后才能并行执行，最后还要合并。虽然Stream底层对我们透明的执行了并行，但如何并行还是需要取决于我们自己。这就是combiner要做的事情。combiner方法会返回一个供归约操作使用的函数，它定义了对流的各个子部分并行处理时，各个字部分归约所得的累加器要如何合并。对于toList而言，Stream会把流自动的分成几个并行的部分，每个部分都执行上述的归约，汇集成一个List。当全部完成后再合并成一个List。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> BinaryOperator&lt;List&lt;T&gt;&gt; combiner() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (list1, list2) -&gt; &#123;</span><br><span class="line">        list1.addAll(list2);</span><br><span class="line">        <span class="keyword">return</span> list1;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，就可以对流并行归约了。它会用到Java7引入的分支/合并框架和Spliterator抽象。大概如下所示，</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/java8/collector-parallel.png"></p><ol><li>原始流会以递归方式拆分为子流，直到定义流是否进一步拆分的一个条件为非(如果分布式工作单位太小，并行计算往往比顺序计算要慢，而且要是生成的并行任务比处理器内核数多很多的话就毫无意义了)。</li><li>现在，所有的子流都可以并行处理，即对每个子流应用顺序归约算法。</li><li>最后，使用收集器combiner方法返回的函数，将所有的部分结果两两合并。这时，会把原始流每次拆分得到的子流对应的结果合并起来。</li></ol><h3 id="characteristics方法"><a href="#characteristics方法" class="headerlink" title="characteristics方法"></a>characteristics方法</h3><p>最后一个方法characteristics会返回一个不可变的Characteristics集合，它定义了收集器的行为–尤其是关于流是否可以并行归约，以及可以使用哪些优化的提示。</p><p>Characteristics是一个包含三个项目的枚举：</p><ol><li>UNORDERED–归约结果不受流中项目的遍历和累积顺序的影响</li><li>CONCURRENT–accumulator函数可以从多个线程同时调用，且该收集器可以并行归约流。如果收集器没有标为UNORDERED, 那它仅在用于无序数据源时才可以并行归约。</li><li>IDENTITY_FINISH–这表明完成器方法返回的函数是一个恒等函数，可以跳过。这种情况下，累加器对象将会直接用做归约过程的最终结果。这也意味着，将累加器A不加检查地转换为结果R是安全的。</li></ol><p>我们迄今为止ToListCollector是IDENTITY_FINISH的，因为用来累积流中元素的List已经是我们要的最终结果，用不着进一步转换了，但它并不是UNORDERED，因为用在有序流上的时候，我们还是希望顺序能够保留在得到到List中。最后，他是CONCURRENT的，但我们刚才说过了，仅仅在背后的数据源无序时才会并行处理。</p><p>上面这段话说的有点绕口，大概是说像Set生成的stream是无序的，这时候toList就可以并行。而ArrayList这种队列一样的数据结构则生成有序的stream，不能并行。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>直接传给collect方法就好。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Dish&gt; rs = dishes</span><br><span class="line">            .stream()</span><br><span class="line">            .collect(<span class="keyword">new</span> ToListCollector&lt;&gt;());</span><br></pre></td></tr></table></figure><p>我们这样费尽心思去创建一个toListCollector，一个是为了熟悉Collector接口的用法，一个是方便重用。当再遇到这样的需求的时候就可以直接用这个自定义的函数了，所以才有toList()这个静态方法。否则，其实collect提供了重载函数可以直接定义这几个函数。比如，可以这样实现toList</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Dish&gt; dishes = dishes</span><br><span class="line">                    .stream()</span><br><span class="line">                    .collect(</span><br><span class="line">                        ArrayList::<span class="keyword">new</span>, <span class="comment">//supplier</span></span><br><span class="line">                        List::add, <span class="comment">//accumulator</span></span><br><span class="line">                        List::addAll <span class="comment">//combiner</span></span><br><span class="line">                    );</span><br></pre></td></tr></table></figure><p>这种方法虽然简单，但可读性较差，而且当再次遇到这个需求时还要重写一遍，复用性差。</p><h3 id="关于性能"><a href="#关于性能" class="headerlink" title="关于性能"></a>关于性能</h3><p>对于stream提供的几个收集器已经可以满足绝大部分开发需求了，reduce提供了各种自定义。但有时候还是需要自定义collector才能实现。文中举例还是质数枚举算法。之前我们通过遍历平方根之内的数字来求质数。这次提出要用得到的质数减少取模运算。然而，悲剧的是我本地测算的结果显示，这个而所谓的优化版反而比原来的慢100倍。不过，还是把这个自定义收集器列出来。值得铭记的是，这个收集器是有序的，所以不能并行，那个这个combiner方法可以不要的，最好返回UnsupportedOperationException来警示此收集器的非并行性。</p><p>测试见 <a href="https://github.com/Ryan-Miao/l4Java/blob/master/src/test/java/com/test/java/stream/collect/PrimeNumbersCollectorTest.java">https://github.com/Ryan-Miao/l4Java/blob/master/src/test/java/com/test/java/stream/collect/PrimeNumbersCollectorTest.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimeNumbersCollector</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">    <span class="title">Collector</span>&lt;<span class="title">Integer</span>, <span class="title">Map</span>&lt;<span class="title">Boolean</span>, <span class="title">List</span>&lt;<span class="title">Integer</span>&gt;&gt;, <span class="title">Map</span>&lt;<span class="title">Boolean</span>, <span class="title">List</span>&lt;<span class="title">Integer</span>&gt;&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Supplier&lt;Map&lt;Boolean, List&lt;Integer&gt;&gt;&gt; supplier() &#123;</span><br><span class="line">        <span class="keyword">return</span> () -&gt; &#123;</span><br><span class="line">            Map&lt;Boolean, List&lt;Integer&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            map.put(<span class="keyword">true</span>, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            map.put(<span class="keyword">false</span>, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> BiConsumer&lt;Map&lt;Boolean, List&lt;Integer&gt;&gt;, Integer&gt; accumulator() &#123;</span><br><span class="line">        <span class="keyword">return</span> (Map&lt;Boolean, List&lt;Integer&gt;&gt; acc, Integer candidate) -&gt; &#123;</span><br><span class="line">            acc.get(isPrime(acc.get(<span class="keyword">true</span>), candidate)).add(candidate);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从质数列表里取出来，看看是不是candidate的约数.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> primes 质数列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> candidate 判断值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true -&gt; 质数； false-&gt;非质数。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Boolean <span class="title">isPrime</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        List&lt;Integer&gt; primes,</span></span></span><br><span class="line"><span class="function"><span class="params">        Integer candidate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> candidateRoot = (<span class="keyword">int</span>) Math.sqrt((<span class="keyword">double</span>) candidate);</span><br><span class="line">        <span class="keyword">return</span> primes.stream().filter(p -&gt; p&lt;=candidateRoot).noneMatch(i -&gt; candidate % i == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> BinaryOperator&lt;Map&lt;Boolean, List&lt;Integer&gt;&gt;&gt; combiner() &#123;</span><br><span class="line">        <span class="keyword">return</span> (Map&lt;Boolean, List&lt;Integer&gt;&gt; map1, Map&lt;Boolean, List&lt;Integer&gt;&gt; map2) -&gt; &#123;</span><br><span class="line">            map1.get(<span class="keyword">true</span>).addAll(map2.get(<span class="keyword">true</span>));</span><br><span class="line">            map1.get(<span class="keyword">false</span>).addAll(map2.get(<span class="keyword">false</span>));</span><br><span class="line">            <span class="keyword">return</span> map1;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Function&lt;Map&lt;Boolean, List&lt;Integer&gt;&gt;, Map&lt;Boolean, List&lt;Integer&gt;&gt;&gt; finisher() &#123;</span><br><span class="line">        <span class="keyword">return</span> Function.identity();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Characteristics&gt; <span class="title">characteristics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.unmodifiableSet(EnumSet.of(Characteristics.IDENTITY_FINISH));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>Java8 in Action</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8 </tag>
            
            <tag> Stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8-Collect收集Stream</title>
      <link href="2018/04/19/java8-stream-collector/"/>
      <url>2018/04/19/java8-stream-collector/</url>
      
        <content type="html"><![CDATA[<h2 id="Collection-Collections-collect-Collector-Collectos"><a href="#Collection-Collections-collect-Collector-Collectos" class="headerlink" title="Collection, Collections, collect, Collector, Collectos"></a>Collection, Collections, collect, Collector, Collectos</h2><p><code>Collection</code>是Java集合的祖先接口。<br><code>Collections</code>是<code>java.util</code>包下的一个工具类，内涵各种处理集合的静态方法。<br><code>java.util.stream.Stream#collect(java.util.stream.Collector&lt;? super T,A,R&gt;)</code>是Stream的一个函数，负责收集流。<br><code>java.util.stream.Collector</code> 是一个收集函数的接口, 声明了一个收集器的功能。<br><code>java.util.Comparators</code>则是一个收集器的工具类，内置了一系列收集器实现。     </p><h2 id="收集器的作用"><a href="#收集器的作用" class="headerlink" title="收集器的作用"></a>收集器的作用</h2><p>你可以把Java8的流看做花哨又懒惰的数据集迭代器。他们支持两种类型的操作：中间操作(e.g. filter, map)和终端操作(如count, findFirst, forEach, reduce). 中间操作可以连接起来，将一个流转换为另一个流。这些操作不会消耗流，其目的是建立一个流水线。与此相反，终端操作会消耗类，产生一个最终结果。collect就是一个归约操作，就像reduce一样可以接受各种做法作为参数，将流中的元素累积成一个汇总结果。具体的做法是通过定义新的Collector接口来定义的。</p><h2 id="预定义的收集器"><a href="#预定义的收集器" class="headerlink" title="预定义的收集器"></a>预定义的收集器</h2><p>下面简单演示基本的内置收集器。模拟数据源如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ArrayList&lt;Dish&gt; dishes = Lists.newArrayList(</span><br><span class="line">        <span class="keyword">new</span> Dish(<span class="string">&quot;pork&quot;</span>, <span class="keyword">false</span>, <span class="number">800</span>, Type.MEAT),</span><br><span class="line">        <span class="keyword">new</span> Dish(<span class="string">&quot;beef&quot;</span>, <span class="keyword">false</span>, <span class="number">700</span>, Type.MEAT),</span><br><span class="line">        <span class="keyword">new</span> Dish(<span class="string">&quot;chicken&quot;</span>, <span class="keyword">false</span>, <span class="number">400</span>, Type.MEAT),</span><br><span class="line">        <span class="keyword">new</span> Dish(<span class="string">&quot;french fries&quot;</span>, <span class="keyword">true</span>, <span class="number">530</span>, Type.OTHER),</span><br><span class="line">        <span class="keyword">new</span> Dish(<span class="string">&quot;rice&quot;</span>, <span class="keyword">true</span>, <span class="number">350</span>, Type.OTHER),</span><br><span class="line">        <span class="keyword">new</span> Dish(<span class="string">&quot;season fruit&quot;</span>, <span class="keyword">true</span>, <span class="number">120</span>, Type.OTHER),</span><br><span class="line">        <span class="keyword">new</span> Dish(<span class="string">&quot;pizza&quot;</span>, <span class="keyword">true</span>, <span class="number">550</span>, Type.OTHER),</span><br><span class="line">        <span class="keyword">new</span> Dish(<span class="string">&quot;prawns&quot;</span>, <span class="keyword">false</span>, <span class="number">300</span>, Type.FISH),</span><br><span class="line">        <span class="keyword">new</span> Dish(<span class="string">&quot;salmon&quot;</span>, <span class="keyword">false</span>, <span class="number">450</span>, Type.FISH)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="最大值，最小值，平均值"><a href="#最大值，最小值，平均值" class="headerlink" title="最大值，最小值，平均值"></a>最大值，最小值，平均值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为啥返回Optional？ 如果stream为null怎么办, 这时候Optinal就很有意义了</span></span><br><span class="line">Optional&lt;Dish&gt; mostCalorieDish = dishes.stream().max(Comparator.comparingInt(Dish::getCalories));</span><br><span class="line">Optional&lt;Dish&gt; minCalorieDish = dishes.stream().min(Comparator.comparingInt(Dish::getCalories));</span><br><span class="line">Double avgCalories = dishes.stream().collect(Collectors.averagingInt(Dish::getCalories));</span><br><span class="line"></span><br><span class="line">IntSummaryStatistics summaryStatistics = dishes.stream().collect(Collectors.summarizingInt(Dish::getCalories));</span><br><span class="line"><span class="keyword">double</span> average = summaryStatistics.getAverage();</span><br><span class="line"><span class="keyword">long</span> count = summaryStatistics.getCount();</span><br><span class="line"><span class="keyword">int</span> max = summaryStatistics.getMax();</span><br><span class="line"><span class="keyword">int</span> min = summaryStatistics.getMin();</span><br><span class="line"><span class="keyword">long</span> sum = summaryStatistics.getSum();</span><br></pre></td></tr></table></figure><p>这几个简单的统计指标都有Collectors内置的收集器函数，尤其是针对数字类型拆箱函数，将会比直接操作包装类型开销小很多。</p><h3 id="连接收集器"><a href="#连接收集器" class="headerlink" title="连接收集器"></a>连接收集器</h3><p>想要把Stream的元素拼起来？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接连接</span></span><br><span class="line">String join1 = dishes.stream().map(Dish::getName).collect(Collectors.joining());</span><br><span class="line"></span><br><span class="line"><span class="comment">//逗号</span></span><br><span class="line">String join2 = dishes.stream().map(Dish::getName).collect(Collectors.joining(<span class="string">&quot;, &quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="toList"><a href="#toList" class="headerlink" title="toList"></a>toList</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; names = dishes.stream().map(Dish::getName).collect(toList());</span><br></pre></td></tr></table></figure><p>将原来的Stream映射为一个单元素流，然后收集为List。</p><h3 id="toSet"><a href="#toSet" class="headerlink" title="toSet"></a>toSet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Type&gt; types = dishes.stream().map(Dish::getType).collect(Collectors.toSet());</span><br></pre></td></tr></table></figure><p>将Type收集为一个set，可以去重复。</p><h3 id="toMap"><a href="#toMap" class="headerlink" title="toMap"></a>toMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Type, Dish&gt; byType = dishes.stream().collect(toMap(Dish::getType, d -&gt; d));</span><br></pre></td></tr></table></figure><p>有时候可能需要将一个数组转为map，做缓存，方便多次计算获取。toMap提供的方法k和v的生成函数。(<strong>注意，上述demo是一个坑，不可以这样用！！！, 请使用toMap(Function, Function, BinaryOperator)</strong>)</p><p>上面几个几乎是最常用的收集器了，也基本够用了。但作为初学者来说，理解需要时间。想要真正明白为什么这样可以做到收集，就必须查看内部实现，可以看到，这几个收集器都是基于<code>java.util.stream.Collectors.CollectorImpl</code>，也就是开头提到过了Collector的一个实现类。后面自定义收集器会学习具体用法。</p><h3 id="自定义归约reducing"><a href="#自定义归约reducing" class="headerlink" title="自定义归约reducing"></a>自定义归约reducing</h3><p>前面几个都是reducing工厂方法定义的归约过程的特殊情况，其实可以用Collectors.reducing创建收集器。比如，求和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer totalCalories = dishes.stream().collect(reducing(<span class="number">0</span>, Dish::getCalories, (i, j) -&gt; i + j));</span><br><span class="line"><span class="comment">//使用内置函数代替箭头函数</span></span><br><span class="line">Integer totalCalories2 = dishes.stream().collect(reducing(<span class="number">0</span>, Dish::getCalories, Integer::sum));</span><br></pre></td></tr></table></figure><p>当然也可以直接使用reduce</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Integer&gt; totalCalories3 &#x3D; dishes.stream().map(Dish::getCalories).reduce(Integer::sum);</span><br></pre></td></tr></table></figure><p>虽然都可以，但<strong>考量效率</strong>的话，还是要选择下面这种</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int sum &#x3D; dishes.stream().mapToInt(Dish::getCalories).sum();</span><br></pre></td></tr></table></figure><p><strong>根据情况选择最佳方案</strong>    </p><p>上面的demo说明，函数式编程通常提供了多种方法来执行同一个操作，使用收集器collect比直接使用stream的api用起来更加复杂，好处是collect能提供更高水平的抽象和概括，也更容易重用和自定义。</p><p>我们的建议是，尽可能为手头的问题探索不同的解决方案，始终选择最专业的一个，无论从可读性还是性能来看，这一般都是最好的决定。</p><p>reducing除了接收一个初始值，还可以把第一项当作初始值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Dish&gt; mostCalorieDish = dishes.stream()</span><br><span class="line">                .collect(reducing((d1, d2) -&gt; d1.getCalories() &gt; d2.getCalories() ? d1 : d2));</span><br></pre></td></tr></table></figure><hr><p><strong>reducing</strong>    </p><p>关于reducing的用法比较复杂，目标在于把两个值合并成一个值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T, U&gt;</span><br><span class="line">    Collector&lt;T, ?, U&gt; reducing(U identity,</span><br><span class="line">                                Function&lt;? <span class="keyword">super</span> T, ? extends U&gt; mapper,</span><br><span class="line">                                BinaryOperator&lt;U&gt; op) </span><br></pre></td></tr></table></figure><p>首先看到3个泛型，    </p><ol><li><code>U</code>是返回值的类型，比如上述demo中计算热量的，<code>U</code>就是<code>Integer</code>。      </li><li>关于T，T是Stream里的元素类型。由<code>Function</code>的函数可以知道，mapper的作用就是接收一个参数T，然后返回一个结果U。对应demo中<code>Dish</code>。    </li><li>?在返回值Collector的泛型列表的中间，这个表示容器类型，一个收集器当然需要一个容器来存放数据。这里的？则表示容器类型不确定。事实上，在这里的容器就是<code>U[]</code>。    </li></ol><p>关于参数：     </p><ol><li>identity是返回值类型的初始值，可以理解为累加器的起点。</li><li>mapper则是map的作用，意义在于将Stream流转换成你想要的类型流。</li><li>op则是核心函数，作用是如何处理两个变量。其中，第一个变量是累积值，可以理解为sum，第二个变量则是下一个要计算的元素。从而实现了累加。</li></ol><p>reducing还有一个重载的方法，可以省略第一个参数，意义在于把Stream里的第一个参数当做初始值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Collector&lt;T, ?, Optional&lt;T&gt;&gt;</span><br><span class="line">    reducing(BinaryOperator&lt;T&gt; op) </span><br></pre></td></tr></table></figure><p>先看返回值的区别，T表示输入值和返回值类型，即输入值类型和输出值类型相同。还有不同的就是Optional了。这是因为没有初始值，而第一个参数有可能是null，当Stream的元素是null的时候，返回Optional就很意义了。</p><p>再看参数列表，只剩下<code>BinaryOperator</code>。BinaryOperator是一个三元组函数接口，目标是将两个同类型参数做计算后返回同类型的值。可以按照<code>1&gt;2? 1:2</code>来理解，即求两个数的最大值。求最大值是比较好理解的一种说法，你可以自定义lambda表达式来选择返回值。那么，在这里，就是接收两个Stream的元素类型T，返回T类型的返回值。用sum累加来理解也可以。</p><hr><p>上述的demo中发现reduce和collect的作用几乎一样，都是返回一个最终的结果，比如，我们可以使用reduce实现toList效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//手动实现toListCollector  --- 滥用reduce， 不可变的规约---不可以并行</span></span><br><span class="line">List&lt;Integer&gt; calories = dishes.stream().map(Dish::getCalories)</span><br><span class="line">        .reduce(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(),</span><br><span class="line">                (List&lt;Integer&gt; l, Integer e) -&gt; &#123;</span><br><span class="line">                    l.add(e);</span><br><span class="line">                    <span class="keyword">return</span> l;</span><br><span class="line">                &#125;,</span><br><span class="line">                (List&lt;Integer&gt; l1, List&lt;Integer&gt; l2) -&gt; &#123;</span><br><span class="line">                    l1.addAll(l2);</span><br><span class="line">                    <span class="keyword">return</span> l1;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br></pre></td></tr></table></figure><p>关于上述做法解释一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;U&gt; <span class="function">U <span class="title">reduce</span><span class="params">(U identity,</span></span></span><br><span class="line"><span class="function"><span class="params">                 BiFunction&lt;U, ? <span class="keyword">super</span> T, U&gt; accumulator,</span></span></span><br><span class="line"><span class="function"><span class="params">                 BinaryOperator&lt;U&gt; combiner)</span></span>;</span><br></pre></td></tr></table></figure><ol><li>U是返回值类型，这里就是List<Integer></li><li><code>BiFunction&lt;U, ? super T, U&gt; accumulator</code>是是累加器，目标在于累加值和单个元素的计算规则。这里就是List和元素做运算，最终返回List。即，添加一个元素到list。</li><li><code>BinaryOperator&lt;U&gt; combiner</code>是组合器，目标在于把两个返回值类型的变量合并成一个。这里就是两个list合并。</li></ol><p>这个解决方案有两个问题：一个是语义问题，一个是实际问题。语义问题在于，reduce方法旨在把两个值结合起来生成一个新值，它是一个不可变归约。相反，collect方法的设计就是要改变容器，从而累积要输出的结果。这意味着，上面的代码片段是在滥用reduce方法，因为它在原地改变了作为累加器的List。错误的语义来使用reduce方法还会造成一个实际问题：这个归约不能并行工作，因为由多个线程并发修改同一个数据结构可能会破坏List本身。在这种情况下，如果你想要线程安全，就需要每次分配一个新的List，而对象分配又会影响性能。这就是collect适合表达可变容器上的归约的原因，更关键的是它适合并行操作。</p><p>总结：reduce适合不可变容器归约，collect适合可变容器归约。collect适合并行。</p><hr><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>数据库中经常遇到分组求和的需求，提供了group by原语。在Java里， 如果按照指令式风格(手动写循环)的方式，将会非常繁琐，容易出错。而Java8则提供了函数式解法。</p><p>比如，将dish按照type分组。和前面的toMap类似，但分组的value却不是一个dish，而是一个List<dish>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Type, List&lt;Dish&gt;&gt; dishesByType = dishes.stream().collect(groupingBy(Dish::getType));</span><br></pre></td></tr></table></figure><p>这里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T, K&gt; Collector&lt;T, ?, Map&lt;K, List&lt;T&gt;&gt;&gt;</span><br><span class="line">    groupingBy(Function&lt;? <span class="keyword">super</span> T, ? extends K&gt; classifier)</span><br></pre></td></tr></table></figure><p>参数分类器为Function，旨在接收一个参数，转换为另一个类型。上面的demo就是把stream的元素dish转成类型Type，然后根据Type将stream分组。其内部是通过HashMap来实现分组的。<code>groupingBy(classifier, HashMap::new, downstream);</code></p><p>除了按照stream元素自身的属性函数去分组，还可以自定义分组依据，比如根据热量范围分组。</p><p>既然已经知道groupingBy的参数为Function, 并且Function的参数类型为Dish，那么可以自定义分类器为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> CaloricLevel <span class="title">getCaloricLevel</span><span class="params">(Dish d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (d.getCalories() &lt;= <span class="number">400</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> CaloricLevel.DIET;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (d.getCalories() &lt;= <span class="number">700</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> CaloricLevel.NORMAL;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> CaloricLevel.FAT;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再传入参数即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;CaloricLevel, List&lt;Dish&gt;&gt; dishesByLevel = dishes.stream()</span><br><span class="line">        .collect(groupingBy(<span class="keyword">this</span>::getCaloricLevel));</span><br></pre></td></tr></table></figure><h3 id="多级分组"><a href="#多级分组" class="headerlink" title="多级分组"></a>多级分组</h3><p>groupingBy还重载了其他几个方法，比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T, K, A, D&gt;</span><br><span class="line">    Collector&lt;T, ?, Map&lt;K, D&gt;&gt; groupingBy(Function&lt;? <span class="keyword">super</span> T, ? extends K&gt; classifier,</span><br><span class="line">                                          Collector&lt;? <span class="keyword">super</span> T, A, D&gt; downstream)</span><br></pre></td></tr></table></figure><p>泛型多的恐怖。简单的认识一下。classifier还是分类器，就是接收stream的元素类型，返回一个你想要分组的依据，也就是提供分组依据的基数的。所以<code>T</code>表示stream当前的元素类型，<code>K</code>表示分组依据的元素类型。第二个参数downstream，下游是一个收集器Collector. 这个收集器元素类型是T的子类，容器类型container为A，reduction返回值类型为D。也就是说分组的K通过分类器提供，分组的value则通过第二个参数的收集器reduce出来。正好，上个demo的源码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T, K&gt; Collector&lt;T, ?, Map&lt;K, List&lt;T&gt;&gt;&gt;</span><br><span class="line">    groupingBy(Function&lt;? <span class="keyword">super</span> T, ? extends K&gt; classifier) &#123;</span><br><span class="line">        <span class="keyword">return</span> groupingBy(classifier, toList());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>将<code>toList</code>当作reduce收集器，最终收集的结果是一个<code>List&lt;Dish&gt;</code>, 所以分组结束的value类型是<code>List&lt;Dish&gt;</code>。那么，可以类推value类型取决于reduce收集器，而reduce收集器则有千千万。比如，我想对value再次分组，分组也是一种reduce。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多级分组</span></span><br><span class="line">Map&lt;Type, Map&lt;CaloricLevel, List&lt;Dish&gt;&gt;&gt; byTypeAndCalory = dishes.stream().collect(</span><br><span class="line">    groupingBy(Dish::getType, groupingBy(<span class="keyword">this</span>::getCaloricLevel)));</span><br><span class="line">byTypeAndCalory.forEach((type, byCalory) -&gt; &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;----------------------------------&quot;</span>);</span><br><span class="line">  System.out.println(type);</span><br><span class="line">  byCalory.forEach((level, dishList) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;\t&quot;</span> + level);</span><br><span class="line">    System.out.println(<span class="string">&quot;\t\t&quot;</span> + dishList);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>验证结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------</span><br><span class="line">FISH</span><br><span class="line">DIET</span><br><span class="line">[Dish(name=prawns, vegetarian=<span class="keyword">false</span>, calories=<span class="number">300</span>, type=FISH)]</span><br><span class="line">NORMAL</span><br><span class="line">[Dish(name=salmon, vegetarian=<span class="keyword">false</span>, calories=<span class="number">450</span>, type=FISH)]</span><br><span class="line">----------------------------------</span><br><span class="line">MEAT</span><br><span class="line">FAT</span><br><span class="line">[Dish(name=pork, vegetarian=<span class="keyword">false</span>, calories=<span class="number">800</span>, type=MEAT)]</span><br><span class="line">DIET</span><br><span class="line">[Dish(name=chicken, vegetarian=<span class="keyword">false</span>, calories=<span class="number">400</span>, type=MEAT)]</span><br><span class="line">NORMAL</span><br><span class="line">[Dish(name=beef, vegetarian=<span class="keyword">false</span>, calories=<span class="number">700</span>, type=MEAT)]</span><br><span class="line">----------------------------------</span><br><span class="line">OTHER</span><br><span class="line">DIET</span><br><span class="line">[Dish(name=rice, vegetarian=<span class="keyword">true</span>, calories=<span class="number">350</span>, type=OTHER), Dish(name=season fruit, vegetarian=<span class="keyword">true</span>, calories=<span class="number">120</span>, type=OTHER)]</span><br><span class="line">NORMAL</span><br><span class="line">[Dish(name=french fries, vegetarian=<span class="keyword">true</span>, calories=<span class="number">530</span>, type=OTHER), Dish(name=pizza, vegetarian=<span class="keyword">true</span>, calories=<span class="number">550</span>, type=OTHER)]</span><br></pre></td></tr></table></figure><p>总结：groupingBy的核心参数为K生成器，V生成器。V生成器可以是任意类型的收集器Collector。</p><p>比如，V生成器可以是计算数目的, 从而实现了sql语句中的<code>select count(*) from table A group by Type</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Type, Long&gt; typesCount = dishes.stream().collect(groupingBy(Dish::getType, counting()));</span><br><span class="line">System.out.println(typesCount);</span><br><span class="line">-----------</span><br><span class="line"></span><br><span class="line">&#123;FISH=<span class="number">2</span>, MEAT=<span class="number">3</span>, OTHER=<span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><p>sql查找分组最高分<code>select MAX(id) from table A group by Type</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Type, Optional&lt;Dish&gt;&gt; mostCaloricByType = dishes.stream()</span><br><span class="line">        .collect(groupingBy(Dish::getType, maxBy(Comparator.comparingInt(Dish::getCalories))));</span><br></pre></td></tr></table></figure><p>这里的Optional没有意义，因为肯定不是null。那么只好取出来了。使用<code>collectingAndThen</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Type, Dish&gt; mostCaloricByType = dishes.stream()</span><br><span class="line">    .collect(groupingBy(Dish::getType,</span><br><span class="line">        collectingAndThen(maxBy(Comparator.comparingInt(Dish::getCalories)), Optional::get)));</span><br></pre></td></tr></table></figure><p>到这里似乎结果出来了，但IDEA不同意，编译黄色报警，按提示修改后变为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Type, Dish&gt; mostCaloricByType = dishes.stream()</span><br><span class="line">    .collect(toMap(Dish::getType, Function.identity(),</span><br><span class="line">        BinaryOperator.maxBy(comparingInt(Dish::getCalories))));</span><br></pre></td></tr></table></figure><p>是的，groupingBy就变成toMap了，key还是Type，value还是Dish，但多了一个参数！！这里回应开头的坑，开头的toMap演示是为了容易理解，真那么用则会被搞死。我们知道把一个List重组为Map必然会面临k相同的问题。当K相同时，v是覆盖还是不管呢？前面的demo的做法是当k存在时，再次插入k则直接抛出异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: Duplicate key Dish(name&#x3D;pork, vegetarian&#x3D;false, calories&#x3D;800, type&#x3D;MEAT)</span><br><span class="line">at java.util.stream.Collectors.lambda$throwingMerger$0(Collectors.java:133)</span><br></pre></td></tr></table></figure><p>正确的做法是提供处理冲突的函数，在本demo中，处理冲突的原则就是找出最大的，正好符合我们分组求最大的要求。(真的不想搞Java8函数式学习了，感觉到处都是性能问题的坑)</p><p>继续数据库sql映射，分组求和<code>select sum(score) from table a group by Type</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Type, Integer&gt; totalCaloriesByType = dishes.stream()</span><br><span class="line">    .collect(groupingBy(Dish::getType, summingInt(Dish::getCalories)));</span><br></pre></td></tr></table></figure><p>然而常常和groupingBy联合使用的另一个收集器是mapping方法生成的。这个方法接收两个参数：一个函数对流中的元素做变换，另一个则将变换的结果对象收集起来。其目的是在累加之前对每个输入元素应用一个映射函数，这样就可以让接收特定类型元素的收集器适应不同类型的对象。我么来看一个使用这个收集器的实际例子。比如你想得到，对于每种类型的Dish，菜单中都有哪些CaloricLevel。我们可以把groupingBy和mapping收集器结合起来，如下所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Type, Set&lt;CaloricLevel&gt;&gt; caloricLevelsByType = dishes.stream()</span><br><span class="line">    .collect(groupingBy(Dish::getType, mapping(<span class="keyword">this</span>::getCaloricLevel, toSet())));</span><br></pre></td></tr></table></figure><p>这里的toSet默认采用的HashSet，也可以手动指定具体实现<code>toCollection(HashSet::new)</code></p><hr><h2 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h2><p>分区是分组的特殊情况：由一个谓词(返回一个布尔值的函数)作为分类函数，它称为分区函数。分区函数返回一个布尔值，这意味着得到的分组Map的键类型是Boolean，于是它最多可以分为两组：true or false. 例如，如果你是素食者，你可能想要把菜单按照素食和非素食分开：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Boolean, List&lt;Dish&gt;&gt; partitionedMenu = dishes.stream().collect(partitioningBy(Dish::isVegetarian));</span><br></pre></td></tr></table></figure><p>当然，使用filter可以达到同样的效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Dish&gt; vegetarianDishes = dishes.stream().filter(Dish::isVegetarian).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p>分区相对来说，优势就是保存了两个副本，当你想要对一个list分类时挺有用的。同时，和groupingBy一样，partitioningBy一样有重载方法，可以指定分组value的类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Boolean, Map&lt;Type, List&lt;Dish&gt;&gt;&gt; vegetarianDishesByType = dishes.stream()</span><br><span class="line">    .collect(partitioningBy(Dish::isVegetarian, groupingBy(Dish::getType)));</span><br><span class="line">Map&lt;Boolean, Integer&gt; vegetarianDishesTotalCalories = dishes.stream()</span><br><span class="line">    .collect(partitioningBy(Dish::isVegetarian, summingInt(Dish::getCalories)));</span><br><span class="line">Map&lt;Boolean, Dish&gt; mostCaloricPartitionedByVegetarian = dishes.stream()</span><br><span class="line">    .collect(partitioningBy(Dish::isVegetarian,</span><br><span class="line">        collectingAndThen(maxBy(comparingInt(Dish::getCalories)), Optional::get)));</span><br></pre></td></tr></table></figure><p>作为使用partitioningBy收集器的最后一个例子，我们把菜单数据模型放在一边，来看一个更加复杂也更为有趣的例子：将数组分为质数和非质数。</p><p>首先，定义个质数分区函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> candidate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> candidateRoot = (<span class="keyword">int</span>) Math.sqrt((<span class="keyword">double</span>) candidate);</span><br><span class="line">    <span class="keyword">return</span> IntStream.rangeClosed(<span class="number">2</span>, candidateRoot).noneMatch(i -&gt; candidate % i == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后找出1到100的质数和非质数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Boolean, List&lt;Integer&gt;&gt; partitionPrimes = IntStream.rangeClosed(<span class="number">2</span>, <span class="number">100</span>).boxed()</span><br><span class="line">    .collect(partitioningBy(<span class="keyword">this</span>::isPrime));</span><br></pre></td></tr></table></figure><hr><p>(未完待续， 下一节自定义收集器)</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>Java8 In Action</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8 </tag>
            
            <tag> Stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gradlew-permission-denied-on-Travis-CI</title>
      <link href="2018/04/19/gradlew-permission-denied-on-Travis-CI/"/>
      <url>2018/04/19/gradlew-permission-denied-on-Travis-CI/</url>
      
        <content type="html"><![CDATA[<h2 id="问题的来源"><a href="#问题的来源" class="headerlink" title="问题的来源"></a>问题的来源</h2><p>我给一个gradlew项目添加Travis CI的时候遇到一个问题，gradlew没有可执行权限。具体错误如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;home&#x2F;travis&#x2F;build.sh: line 45: .&#x2F;gradlew: Permission denied</span><br></pre></td></tr></table></figure><p>显然，gradlew没有可执行权限。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>首先查看权限，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -la | grep gradlew</span><br></pre></td></tr></table></figure><p>或者使用git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-tree HEAD </span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100644 blob 39e33cd9155a732f8a4df3d105463af5af0051c5    build.gradle</span><br></pre></td></tr></table></figure><p>644没有执行权限。所以，添加x权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 gradlew</span><br></pre></td></tr></table></figure><p>或者用git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git update-index --chmod&#x3D;+x gradlew</span><br></pre></td></tr></table></figure><p>这时候查看git status发现有文件改变，提交就好。<br>github显示变更记录为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0  gradlew 100644 → 100755</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Gradle </tag>
            
            <tag> CI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中对List去重, Stream去重</title>
      <link href="2018/04/11/java-list-distinct/"/>
      <url>2018/04/11/java-list-distinct/</url>
      
        <content type="html"><![CDATA[<p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/distinct.png"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>当下互联网技术成熟，越来越多的趋向去中心化、分布式、流计算，使得很多以前在数据库侧做的事情放到了Java端。今天有人问道，如果数据库字段没有索引，那么应该如何根据该字段去重？大家都一致认为用Java来做，但怎么做呢？</p><a id="more"></a><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><p>忽然想起以前写过list去重的文章，找出来一看。做法就是将list中对象的hashcode和equals方法重写，然后丢到HashSet里，然后取出来。这是最初刚学Java的时候像被字典一样背写出来的答案。就比如面试，面过号称做了3年Java的人，问Set和HashMap的区别可以背出来，问如何实现就不知道了。也就是说，初学者只背特性。但真正在项目中使用的时候你需要确保一下是不是真的这样。因为背书没用，只能相信结果。你需要知道HashSet如何帮我做到去重了。换个思路，不用HashSet可以去重吗？最简单，最直接的办法不就是每次都拿着和历史数据比较，都不相同则插入队尾。而HashSet只是加速了这个过程而已。</p><p>首先，给出我们要排序的对象User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Integer id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">List&lt;User&gt; users = Lists.newArrayList(</span><br><span class="line">        <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;a&quot;</span>),</span><br><span class="line">        <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;b&quot;</span>),</span><br><span class="line">        <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">&quot;b&quot;</span>),</span><br><span class="line">        <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;a&quot;</span>));</span><br></pre></td></tr></table></figure><p>目标是取出id不重复的user，为了防止扯皮，给个规则，只要任意取出id唯一的数据即可，不用拘泥id相同时算哪个。</p><h2 id="用最直观的办法"><a href="#用最直观的办法" class="headerlink" title="用最直观的办法"></a>用最直观的办法</h2><p>这个办法就是用一个空list存放遍历后的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dis1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; result = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">      <span class="keyword">boolean</span> b = result.stream().anyMatch(u -&gt; u.getId().equals(user.getId()));</span><br><span class="line">      <span class="keyword">if</span> (!b) &#123;</span><br><span class="line">        result.add(user);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用HashSet"><a href="#用HashSet" class="headerlink" title="用HashSet"></a>用HashSet</h2><p>背过特性的都知道HashSet可以去重，那么是如何去重的呢？ 再深入一点的背过根据hashcode和equals方法。那么如何根据这两个做到的呢？没有看过源码的人是无法继续的，面试也就到此结束了。</p><p>事实上，HashSet是由HashMap来实现的(没有看过源码的时候曾经一直直观的以为HashMap的key是HashSet来实现的，恰恰相反)。这里不展开叙述，只要看HashSet的构造方法和add方法就能理解了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public HashSet() &#123;</span><br><span class="line">    map &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line">* 显然，存在则返回false，不存在的返回true</span><br><span class="line">*&#x2F;</span><br><span class="line">public boolean add(E e) &#123;</span><br><span class="line">    return map.put(e, PRESENT)&#x3D;&#x3D;null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，由此也可以看出HashSet的去重复就是根据HashMap实现的，而HashMap的实现又完全依赖于hashcode和equals方法。这下就彻底打通了，想用HashSet就必须看好自己的这两个方法。</p><p>在本题目中，要根据id去重，那么，我们的比较依据就是id了。修改如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == o) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    User user = (User) o;</span><br><span class="line">    <span class="keyword">return</span> Objects.equals(id, user.id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Objects.hash(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//hashcode</span></span><br><span class="line">result = <span class="number">31</span> * result + (element == <span class="keyword">null</span> ? <span class="number">0</span> : element.hashCode());</span><br></pre></td></tr></table></figure><p>其中， Objects调用Arrays的hashcode，内容如上述所示。乘以31等于x&lt;&lt;5-x。</p><p>最终实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void dis2() &#123;</span><br><span class="line">    Set&lt;User&gt; result &#x3D; new HashSet&lt;&gt;(users);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Java的Stream去重"><a href="#使用Java的Stream去重" class="headerlink" title="使用Java的Stream去重"></a>使用Java的Stream去重</h2><p>回到最初的问题，之所以提这个问题是因为想要将数据库侧去重拿到Java端，那么数据量可能比较大，比如10w条。对于大数据，采用Stream相关函数是最简单的了。正好Stream也提供了distinct函数。那么应该怎么用呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users.parallelStream().distinct().forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>没看到用lambda当作参数，也就是没有提供自定义条件。幸好Javadoc标注了去重标准：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Returns a stream consisting of the distinct elements</span><br><span class="line">(according to &#123;@link Object#equals(Object)&#125;) of this stream.</span><br></pre></td></tr></table></figure><p>我们知道，也必须背过这样一个准则：<strong>equals返回true的时候，hashcode的返回值必须相同</strong>. 这个在背的时候略微有些逻辑混乱，但只要了解了HashMap的实现方式就不会觉得拗口了。HashMap先根据hashcode方法定位，再比较equals方法。</p><p>所以，要使用distinct来实现去重，必须重写hashcode和equals方法，除非你使用默认的。</p><p>那么，究竟为啥要这么做？点进去看一眼实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;P_IN&gt; <span class="function">Node&lt;T&gt; <span class="title">reduce</span><span class="params">(PipelineHelper&lt;T&gt; helper, Spliterator&lt;P_IN&gt; spliterator)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// If the stream is SORTED then it should also be ORDERED so the following will also</span></span><br><span class="line">    <span class="comment">// preserve the sort order</span></span><br><span class="line">    TerminalOp&lt;T, LinkedHashSet&lt;T&gt;&gt; reduceOp</span><br><span class="line">            = ReduceOps.&lt;T, LinkedHashSet&lt;T&gt;&gt;makeRef(LinkedHashSet::<span class="keyword">new</span>, LinkedHashSet::add,</span><br><span class="line">                                                     LinkedHashSet::addAll);</span><br><span class="line">    <span class="keyword">return</span> Nodes.node(reduceOp.evaluateParallel(helper, spliterator));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部是用reduce实现的啊，想到reduce，瞬间想到一种自己实现distinctBykey的方法。我只要用reduce，计算部分就是把Stream的元素拿出来和我自己内置的一个HashMap比较，有则跳过，没有则放进去。其实，思路还是最开始的那个最直白的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dis3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    users.parallelStream().filter(distinctByKey(User::getId))</span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Predicate&lt;T&gt; <span class="title">distinctByKey</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ?&gt; keyExtractor)</span> </span>&#123;</span><br><span class="line">    Set&lt;Object&gt; seen = ConcurrentHashMap.newKeySet();</span><br><span class="line">    <span class="keyword">return</span> t -&gt; seen.add(keyExtractor.apply(t));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，如果是并行stream，则取出来的不一定是第一个，而是随机的。</p><p>上述方法是至今发现最好的，无侵入性的。但如果非要用distinct。只能像HashSet那个方法一样重写hashcode和equals。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>会不会用这些东西，你只能去自己练习过，不然到了真正要用的时候很难一下子就拿出来，不然就冒险用。而若真的想大胆使用，了解规则和实现原理也是必须的。比如，LinkedHashSet和HashSet的实现有何不同。</p><p>附上贼简单的LinkedHashSet源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2851667679971038690L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedHashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(initialCapacity, loadFactor, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedHashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(initialCapacity, .<span class="number">75f</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedHashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="number">16</span>, .<span class="number">75f</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedHashSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Math.max(<span class="number">2</span>*c.size(), <span class="number">11</span>), .<span class="number">75f</span>, <span class="keyword">true</span>);</span><br><span class="line">        addAll(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Spliterator&lt;E&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Spliterators.spliterator(<span class="keyword">this</span>, Spliterator.DISTINCT | Spliterator.ORDERED);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/LinkedHashSet.svg" alt="set的实现"></p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/ColletionAndMap.svg" alt="collection and map"></p>]]></content>
      
      
      <categories>
          
          <category> Java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8 </tag>
            
            <tag> Stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找git ignore的追踪</title>
      <link href="2018/04/08/check-git-ignore/"/>
      <url>2018/04/08/check-git-ignore/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>版本控制说简单也简单，说复杂也困难的多。作为开发者，最基础的版本管理和团队协作的功能必须掌握。而其他一些相关的信息也可以了解下。比如，这次就有同事遇到了问题。</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>在windows下，往repo里添加了一个xxx.exe文件，然后检查sourceTree却并没找到暂存的更改。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>我由于长时间不用source tree, 也不用eclipse，对这两种工具里的git操作也不太熟悉，幸好git的操作都是基于命令行的。</p><p>我先检查了<code>.gitignore</code>文件，发现里面并没有忽略所添加的<code>xxx.exe</code>。然后就很奇怪，难道会有global的ignore？果然，真有！</p><p>可以通过以下命令确定我们的被ignore的规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\workspace\learn\git-test&gt;git check-ignore -v src&#x2F;git-bash.exe</span><br><span class="line">&quot;C:\\Users\\Ryan\\Documents\\gitignore_global.txt&quot;:6:*.exe      src&#x2F;git-bash.exe</span><br></pre></td></tr></table></figure><p>从结果可以看出，果然存在一个global的配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#ignore thumbnails created by windows</span><br><span class="line">Thumbs.db</span><br><span class="line">#Ignore files build by Visual Studio</span><br><span class="line">*.obj</span><br><span class="line">*.exe</span><br><span class="line">*.pdb</span><br><span class="line">*.user</span><br><span class="line">*.aps</span><br><span class="line">*.pch</span><br><span class="line">*.vspscc</span><br><span class="line">*_i.c</span><br><span class="line">*_p.c</span><br><span class="line">*.ncb</span><br><span class="line">*.suo</span><br><span class="line">*.tlb</span><br><span class="line">*.tlh</span><br><span class="line">*.bak</span><br><span class="line">*.cache</span><br><span class="line">*.ilk</span><br><span class="line">*.log</span><br><span class="line">*.dll</span><br><span class="line">*.lib</span><br><span class="line">*.sbr</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>删除第6行的rule。于是发现可以继续追踪文件了。</p><h2 id="gitignore的意义"><a href="#gitignore的意义" class="headerlink" title="gitignore的意义"></a>gitignore的意义</h2><p>在开发过程中发现很多同事并不理解gitignore的意义所在，经常看到有同事新建了一个repo，然后并没有<code>.gitignore</code>，然后就会发现推送一堆ide或生成的配置文件到remote。或者，并没有推送过去，但当我clone下来，然后本地修改提交后发现很多不需要的文件被追踪。后来发现，原来大家习惯了source tree，然后都是提交的时候选择想要的文件，然后推送。这真是个令人不开心的发现。个人认为，这种做法对开发是很不友好的，虽然source tree的图形化界面简化了git使用。但如果忘了提交某个文件怎么办？如果不小心多添加了文件怎么办？如果一次添加了大量的文件如何排查？所以，除了要添加<code>.gitignore</code>之外，系统的学习下git的使用也是很有必要的。</p><p>比如，曾经遇到过这样的问题，由于repo最初没有gitignore，我后面加上ignore之后，发现被ignore的文件依旧会被追踪。那么，如何彻底的清除和ignore这些文件呢？</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8-如何构建一个Stream</title>
      <link href="2018/04/04/Java8-build-stream/"/>
      <url>2018/04/04/Java8-build-stream/</url>
      
        <content type="html"><![CDATA[<p>Stream的创建方式有很多种，除了最常见的集合创建，还有其他几种方式。</p><h2 id="List转Stream"><a href="#List转Stream" class="headerlink" title="List转Stream"></a>List转Stream</h2><p>List继承自Collection接口，而Collection提供了stream()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Lists.newArrayList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">Stream&lt;Integer&gt; stream = list.stream();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数组转stream"><a href="#数组转stream" class="headerlink" title="数组转stream"></a>数组转stream</h2><p>对于数组，Arrays提供了stream()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] arr = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line">Stream&lt;String&gt; stream = Arrays.stream(arr);</span><br></pre></td></tr></table></figure><h2 id="Map转stream"><a href="#Map转stream" class="headerlink" title="Map转stream"></a>Map转stream</h2><p>Map并不是一个序列，不是集合，没办法直接转成stream(). 但entrySet()是Set，可以转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; map = Maps.newHashMap();</span><br><span class="line">Stream&lt;Entry&lt;String, Object&gt;&gt; stream = map.entrySet().stream();</span><br></pre></td></tr></table></figure><h2 id="直接创建Stream"><a href="#直接创建Stream" class="headerlink" title="直接创建Stream"></a>直接创建Stream</h2><p>Stream也提供了API直接生成一个Stream，这个Stream大概可以理解成一个List。因为内部就是数组实现的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; integerStream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="读取文件的Stream"><a href="#读取文件的Stream" class="headerlink" title="读取文件的Stream"></a>读取文件的Stream</h2><p>用过Linux的就会对其命令行的管道符敬佩不已，一个管道符就可以源源不断的做处理。在Java里读取文件也可以实现类似的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">long</span> uniqueWords = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">try</span> (Stream&lt;String&gt; lines = Files.lines(Paths.get(<span class="string">&quot;data.txt&quot;</span>), Charset.defaultCharset())) &#123;</span><br><span class="line">    uniqueWords = lines.flatMap(l -&gt; Arrays.stream(l.split(<span class="string">&quot; &quot;</span>)))</span><br><span class="line">            .distinct()</span><br><span class="line">            .count();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过函数来生成无限流"><a href="#通过函数来生成无限流" class="headerlink" title="通过函数来生成无限流"></a>通过函数来生成无限流</h2><p>Stream提供了iterate来生成一个无限序列，一个基于初始值的无限序列。可以用lambda设置序列的生成规则，比如每次增加2.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Stream.iterate(<span class="number">0</span>, n -&gt; n + <span class="number">2</span>)</span><br><span class="line">      .limit(<span class="number">10</span>)</span><br><span class="line">      .forEach(System.out::println);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再比如，斐波那契数列（Fibonacci sequence）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Stream.iterate(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, t -&gt; <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;t[<span class="number">1</span>], t[<span class="number">0</span>] + t[<span class="number">1</span>]&#125;)</span><br><span class="line">        .limit(<span class="number">20</span>)</span><br><span class="line">        .map(t -&gt; t[<span class="number">0</span>])</span><br><span class="line">        .forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>Stream还提供了另一个generate方法来生成序列。接收一个用户指定的生成序列函数IntSupplier.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">IntSupplier fib = <span class="keyword">new</span> IntSupplier() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> previous = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> current = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAsInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> oldPrevious = <span class="keyword">this</span>.previous;</span><br><span class="line">        <span class="keyword">int</span> nextValue = <span class="keyword">this</span>.previous + <span class="keyword">this</span>.current;</span><br><span class="line">        <span class="keyword">this</span>.previous = <span class="keyword">this</span>.current;</span><br><span class="line">        <span class="keyword">this</span>.current = nextValue;</span><br><span class="line">        <span class="keyword">return</span> oldPrevious;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">IntStream.generate(fib).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8 </tag>
            
            <tag> Stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8-Stream之数值流</title>
      <link href="2018/04/03/java8-number-stream/"/>
      <url>2018/04/03/java8-number-stream/</url>
      
        <content type="html"><![CDATA[<p>在Stream里元素都是对象，那么，当我们操作一个数字流的时候就不得不考虑一个问题，拆箱和装箱。虽然自动拆箱不需要我们处理，但依旧有隐含的成本在里面。Java8引入了3个原始类型特化流接口来解决这个问题：IntStream,DoubleStream,LongStream, 分别将流中的元素特化为int、long、doub，从而避免了暗含的装箱成本。每个接口都带来了进行常用数值归约的新方法，比如求和sum，求最大值max。此外还有必要时再把他们转换回对象流的方法。这些特化的原因就是装箱造成的复杂性–类似int和Integer之间的效率差异。</p><a id="more"></a><h2 id="将对象流映射为数值流"><a href="#将对象流映射为数值流" class="headerlink" title="将对象流映射为数值流"></a>将对象流映射为数值流</h2><p>常用方法为<code>mapToInt</code>, <code>mapToDouble</code>, <code>mapToLong</code>，这些方法和map相同，只是它们返回一个特化流，而不是Stream<T>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testToInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;Dish&gt; dishes = Lists.newArrayList(</span><br><span class="line">            <span class="keyword">new</span> Dish(<span class="string">&quot;pork&quot;</span>, <span class="keyword">false</span>, <span class="number">800</span>, Type.MEAT),</span><br><span class="line">            <span class="keyword">new</span> Dish(<span class="string">&quot;beef&quot;</span>, <span class="keyword">false</span>, <span class="number">700</span>, Type.MEAT),</span><br><span class="line">            <span class="keyword">new</span> Dish(<span class="string">&quot;chicken&quot;</span>, <span class="keyword">false</span>, <span class="number">400</span>, Type.MEAT),</span><br><span class="line">            <span class="keyword">new</span> Dish(<span class="string">&quot;french fries&quot;</span>, <span class="keyword">true</span>, <span class="number">530</span>, Type.OTHER),</span><br><span class="line">            <span class="keyword">new</span> Dish(<span class="string">&quot;rice&quot;</span>, <span class="keyword">true</span>, <span class="number">350</span>, Type.OTHER),</span><br><span class="line">            <span class="keyword">new</span> Dish(<span class="string">&quot;season fruit&quot;</span>, <span class="keyword">true</span>, <span class="number">120</span>, Type.OTHER),</span><br><span class="line">            <span class="keyword">new</span> Dish(<span class="string">&quot;pizza&quot;</span>, <span class="keyword">true</span>, <span class="number">550</span>, Type.OTHER),</span><br><span class="line">            <span class="keyword">new</span> Dish(<span class="string">&quot;prawns&quot;</span>, <span class="keyword">false</span>, <span class="number">300</span>, Type.FISH),</span><br><span class="line">            <span class="keyword">new</span> Dish(<span class="string">&quot;salmon&quot;</span>, <span class="keyword">false</span>, <span class="number">450</span>, Type.FISH)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    IntStream intStream = dishes.stream()</span><br><span class="line">            .mapToInt(Dish::getCalories);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="将数值流转回对象流"><a href="#将数值流转回对象流" class="headerlink" title="将数值流转回对象流"></a>将数值流转回对象流</h2><p>我们虽然会使用数值流进行计算，但经常需要回归到对象，那么就需要将int stream装箱为Integer stream. 可以使用boxed()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; boxed = intStream.boxed();</span><br></pre></td></tr></table></figure><h2 id="默认值OptinalInt"><a href="#默认值OptinalInt" class="headerlink" title="默认值OptinalInt"></a>默认值OptinalInt</h2><p>由于数值流经常会有默认值，比如默认为0。数值特化流的终端操作会返回一个OptinalXXX对象而不是数值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">OptionalInt optionalInt = dishes.stream()</span><br><span class="line">                .mapToInt(Dish::getCalories)</span><br><span class="line">                .max();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> max = optionalInt.orElse(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h2 id="生成一个数值范围流"><a href="#生成一个数值范围流" class="headerlink" title="生成一个数值范围流"></a>生成一个数值范围流</h2><p>有时候需要生成一个数值范围，比如1到30. 可以使用for循环，也可以直接使用数值流。</p><p>创建一个包含两端的数值流，比如1到10，包含10：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IntStream intStream = IntStream.rangeClosed(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建一个不包含结尾的数值流，比如1到9：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IntStream range = IntStream.range(<span class="number">1</span>, <span class="number">9</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="注"><a href="#注" class="headerlink" title="注"></a>注</h2><p>测试demo: <a href="https://github.com/Ryan-Miao/someTest/blob/master/src/main/java/com/test/java8/streams/NumStreamExample.java">https://github.com/Ryan-Miao/someTest/blob/master/src/main/java/com/test/java8/streams/NumStreamExample.java</a></p><p>以上出自《Java8 In Action》</p>]]></content>
      
      
      <categories>
          
          <category> Java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8 </tag>
            
            <tag> Stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8学习(4)-Stream流</title>
      <link href="2018/04/02/java8-stream1/"/>
      <url>2018/04/02/java8-stream1/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#stream%E5%92%8Ccollection%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88">Stream和Collection的区别是什么</a><ul><li><a href="#stream%E6%98%AF%E5%86%85%E9%83%A8%E8%BF%AD%E4%BB%A3">Stream是内部迭代</a></li></ul></li><li><a href="#%E4%BD%BF%E7%94%A8%E6%B5%81stream%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">使用流Stream的注意事项</a></li><li><a href="#%E6%B5%81%E6%93%8D%E4%BD%9C">流操作</a><ul><li><a href="#%E4%B8%AD%E9%97%B4%E6%93%8D%E4%BD%9C">中间操作</a></li><li><a href="#%E7%BB%88%E7%AB%AF%E6%93%8D%E4%BD%9C">终端操作</a></li></ul></li><li><a href="#%E4%BD%BF%E7%94%A8%E6%B5%81">使用流</a><ul><li><a href="#%E6%9C%80%E9%95%BF%E7%94%A8%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E7%94%A8%E6%B3%95">最长用，最简单的用法</a></li><li><a href="#%E8%B0%93%E8%AF%8D%E7%AD%9B%E9%80%89filter">谓词筛选filter</a></li><li><a href="#%E5%8E%BB%E9%87%8D%E5%A4%8Ddistinct">去重复distinct</a></li><li><a href="#%E6%88%AA%E7%9F%AD%E6%B5%81limit">截短流limit</a></li><li><a href="#%E8%B7%B3%E8%BF%87%E5%85%83%E7%B4%A0skip">跳过元素skip</a></li><li><a href="#%E6%98%A0%E5%B0%84map">映射map</a></li><li><a href="#%E7%9E%A5%E4%B8%80%E7%9C%BCpeek">瞥一眼Peek</a></li><li><a href="#%E6%B5%81%E7%9A%84%E6%89%81%E5%B9%B3%E5%8C%96faltmap">流的扁平化faltMap</a></li></ul></li><li><a href="#%E6%9F%A5%E6%89%BE%E5%92%8C%E5%8C%B9%E9%85%8D">查找和匹配</a></li><li><a href="#%E5%BD%92%E7%BA%A6reduce">归约Reduce</a></li><li><a href="#%E5%BD%92%E7%BA%A6%E7%9A%84%E4%BC%98%E5%8A%BF%E5%92%8C%E5%B9%B6%E8%A1%8C%E5%8C%96">归约的优势和并行化</a></li><li><a href="#%E6%B5%81%E6%93%8D%E4%BD%9C%E7%9A%84%E7%8A%B6%E6%80%81%E6%97%A0%E7%8A%B6%E6%80%81%E5%92%8C%E6%9C%89%E7%8A%B6%E6%80%81">流操作的状态：无状态和有状态</a></li><li><a href="#%E6%B3%A8">注</a></li></ul><h2 id="Stream和Collection的区别是什么"><a href="#Stream和Collection的区别是什么" class="headerlink" title="Stream和Collection的区别是什么"></a>Stream和Collection的区别是什么</h2><p>流和集合的区别是什么？   </p><blockquote><p>粗略地说, 集合和流之间的差异就在于<strong>什么时候</strong>进行计算。集合是一个内存中的数据结构，它包含数据结构中目前所有的值–集合中的每个元素都得先计算出来才能添加到内存里。(你可以往集合里加东西或者删东西，但是不管什么时候，集合中的每个元素都是放在内存里的，元素都得计算出来才能成为集合的一部分。)</p></blockquote><blockquote><p>相比之下，流则是在概念上固定的数据结构(你不能添加或者删除元素)，其元素则是<strong>按需计算</strong>的。这对编程有很大的好处。用户仅仅从流中提取需要的值，而这些值–在用户看不见的地方–只会<strong>按需</strong>生成。这是一种生产者 - 消费者的关系。从另一个角度来说，流就像一个延迟创建的集合：只有在消费者要求的时候才会计算值。</p></blockquote><h3 id="Stream是内部迭代"><a href="#Stream是内部迭代" class="headerlink" title="Stream是内部迭代"></a>Stream是内部迭代</h3><p>一个明显的区别是迭代方式不同。Collection需要手动<code>for-each</code>或者使用<code>Iterator</code>在外部迭代。而Stream则开启后可以直接对单个元素进行操作，内部帮你做好了迭代工作。</p><p>内部迭代的好处是可一个更好的并行。自己手写迭代需要处理好每次迭代的内容。为了提高执行效率，也许会把多个处理逻辑写到同一个遍历里。比如，有同事看到从scala转过来的同事的代码，说他写的代码经常重复好多次。scala是函数式语言，和流天然集成。而我们惯性的做法，还是把一堆操作逻辑写到同一个循环体中，来满足自己对所谓的性能要求的洁癖。这常常会使得可读性变差。很厌烦阅读超过100行的代码，尤其代码还有首尾同步处理的逻辑(for, try-catch)，很容易出错。多写一次循环来做这些事情，心理又过不去。</p><p>Stream开启流之后，系统内部会分析对元素的操作是否可以并行，然后合并执行。也就是说，看起来，自己<code>filter-map-filter-map-group</code>很多次，但真实执行的时候并不是遍历了很多次。至于到底遍历了多少次。这是一个好问题，后面会说明这个问题。</p><a id="more"></a><h2 id="使用流Stream的注意事项"><a href="#使用流Stream的注意事项" class="headerlink" title="使用流Stream的注意事项"></a>使用流Stream的注意事项</h2><p>流只能消费一次。比如，<code>foreach</code>只能遍历一次stream。再次则会抛异常。</p><hr><h2 id="流操作"><a href="#流操作" class="headerlink" title="流操作"></a>流操作</h2><p>针对流的操作方式两种：   </p><h3 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h3><p>可以连接起来的流操作叫做中间操作。诸如<code>filter</code>或<code>map</code>等中间操作会返回另一个流。这让多个操作可以连接起来形成一个查询。但是，除非调用一个终端操作，比如<code>collect</code>,<code>foreach</code>, 否则中间操作不会执行—-它们很懒。这是因为中间操作一般可以合并起来，在终端操作时一次性全部处理。    </p><h3 id="终端操作"><a href="#终端操作" class="headerlink" title="终端操作"></a>终端操作</h3><p>关闭流的操作叫做终端操作。终端操作会从流的流水线生成结果。</p><h2 id="使用流"><a href="#使用流" class="headerlink" title="使用流"></a>使用流</h2><p>本文demo源码： <a href="https://github.com/Ryan-Miao/someTest/tree/master/src/main/java/com/test/java8/streams">https://github.com/Ryan-Miao/someTest/tree/master/src/main/java/com/test/java8/streams</a></p><p>新建一个Entity作为基本元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.java8.streams.entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Ryan Miao on 12/11/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dish</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> vegetarian;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Type type;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dish</span><span class="params">(String name, <span class="keyword">boolean</span> vegetarian, <span class="keyword">int</span> calories, Type type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.vegetarian = vegetarian;</span><br><span class="line">        <span class="keyword">this</span>.calories = calories;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isVegetarian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> vegetarian;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCalories</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> calories;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Type <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Type</span></span>&#123;</span><br><span class="line">        MEAT, FISH, OTHER</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="最常用，最简单的用法"><a href="#最常用，最简单的用法" class="headerlink" title="最常用，最简单的用法"></a>最常用，最简单的用法</h3><p>Stream API支持许多操作，这些操作能让你快速完成复杂的数据查询，比如筛选、切片、映射、查找、匹配和归约。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.java8.streams;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</span><br><span class="line"><span class="keyword">import</span> com.test.java8.streams.entity.Dish;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.toList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Ryan Miao on 12/11/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Dish&gt; menu;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        menu = Lists.newArrayList(</span><br><span class="line">                <span class="keyword">new</span> Dish(<span class="string">&quot;pork&quot;</span>, <span class="keyword">false</span>, <span class="number">800</span>, Dish.Type.MEAT),</span><br><span class="line">                <span class="keyword">new</span> Dish(<span class="string">&quot;beef&quot;</span>, <span class="keyword">false</span>, <span class="number">700</span>, Dish.Type.MEAT),</span><br><span class="line">                <span class="keyword">new</span> Dish(<span class="string">&quot;chicken&quot;</span>, <span class="keyword">false</span>, <span class="number">400</span>, Dish.Type.MEAT),</span><br><span class="line">                <span class="keyword">new</span> Dish(<span class="string">&quot;french fries&quot;</span>, <span class="keyword">true</span>, <span class="number">530</span>, Dish.Type.OTHER),</span><br><span class="line">                <span class="keyword">new</span> Dish(<span class="string">&quot;rice&quot;</span>, <span class="keyword">true</span>, <span class="number">350</span>, Dish.Type.OTHER),</span><br><span class="line">                <span class="keyword">new</span> Dish(<span class="string">&quot;season fruit&quot;</span>, <span class="keyword">true</span>, <span class="number">120</span>, Dish.Type.OTHER),</span><br><span class="line">                <span class="keyword">new</span> Dish(<span class="string">&quot;pizza&quot;</span>, <span class="keyword">true</span>, <span class="number">550</span>, Dish.Type.OTHER),</span><br><span class="line">                <span class="keyword">new</span> Dish(<span class="string">&quot;prawns&quot;</span>, <span class="keyword">false</span>, <span class="number">300</span>, Dish.Type.FISH),</span><br><span class="line">                <span class="keyword">new</span> Dish(<span class="string">&quot;salmon&quot;</span>, <span class="keyword">false</span>, <span class="number">450</span>, Dish.Type.FISH)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; threeHighCaloricDishNames = menu.stream()</span><br><span class="line">                .filter(dish -&gt; dish.getCalories() &gt; <span class="number">300</span>)</span><br><span class="line">                .map(Dish::getName)</span><br><span class="line">                .limit(<span class="number">3</span>)</span><br><span class="line">                .collect(toList());</span><br><span class="line"></span><br><span class="line">        System.out.println(threeHighCaloricDishNames);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><code>stream()</code>将一个集合转换成一个流，流和list一样，都是单元素的集合体。</li><li><code>filter()</code>接受一个布尔值lambda，即一个谓词。当表达式的value是<code>true</code>的时候，该元素通过筛选。</li><li><code>map()</code>接受一个转换lambda，将一个元素class映射成另一个class。</li><li><code>collect</code>收集器，汇总结果，触发流，终端操作。</li></ol><p><img src="http://images2017.cnblogs.com/blog/686418/201712/686418-20171211150534087-1311515892.png"></p><h3 id="谓词筛选filter"><a href="#谓词筛选filter" class="headerlink" title="谓词筛选filter"></a>谓词筛选filter</h3><p>谓词是一个返回boolean的函数，也就是条件，通过这个条件进行筛选。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFilterMapLimit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Entity&gt; entities = Lists.newArrayList(<span class="keyword">new</span> Entity(<span class="number">100</span>), <span class="keyword">new</span> Entity(<span class="number">12</span>), <span class="keyword">new</span> Entity(<span class="number">33</span>), <span class="keyword">new</span> Entity(<span class="number">41</span>));</span><br><span class="line">    List&lt;Integer&gt; collect = entities.stream()</span><br><span class="line">            .filter(entity -&gt; entity.getId() &lt; <span class="number">100</span>)</span><br><span class="line">            .map(Entity::getId)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    System.out.println(collect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，filter的参数就是一个谓词，配合filter，可以筛选结果，只有返回值是true的item会通过。</p><h3 id="去重复distinct"><a href="#去重复distinct" class="headerlink" title="去重复distinct"></a>去重复distinct</h3><p>distinct()</p><h3 id="截短流limit"><a href="#截短流limit" class="headerlink" title="截短流limit"></a>截短流limit</h3><p>limit(n)</p><h3 id="跳过元素skip"><a href="#跳过元素skip" class="headerlink" title="跳过元素skip"></a>跳过元素skip</h3><p>skip(n)。 通过limit(n)形成互补关系。</p><h3 id="映射map"><a href="#映射map" class="headerlink" title="映射map"></a>映射map</h3><p>map， stream的核心操作。接收一个参数，用来把一个对象转换为另一个。demo同上。下面看具体需求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a stream consisting of the results of applying the given</span></span><br><span class="line"><span class="comment"> * function to the elements of this stream.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This is an &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;intermediate</span></span><br><span class="line"><span class="comment"> * operation&lt;/a&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;R&gt; The element type of the new stream</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mapper a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span></span><br><span class="line"><span class="comment"> *               &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> *               function to apply to each element</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the new stream</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&lt;R&gt; <span class="function">Stream&lt;R&gt; <span class="title">map</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends R&gt; mapper)</span></span>;</span><br></pre></td></tr></table></figure><p>接收一个Function函数，然后返回Stream. 而Function在前面已经介绍过了。我们看核心的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Represents a function that accepts one argument and produces a result.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html&quot;&gt;functional interface&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * whose functional method is &#123;<span class="doctag">@link</span> #apply(Object)&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; the type of the input to the function</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;R&gt; the type of the result of the function</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Applies this function to the given argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t the function argument</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the function result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Function函数的功能就是把参数转换成另一个类型的对象，返回。也就是<code>a -&gt; &#123;return b;&#125;</code>。</p><h3 id="瞥一眼Peek"><a href="#瞥一眼Peek" class="headerlink" title="瞥一眼Peek"></a>瞥一眼Peek</h3><p>上面map的需求特别多，但有时候我并不想返回另一个对象，我只是想要把原来的对象加工一个下，还是返回原来的对象。用map也是可以的，只要返回同一个对象就行。但IDEA会推荐用<code>peek()</code>。</p><p>比如，我想把list的user全部取出来，把updateDate更新为当前时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPeek</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> List&lt;Integer&gt; list = Lists.newArrayList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Entity&gt; collect = list.stream()</span><br><span class="line">            .map(Entity::<span class="keyword">new</span>)</span><br><span class="line">            .peek(e -&gt; e.setUpdateTime(<span class="keyword">new</span> Date()))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    System.out.println(collect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码里是这样写的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a stream consisting of the elements of this stream, additionally</span></span><br><span class="line"><span class="comment"> * performing the provided action on each element as elements are consumed</span></span><br><span class="line"><span class="comment"> * from the resulting stream.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This is an &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;intermediate</span></span><br><span class="line"><span class="comment"> * operation&lt;/a&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;For parallel stream pipelines, the action may be called at</span></span><br><span class="line"><span class="comment"> * whatever time and in whatever thread the element is made available by the</span></span><br><span class="line"><span class="comment"> * upstream operation.  If the action modifies shared state,</span></span><br><span class="line"><span class="comment"> * it is responsible for providing the required synchronization.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span> This method exists mainly to support debugging, where you want</span></span><br><span class="line"><span class="comment"> * to see the elements as they flow past a certain point in a pipeline:</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> *     Stream.of(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)</span></span><br><span class="line"><span class="comment"> *         .filter(e -&gt; e.length() &gt; 3)</span></span><br><span class="line"><span class="comment"> *         .peek(e -&gt; System.out.println(&quot;Filtered value: &quot; + e))</span></span><br><span class="line"><span class="comment"> *         .map(String::toUpperCase)</span></span><br><span class="line"><span class="comment"> *         .peek(e -&gt; System.out.println(&quot;Mapped value: &quot; + e))</span></span><br><span class="line"><span class="comment"> *         .collect(Collectors.toList());</span></span><br><span class="line"><span class="comment"> * &#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> action a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;</span></span><br><span class="line"><span class="comment"> *                 non-interfering&lt;/a&gt; action to perform on the elements as</span></span><br><span class="line"><span class="comment"> *                 they are consumed from the stream</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the new stream</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">peek</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>而Consumer同样也在之前出现过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs this operation on the given argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t the input argument</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，peek()的本意是将对象取出来，消一遍，并不是像我的说的那样返回原对象，因为参数并不是Function， 而是Consumer。我之所以这么说是因为Function也可以做到这个功能，只要将返回值变为当前对象即可。而peek里，我们可以修改当前对象的属性，也是会生效的。</p><h3 id="流的扁平化faltMap"><a href="#流的扁平化faltMap" class="headerlink" title="流的扁平化faltMap"></a>流的扁平化faltMap</h3><p>我们前面讲的函数都是处理一个序列，一个list，一个Stream里的数据。如果一个Stream的元素也是另一个stream呢？我还想把这个Stream的元素的stream打散，最终输出一个stream。比如下面这个例子。统计单词列表中出现的字母。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> List&lt;String&gt; words = Lists.newArrayList( <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;worlds&quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;String[]&gt; rs = words.stream()</span><br><span class="line">        .map(w -&gt; w.split(<span class="string">&quot;&quot;</span>))</span><br><span class="line">        .distinct()</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">rs.forEach(e -&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (String i : e) &#123;</span><br><span class="line">        System.out.print(i + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打印的结果为：   </p><blockquote><p>H,e,l,l,o,<br>w,o,r,l,d,s,</p></blockquote><p>显然，目标没达到。map之后的stream已经变成<code>Stream&lt;Stream&lt;String&gt;&gt;</code>。应该如何把里面的Stream打开，最后拼接起来呢。最直观的想法就是用一个新的list，将我们刚才foreach打印的步骤中的操作变成插入list。但这显然不是函数式编程。</p><p><code>flatMap</code>可以接收一个参数，返回一个流，这个流可以拼接到最外层的流。说的太啰嗦，看具体用法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> List&lt;String&gt; words = Lists.newArrayList( <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;worlds&quot;</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; collect = words.stream()</span><br><span class="line">            .map(w -&gt; w.split(<span class="string">&quot;&quot;</span>))</span><br><span class="line">            .flatMap(a -&gt; Arrays.stream(a))</span><br><span class="line">            .distinct()</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    System.out.println(collect);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>第一步，用map将一个String对象映射成String[]数组。</li><li>第二步，将这个返回的对象映射成Stream，这里的数组转Stream即<code>Arrays::stream</code>.</li><li>第三步，用flatMap</li></ol><p>以上可以合并为一步： <code>.flatMap(w -&gt; Arrays.stream(w.split(&quot;&quot;)))</code></p><p>最终打印结果：</p><blockquote><p>[H, e, l, o, w, r, d, s]</p></blockquote><h2 id="查找和匹配"><a href="#查找和匹配" class="headerlink" title="查找和匹配"></a>查找和匹配</h2><p>另一个常见的数据处理套路是看看数据集中的某些元素是否匹配一个给定的属性。Stream API通过allMatch, anyMatch,noneMatch,findFirst,findAny方法提供了这样的工具。</p><p>比如，找到任何一个匹配条件的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">anyMatchTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> List&lt;Entity&gt; entities = Lists.newArrayList(<span class="keyword">new</span> Entity(<span class="number">101</span>),</span><br><span class="line">            <span class="keyword">new</span> Entity(<span class="number">12</span>), <span class="keyword">new</span> Entity(<span class="number">33</span>), <span class="keyword">new</span> Entity(<span class="number">42</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> b = entities.stream().anyMatch(e -&gt; &#123;</span><br><span class="line">        System.out.println(e.getId());</span><br><span class="line">        <span class="keyword">return</span> e.getId() % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (b) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;有偶数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>101<br>12<br>有偶数</p></blockquote><p>上述只是确定下是不是存在，在很多情况下这就够了。至于FindAny和FindFirst则是找到后返回，目前还没遇到使用场景。</p><h2 id="归约Reduce"><a href="#归约Reduce" class="headerlink" title="归约Reduce"></a>归约Reduce</h2><p>Google搜索提出的Map Reduce模型，Hadoop提供了经典的开源实现。在Java中，我们也可以手动实现这个。</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/map-reduce.jpg"></p><p>reduce的操作在函数式编程中很常见，作用是将一个历史值与当前值做处理。比如求和，求最大值。</p><p>求和的时候，我们会将每个元素累加给sum。用reduce即可实现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 没有初始值，返回Optional</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    OptionalInt rs = IntStream.rangeClosed(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">            .reduce((left, right) -&gt; &#123;</span><br><span class="line">                System.out.println(left + <span class="string">&quot;\t&quot;</span> + right);</span><br><span class="line">                <span class="keyword">return</span> left + right;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rs.isPresent())&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line">        System.out.println(rs.getAsInt());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">12</span><br><span class="line">33</span><br><span class="line">64</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">485199</span><br><span class="line">4950100</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">5050</span><br></pre></td></tr></table></figure><p>给一个初始值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int rs &#x3D; IntStream.rangeClosed(1, 100)</span><br><span class="line">                .reduce(10, (a, b) -&gt; a + b);</span><br></pre></td></tr></table></figure><p>同样，可以用来求最大值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; nums = Lists.newArrayList(<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">5</span>);</span><br><span class="line">Optional&lt;Integer&gt; max = nums.stream().reduce((a, b) -&gt; b &gt; a ? b : a);</span><br></pre></td></tr></table></figure><p>这里的比较函数恰好是Integer的一个方法，为增强可读性，可以替换为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums.stream().reduce(Integer::max).ifPresent(System.out::println);</span><br></pre></td></tr></table></figure><p>接下来，回归我们最初的目标，实现伟大的Map-Reduce模型。比如，想要知道有多少个菜(一个dish list)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mapReduce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;Dish&gt; dishes = Lists.newArrayList(</span><br><span class="line">            <span class="keyword">new</span> Dish(<span class="string">&quot;pork&quot;</span>, <span class="keyword">false</span>, <span class="number">800</span>, Type.MEAT),</span><br><span class="line">            <span class="keyword">new</span> Dish(<span class="string">&quot;beef&quot;</span>, <span class="keyword">false</span>, <span class="number">700</span>, Type.MEAT),</span><br><span class="line">            <span class="keyword">new</span> Dish(<span class="string">&quot;chicken&quot;</span>, <span class="keyword">false</span>, <span class="number">400</span>, Type.MEAT),</span><br><span class="line">            <span class="keyword">new</span> Dish(<span class="string">&quot;french fries&quot;</span>, <span class="keyword">true</span>, <span class="number">530</span>, Type.OTHER),</span><br><span class="line">            <span class="keyword">new</span> Dish(<span class="string">&quot;rice&quot;</span>, <span class="keyword">true</span>, <span class="number">350</span>, Type.OTHER),</span><br><span class="line">            <span class="keyword">new</span> Dish(<span class="string">&quot;season fruit&quot;</span>, <span class="keyword">true</span>, <span class="number">120</span>, Type.OTHER),</span><br><span class="line">            <span class="keyword">new</span> Dish(<span class="string">&quot;pizza&quot;</span>, <span class="keyword">true</span>, <span class="number">550</span>, Type.OTHER),</span><br><span class="line">            <span class="keyword">new</span> Dish(<span class="string">&quot;prawns&quot;</span>, <span class="keyword">false</span>, <span class="number">300</span>, Type.FISH),</span><br><span class="line">            <span class="keyword">new</span> Dish(<span class="string">&quot;salmon&quot;</span>, <span class="keyword">false</span>, <span class="number">450</span>, Type.FISH)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    Integer sum = dishes.stream()</span><br><span class="line">            .map(d -&gt; <span class="number">1</span>)</span><br><span class="line">            .reduce(<span class="number">0</span>, (a, b) -&gt; a + b);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归约的优势和并行化"><a href="#归约的优势和并行化" class="headerlink" title="归约的优势和并行化"></a>归约的优势和并行化</h2><blockquote><p>相比于用foreach逐步迭代求和，使用reduce的好处在于，这里的迭代被内部迭代抽象掉了，这让内部实现得以选择并行执行reduce操作。而迭代式求和例子要更新共享变量sum，这不是那么容易并行化的。如果你加入了同步，很可能会发现线程竞争抵消了并行本应带来的性能提升！这种计算的并行化需要另一种方法：将输入分块，分块求和，最后再合并起来。但这样的话代码看起来就完全不一样了。后面会用分支/合并框架来做这件事。但现在重要的是要认识到，可变的累加模式对于并行化来说是死路一条。你需要一种新的模式，这正是reduce所提供的。传递给reduce的lambda不能更改状态(如实例变量)，而且操作必须满足结合律才可以按任意顺序执行。</p></blockquote><h2 id="流操作的状态：无状态和有状态"><a href="#流操作的状态：无状态和有状态" class="headerlink" title="流操作的状态：无状态和有状态"></a>流操作的状态：无状态和有状态</h2><p>你已经看到了很多的流操作，乍一看流操作简直是灵丹妙药，而且只要在从集合生成流的时候把Stream换成parallelStream就可以实现并行。但这些操作的特性并不相同。他们需要操作的内部状态还是有些问题的。</p><p>诸如map和filter等操作会从输入流中获取每一个元素，并在输出流中得到0或1个结果。这些操作一般是<strong>无状态</strong>的：他们没有内部状态(假设用户提供的lambda或者方法引用没有内部可变状态)。</p><p>但诸如reduce、sum、max等操作需要内部状态来累积结果。在前面的情况下，内部状态很小。在我们的例子里就是一个int或者double。不管流中有多少元素要处理，内部状态都是有界的。</p><p>相反，诸如sort或distinct等操作一开始都和filter和map差不多–都是接受一个流，再生成一个流(中间操作), 但有一个关键的区别。从流中排序和删除重复项都需要知道先前的历史。例如，排序要求所有元素都放入缓冲区后才能给输出流加入一个项目，这一操作的存储要求是无界的。要是流比较大或是无限的，就可能会有问题(把质数流倒序会做什么呢？它应当返回最大的质数，但数学告诉我们他不存在)。我们把这些操作叫做<strong>有状态</strong>操作。</p><h2 id="注"><a href="#注" class="headerlink" title="注"></a>注</h2><p>以上内容均来自《Java8 In Action》。</p>]]></content>
      
      
      <categories>
          
          <category> Java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8 </tag>
            
            <tag> Stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo学习1-Hello world</title>
      <link href="2018/03/24/hello-dubbo/"/>
      <url>2018/03/24/hello-dubbo/</url>
      
        <content type="html"><![CDATA[<p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/dubbo.jpg"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>互联网技术到今天已经非常成熟和稳定了，其中为了解决高并发、大规模的服务请求，出现了微服务、RPC这样的分布式架构。今天就从头开始学习RPC框架dubbo。</p><h2 id="为什么要学Dubbo"><a href="#为什么要学Dubbo" class="headerlink" title="为什么要学Dubbo"></a>为什么要学Dubbo</h2><p>关于分布式的解决方案有很多，光RPC框架就有很多种，甚至有人<a href="http://colobu.com/2018/01/31/benchmark-2018-spring-of-popular-rpc-frameworks/">比较了RPC框架性能</a>, 结果显示dubbo垫底，以及spring cloud这种推崇Rest Http请求代替RPC, 那为什么还要学习RPC?</p><p>首先，RPC框架的发展并没有因为Spring Cloud的出现而变的衰弱。其次，历史悠久的市场上大部分公司都会使用RPC来解决分布式问题。</p><p>那么，为啥要选Dubbo? 只能说Dubbo在国内的流行程度远超过gRPC、thrift等，而且中文资料很多，在国内的技术圈混则必须要掌握这个技能。当然，缺点也不少，比如由于官方很长时间没有维护导致Dubbo各种落后。令人惊喜的是，Alibaba已经开始专注开源项目了，dubbo重新开启维护，进入Apache Incubating。然而，很多人也因此选择了其他RPC来代替dubbo。</p><p>Dubbo发音问题： da bou; <code>|ˈdʌbəʊ| </code></p><h2 id="什么是RPC"><a href="#什么是RPC" class="headerlink" title="什么是RPC"></a>什么是RPC</h2><p>RPC(Remote Procedure Call)表示远程过程调用。</p><p>两台机器A和B。A部署了首页的服务，想要获取订单信息，订单服务部署在机器B上。这样，A通过远程调用B上的函数(function)来得到信息就属于远程过程调用。</p><p>以下来自<br><a href="https://www.zhihu.com/question/25536695/answer/36197244">谁能用通俗的语言解释一下什么是 RPC 框架？</a></p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/rpc.jpg"></p><p>1.首先，要解决通讯的问题。主要是通过在客户端和服务器之间建立TCP连接，远程过程调用的所有交换的数据都在这个连接里传输。连接可以是按需连接，调用结束后就断掉，也可以是长连接，多个远程调用共享同一个连接。<br>2.第二，要解决寻址问题。也就是说，A服务器上的应用怎么告诉底层的RPC框架，如何连接到B服务器(如主机或IP地址)以及特定的端口，方法的名称是什么，或者是从UDDI服务上查找。如果是RMI调用的话，还需要一个RMI Registry来注册服务的地址。<br>3.第三，当A服务器上的应用发起远程过程调用时，方法的参数需要通过底层的网络协议如TCP传递到B服务器，由于网络协议是基于二进制的，内存中的参数的值要序列化成二进制的形式，也就是序列化(Serialize)或编组(marshal), 通过寻址和传输将序列化的二进制发送给B服务器。<br>4.第四，B服务器收到请求后，需要对参数进行反序列化(序列化的逆操作)，恢复为内存中的表达方式，然后找到对应的方法(寻址的一部分)进行本地调用，然后得到返回值。<br>5.第五，返回值还要发送回服务器A上的应用，也要经过序列化的方式发送，服务器A接到后，再反序列化，恢复为内存中的表达方式，交给A服务器上的应用。</p><h2 id="Dubbo的产生背景"><a href="#Dubbo的产生背景" class="headerlink" title="Dubbo的产生背景"></a>Dubbo的产生背景</h2><p>以下来自<a href="http://dubbo.apache.org/books/dubbo-user-book/preface/architecture.html">Dubbo官方文档</a></p><p>随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，亟需一个治理系统确保架构有条不紊的演进。</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/dubbo-architecture-roadmap.jpg"></p><h3 id="单一应用架构"><a href="#单一应用架构" class="headerlink" title="单一应用架构"></a>单一应用架构</h3><p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p><h3 id="垂直应用架构"><a href="#垂直应用架构" class="headerlink" title="垂直应用架构"></a>垂直应用架构</h3><p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。</p><h3 id="分布式服务架构"><a href="#分布式服务架构" class="headerlink" title="分布式服务架构"></a>分布式服务架构</h3><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键。</p><h3 id="流动计算架构"><a href="#流动计算架构" class="headerlink" title="流动计算架构"></a>流动计算架构</h3><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。</p><h2 id="Dubbo面临的需求"><a href="#Dubbo面临的需求" class="headerlink" title="Dubbo面临的需求"></a>Dubbo面临的需求</h2><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/dubbo-service-governance.jpg"></p><p>在大规模服务化之前，应用可能只是通过 RMI 或 Hessian 等工具，简单的暴露和引用远程服务，通过配置服务的URL地址进行调用，通过 F5 等硬件进行负载均衡。</p><p><strong>当服务越来越多时，服务 URL 配置管理变得非常困难，F5 硬件负载均衡器的单点压力也越来越大。</strong> 此时需要一个服务注册中心，动态的注册和发现服务，使服务的位置透明。并通过在消费方获取服务提供方地址列表，实现软负载均衡和 Failover，降低对 F5 硬件负载均衡器的依赖，也能减少部分成本。</p><p><strong>当进一步发展，服务间依赖关系变得错踪复杂，甚至分不清哪个应用要在哪个应用之前启动，架构师都不能完整的描述应用的架构关系</strong>。 这时，需要自动画出应用间的依赖关系图，以帮助架构师理清理关系。</p><p><strong>接着，服务的调用量越来越大，服务的容量问题就暴露出来，这个服务需要多少机器支撑？什么时候该加机器？</strong> 为了解决这些问题，第一步，要将服务现在每天的调用量，响应时间，都统计出来，作为容量规划的参考指标。其次，要可以动态调整权重，在线上，将某台机器的权重一直加大，并在加大的过程中记录响应时间的变化，直到响应时间到达阀值，记录此时的访问量，再以此访问量乘以机器数反推总容量。</p><p>以上是 Dubbo 最基本的几个需求。</p><h2 id="Dubbo的架构"><a href="#Dubbo的架构" class="headerlink" title="Dubbo的架构"></a>Dubbo的架构</h2><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/dubbo-architecture.jpg"></p><p>节点角色说明</p><table><thead><tr><th>节点</th><th>角色说明</th></tr></thead><tbody><tr><td>Provider</td><td>暴露服务的服务提供方</td></tr><tr><td>Consumer</td><td>调用远程服务的服务消费方</td></tr><tr><td>Registry</td><td>服务注册与发现的注册中心</td></tr><tr><td>Monitor</td><td>统计服务的调用次数和调用时间的监控中心</td></tr><tr><td>Container</td><td>服务运行容器</td></tr></tbody></table><p>调用关系说明</p><p>1.服务容器负责启动，加载，运行服务提供者。<br>2.服务提供者在启动时，向注册中心注册自己提供的服务。<br>3.服务消费者在启动时，向注册中心订阅自己所需的服务。<br>4.注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。<br>5.服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。<br>6.服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</p><p>Dubbo 架构具有以下几个特点，分别是连通性、健壮性、伸缩性、以及向未来架构的升级性。</p><h2 id="Demo-time"><a href="#Demo-time" class="headerlink" title="Demo time"></a>Demo time</h2><p>首先，确认本次的目标。学习一项技术首先要了解背景以及意义。前文摘自官网的内容已经给出了答案。然后就是一个Hello World, 给学习者一个信心：这东西很容易上手的。So，接下来的demo依旧来自官方，特别简单的一个模拟运行。后面再继续深入用法。</p><p>由于Maven在之前极盛行，demo仍旧用maven当作构建工具，当然，后面熟悉后可切换为gradle。</p><p>本次demo见 <a href="https://github.com/Ryan-Miao/dubbo-hello-demo">https://github.com/Ryan-Miao/dubbo-hello-demo</a></p><h3 id="新建一个maven项目"><a href="#新建一个maven项目" class="headerlink" title="新建一个maven项目"></a>新建一个maven项目</h3><p>在idea里新建空的maven项目。</p><p>File-&gt;new-&gt;project-&gt;maven</p><p>填写group和artifact。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.test<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-hello-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="提供服务的API"><a href="#提供服务的API" class="headerlink" title="提供服务的API"></a>提供服务的API</h3><p>通过上述的介绍也能理解，消费者需要知道提供者的接口，那么就一定要共享接口和参数以及响应类。所以，我们先抽离一个单独的API项目来专门声明API。</p><p>在项目名上右键，new -&gt; moudle, 选择maven，新建一个新的空maven项目。</p><p>然后，创建一个用户服务接口<code>com.test.hello.api.IUserService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.hello.api;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">sayHi</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次的主角是dubbo，所以就不填充参数和包结构整理了。简单传入参数String和返回String就好。</p><h3 id="提供服务的provider"><a href="#提供服务的provider" class="headerlink" title="提供服务的provider"></a>提供服务的provider</h3><p>刚才声明了一个服务的接口，我们还需要一个实现，来提供真实的服务。而这个服务则是一个独立的项目。我们可以部署在某个机器上。</p><p>在项目名上右键，new -&gt; module， 选择Spring Initializr, 然后只选择web就可以了。最终生成的pom如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.test<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-provider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-provider<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo for dubbo provider hello world<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo.version</span>&gt;</span>2.6.1<span class="tag">&lt;/<span class="name">dubbo.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.test<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然，手动添加dubbo依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;dubbo&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;dubbo.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>还要引入我们刚才定义的共享接口定义项目：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.test<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来，就是实现这个接口了。创建实现类<code>com.test.helloprovider.service.impl.UserService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.helloprovider.service.impl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.test.hello.api.IUserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hi &quot;</span> + name + <span class="string">&quot;, current date is: &quot;</span> + <span class="keyword">new</span> Date();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，只要把这个服务发布出去就行了。在spring cloud里，发布一个服务就是发布web项目，启动tomcat来提供一个rest api。而在这里，我们不需要。我们要做的是把自己注册到dubbo里，等消费者来拿。</p><p>在resource下新建<code>provider.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://code.alibabatech.com/schema/dubbo        http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 提供方应用信息，用于计算依赖关系 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;hello-provider&quot;</span>  /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用multicast广播注册中心暴露服务地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">&quot;multicast://224.5.6.7:1234&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 用dubbo协议在20880端口暴露服务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;20880&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 声明需要暴露的服务接口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;com.test.hello.api.IUserService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userService&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 和本地bean一样实现服务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.helloprovider.service.impl.UserService&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后，我们只要启动Spring容器就行了，我们的bean还是声明在spring里的。</p><p>创建一个启动类<code>com.test.helloprovider.HelloProviderApplication</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.helloprovider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(</span><br><span class="line"><span class="keyword">new</span> String[] &#123;<span class="string">&quot;provider.xml&quot;</span>&#125;);</span><br><span class="line">context.start();</span><br><span class="line">System.in.read(); <span class="comment">// 按任意键退出</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行main方法即可。</p><p>这里的注册中心只是简单的multicast组播。这样，我们就发布了一个用户服务，提供sayHi方法。接下来只要给消费者调用就行。</p><h3 id="消费服务的consumer"><a href="#消费服务的consumer" class="headerlink" title="消费服务的consumer"></a>消费服务的consumer</h3><p>同样的步骤，我们来建立一个consumer。这个consumer是另一个独立的项目，这个项目也可以部署在另一个机器上。这个项目需要调用provider的项目来获得用户信息。</p><p>和provider不同的是，项目的artifact不一样。</p><p>新建好之后就可以在spring容器里远程调用了。同样在resource下新建一个consumer.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://code.alibabatech.com/schema/dubbo        http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;hello-consumer&quot;</span>  /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用multicast广播注册中心暴露发现服务地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">&quot;multicast://224.5.6.7:1234&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 生成远程服务代理，可以和本地bean一样使用demoService --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">interface</span>=<span class="string">&quot;com.test.hello.api.IUserService&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后，调用我们的bean完成消费。创建启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(</span><br><span class="line">                <span class="keyword">new</span> String[]&#123;<span class="string">&quot;consumer.xml&quot;</span>&#125;);</span><br><span class="line">        context.start();</span><br><span class="line">        <span class="keyword">final</span> IUserService userService = context.getBean(<span class="string">&quot;userService&quot;</span>, IUserService.class); <span class="comment">// 获取远程服务代理</span></span><br><span class="line">        String hello = userService.sayHi(<span class="string">&quot;world&quot;</span>); <span class="comment">// 执行远程方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===================================&quot;</span>);</span><br><span class="line">        System.out.println(hello); <span class="comment">// 显示调用结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===================================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行main方法可以看到控制台打印内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">22:43:38.034 [main] INFO com.alibaba.dubbo.config.AbstractConfig -  [DUBBO] Refer dubbo service com.test.hello.api.IUserService from url multicast:&#x2F;&#x2F;224.5.6.7:1234&#x2F;com.alibaba.dubbo.registry.RegistryService?anyhost&#x3D;true&amp;application&#x3D;consumer-of-helloworld-app&amp;check&#x3D;false&amp;dubbo&#x3D;2.6.1&amp;generic&#x3D;false&amp;interface&#x3D;com.test.hello.api.IUserService&amp;methods&#x3D;sayHi&amp;pid&#x3D;6204&amp;register.ip&#x3D;192.168.0.108&amp;remote.timestamp&#x3D;1521902609769&amp;side&#x3D;consumer&amp;timestamp&#x3D;1521902617561, dubbo version: 2.6.1, current host: 192.168.0.108</span><br><span class="line">22:43:38.206 [DubboClientHandler-192.168.0.108:20880-thread-1] DEBUG com.alibaba.dubbo.remoting.transport.DecodeHandler -  [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcResult, dubbo version: 2.6.1, current host: 192.168.0.108</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Hi world, current date is: Sat Mar 24 22:43:38 CST 2018</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">22:43:38.207 [DubboShutdownHook] INFO com.alibaba.dubbo.config.AbstractConfig -  [DUBBO] Run shutdown hook now., dubbo version: 2.6.1, current host: 192.168.0.108</span><br><span class="line">22:43:38.208 [DubboShutdownHook] INFO com.alibaba.dubbo.registry.support.AbstractRegistryFactory -  [DUBBO] Close all registries [multicast:&#x2F;&#x2F;224.5.6.7:1234&#x2F;com.alibaba.dubbo.registry.RegistryService?application&#x3D;consumer-of-helloworld-app&amp;dubbo&#x3D;2.6.1&amp;interface&#x3D;com.alibaba.dubbo.registry.RegistryService&amp;pid&#x3D;6204&amp;timestamp&#x3D;1521902617639], dubbo version: 2.6.1, current host: 192.168.0.108</span><br><span class="line">22:43:38.208 [DubboShutdownHook] INFO com.alibaba.dubbo.registry.multicast.MulticastRegistry -  [DUBBO] Destroy registry:multicast:&#x2F;&#x2F;224.5.6.7:1234&#x2F;com.alibaba.dubbo.registry.RegistryService?application&#x3D;consumer-of-helloworld-app&amp;dubbo&#x3D;2.6.1&amp;interface&#x3D;com.alibaba.dubbo.registry.RegistryService&amp;pid&#x3D;6204&amp;timestamp&#x3D;1521902617639, dubbo version: 2.6.1, current host: 192.168.0.108</span><br><span class="line">22:43:38.208 [DubboShutdownHook] INFO com.alibaba.dubbo.registry.multicast.MulticastRegistry -  [DUBBO] Unregister: consumer:&#x2F;&#x2F;192.168.0.108&#x2F;com.test.hello.api.IUserService?application&#x3D;consumer-of-helloworld-app&amp;category&#x3D;consumers&amp;check&#x3D;false&amp;dubbo&#x3D;2.6.1&amp;interface&#x3D;com.test.hello.api.IUserService&amp;methods&#x3D;sayHi&amp;pid&#x3D;6204&amp;side&#x3D;consumer&amp;timestamp&#x3D;1521902617561, dubbo version: 2.6.1, current host: 192.168.0.108</span><br><span class="line">22:43:38.208 [DubboShutdownHook] INFO com.alibaba.dubbo.registry.multicast.MulticastRegistry -  [DUBBO] Send broadcast message: unregister consumer:&#x2F;&#x2F;192.168.0.108&#x2F;com.test.hello.api.IUserService?application&#x3D;consumer-of-helloworld-app&amp;category&#x3D;consumers&amp;check&#x3D;false&amp;dubbo&#x3D;2.6.1&amp;interface&#x3D;com.test.hello.api.IUserService&amp;methods&#x3D;sayHi&amp;pid&#x3D;6204&amp;side&#x3D;consumer&amp;timestamp&#x3D;1521902617561 to &#x2F;224.5.6.7:1234, dubbo version: 2.6.1, current host: 192.168.0.108</span><br></pre></td></tr></table></figure><p>如此，hello world 完成。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://dubbo.apache.org/books/dubbo-user-book/preface/">http://dubbo.apache.org/books/dubbo-user-book/preface/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JVM垃圾收集机制(JDK1.8)</title>
      <link href="2018/03/16/jvm-garbage/"/>
      <url>2018/03/16/jvm-garbage/</url>
      
        <content type="html"><![CDATA[<p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/JVM%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86.svg"></p><a id="more"></a><h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><h3 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h3><p>最基础的收集算法是“标记-清除”(Mark-Sweep)算法，分两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。</p><p>不足：一个是效率问题，标记和清除两个过程的效率都不高；另一个是空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能导致以后在程序运行过程需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一个的垃圾收集动作。</p><h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><p>为了解决效率问题，一种称为复制(Copying)的收集算法出现了，它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块内存用完了，就将还存活着的对象复制到另外一块上，然后再把已经使用过的内存空间一次清理掉。这样使得每次都是对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。代价是内存缩小为原来的一半。</p><p>商业虚拟机用这个回收算法来回收新生代。IBM研究表明98%的对象是“朝生夕死“，不需要按照1-1的比例来划分内存空间，而是将内存分为一块较大的”Eden“空间和两块较小的Survivor空间，每次使用Eden和其中一块Survivor。当回收时，将Eden和Survivor中还存活的对象一次性复制到另外一个Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。Hotspot虚拟机默认Eden和Survivor的比例是8-1.即每次可用整个新生代的90%, 只有一个survivor，即1/10被”浪费“。当然，98%的对象回收只是一般场景下的数据，我们没有办法保证每次回收都只有不多于10%的对象存活，当Survivor空间不够时，需要依赖其他内存(老年代)进行分配担保(Handle Promotion).</p><p>如果另外一块survivor空间没有足够空间存放上一次新生代收集下来的存活对象时，这些对象将直接通过分配担保机制进入老年代。</p><h3 id="eden-survivor复制过程概述"><a href="#eden-survivor复制过程概述" class="headerlink" title="eden survivor复制过程概述"></a>eden survivor复制过程概述</h3><p>Eden Space字面意思是伊甸园，对象被创建的时候首先放到这个区域，进行垃圾回收后，不能被回收的对象被放入到空的survivor区域。</p><p>Survivor Space幸存者区，用于保存在eden space内存区域中经过垃圾回收后没有被回收的对象。Survivor有两个，分别为To Survivor、 From Survivor，这个两个区域的空间大小是一样的。执行垃圾回收的时候Eden区域不能被回收的对象被放入到空的survivor（也就是To Survivor，同时Eden区域的内存会在垃圾回收的过程中全部释放），另一个survivor（即From Survivor）里不能被回收的对象也会被放入这个survivor（即To Survivor），然后To Survivor 和 From Survivor的标记会互换，始终保证一个survivor是空的。</p><p>为啥需要两个survivor？因为需要一个完整的空间来复制过来。当满的时候晋升。每次都往标记为to的里面放，然后互换，这时from已经被清空，可以当作to了。</p><h3 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h3><p>复制收集算法在对象成活率较高时就要进行较多的复制操作，效率将会变低。更关键的是，如果不想浪费50%的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以，老年代一般不能直接选用这种算法。</p><p>根据老年代的特点，有人提出一种”标记-整理“Mark-Compact算法，标记过程仍然和标记-清除一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理端边界以外的内存.</p><h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><p>当前商业虚拟机的垃圾收集都采用”分代收集“(Generational Collection)算法，这种算法根据对象存活周期的不同将内存划分为几块。一般把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代，每次垃圾收集时都发现大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率较高，没有额外的空间对它进行分配担保，就必须使用”标记-清理“和”标记-整理“算法来进行回收。</p><h2 id="HotSpot算法实现"><a href="#HotSpot算法实现" class="headerlink" title="HotSpot算法实现"></a>HotSpot算法实现</h2><p>在Java语言中，可作为GC Roots的对象包括下面几种：</p><ul><li>虚拟机栈(栈帧中的本地变量表)中引用的对象</li><li>方法去中类静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>本地方法栈中JNI(即一般说的Native方法)引用的对象</li></ul><p>从可达性分析中从GC Roots节点找引用链这个操作为例，可作为GC Roots的节点主要在全局性的引用(例如常量或类静态属性)与执行上下文(例如栈帧中的本地变量表)中，现在很多应用仅仅方法区就有数百兆，如果要逐个检查里面的引用，必然消耗很多时间。</p><p>可达性分析对执行时间的敏感还体现在GC停顿上，因为这项分析工作必须在一个能确保一致性的快照中进行–这里”一致性“的意思是指整个分析期间整个执行系统看起来就像被冻结在某个时间点，不可以出现分析过程中对象引用关系还在不断变化的情况，该点不满足的话分析结果准确性就无法得到保证。这点是导致GC进行时必须停顿所有Java执行线程(Sun公司将这件事情称为”Stop The World“)的一个重要原因，即使是在号称(几乎)不会发生停顿的CMS收集器中，枚举根节点时也必须停顿的。</p><p>安全点，Safepoint </p><h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><h3 id="Serial-收集器"><a href="#Serial-收集器" class="headerlink" title="Serial 收集器"></a>Serial 收集器</h3><p>标记-复制。</p><p>单线程，一个CPU或一条收集线程去完成垃圾收集工作，收集时必须暂停其他所有的工作线程，直到它结束。</p><p>虽然如此，它依然是虚拟机运行在Client模式下的默认<strong>新生代</strong>收集器。简单而高效。</p><h3 id="ParNew-收集器"><a href="#ParNew-收集器" class="headerlink" title="ParNew 收集器"></a>ParNew 收集器</h3><p>ParNew是Serial收集器的多线程版本。Server模式下默认<strong>新生代</strong>收集器，除了Serial收集器之外，只有它能与CMS收集器配合工作。</p><h3 id="并行-Parallel"><a href="#并行-Parallel" class="headerlink" title="并行 Parallel"></a>并行 Parallel</h3><p>指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。</p><h3 id="并发-Concurrent"><a href="#并发-Concurrent" class="headerlink" title="并发 Concurrent"></a>并发 Concurrent</h3><p>指用户线程与垃圾收集线程同时执行(但不一定是并行的，可能会交替执行)，用户程序再继续运行，而垃圾收集程序运行于另一个CPU上。</p><h3 id="Parallel-Scavenge-收集器"><a href="#Parallel-Scavenge-收集器" class="headerlink" title="Parallel Scavenge 收集器"></a>Parallel Scavenge 收集器</h3><p>Parallel Scavenge 收集器是一个<strong>新生代</strong>收集器，它也是使用复制算法的收集器。看上去来ParNew一样，有什么特别？</p><p>Parallel Scavenge 收集器的特点是它的关注点与其他收集器不同，CMS等收集器关注点是尽可能缩短垃圾收集时用户线程的停顿时间。而Parallel Scavenge收集器的目标则是达到一个可控制的吞吐量(Throughput)。所谓吞吐量就是CPU用于运行用户代码的时间和CPU总小号时间的比值，即吞吐量 = 运行用户代码时间 / (运行用户代码时间+垃圾收集时间)，虚拟机总共运行了100min，其中垃圾收集花费了1min，那吞吐量就是99%.</p><p>停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验，而高吞吐量则可以高效地利用CPU时间，主要适合在后台运算而不需要太多交互的任务。</p><p>Parallel Scavenge收集器提供了两个参数用于精确控制吞吐量，分别是控制最大垃圾收集停顿时间 <code>-XX:MaxGCPauseMillis</code>以及直接设置吞吐量大小的<code>-XX:GCTimeRatio</code>。</p><h3 id="Serial-Old收集器"><a href="#Serial-Old收集器" class="headerlink" title="Serial Old收集器"></a>Serial Old收集器</h3><p>Serial Old是Serial收集器的老年代版本，它同样是一个单线程收集器。给Client模式下的虚拟机使用。</p><p>新生代采用复制算法，暂停所有用户线程；</p><p>老年代采用标记-整理算法，暂停所有用户线程；</p><h3 id="Parallel-Old-收集器"><a href="#Parallel-Old-收集器" class="headerlink" title="Parallel Old 收集器"></a>Parallel Old 收集器</h3><p>这里注意，Parallel Scavage 收集器架构中本身有PS MarkSweep收集器来收集老年代，并非直接使用了Serial Old,但二者接近。本人win10 64位系统，jdk1.8.0_102，测试默认垃圾收集器为：<strong>PS MarkSweep **和 **PS Scavenge</strong>。 也就是说Java8的默认并不是G1。</p><p>这是”吞吐量优先“，注重吞吐量以及CPU资源敏感的场合都可以优先考虑Parallel Scavenge和Parallel Old(PS Mark Sweep)。Java8 默认就是这个。</p><h3 id="CMS-收集器"><a href="#CMS-收集器" class="headerlink" title="CMS 收集器"></a>CMS 收集器</h3><p>CMS(Concurrent Mark Sweep) 收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用集中在互联网站或者B/S系统的服务端上，这类尤其重视服务的响应速度，希望系统停顿时间最短。CMS收集器就非常符合这类应用的需求。</p><p>CMS基于 <code>标记-清除</code>算法实现。整个过程分为4个步骤：</p><ol><li>初始标记(CMS initial mark)     -stop the world</li><li>并发标记(CMS concurrent mark)</li><li>重新标记(CMS remark)           -stop the world</li><li>并发清除(CMS concurrent sweep)</li></ol><p>初始标记，重新标记这两个步骤仍然需要Stop The World, 初始标记仅仅标记以下GC Roots能直接关联的对象，速度很快。</p><p>并发标记就是进行GC Roots Tracing的过程；</p><p>而重新标记阶段则是为了修正并发标记期间因为用户程序继续运作而导致标记产生变动的那一部分对象的标记记录。这个阶段停顿比初始标记稍微长，但远比并发标记的时间短。</p><p>整个过程耗时最长的并发标记和并发清除过程，收集器都可以与用户线程一起工作。总体上来说，CMS收集器的内存回收过程与用户线程一起并发执行的。</p><p>CMS特点：并发收集，低停顿。</p><p><strong>缺点</strong></p><p>1.CMS收集器对CPU资源非常敏感。默认启动的回收线程数是(CPU+3)/4. 当CPU 4个以上时，并发回收垃圾收集线程不少于25%的CPU资源。</p><p>2.CMS收集器无法处理浮动垃圾(Floating Garbage), 可能出现”Concurrent Mode Failure“失败而导致另一次Full GC的产生。由于CMS并发清理时，用户线程还在运行，伴随产生新垃圾，而这一部分出现在标记之后，只能下次GC时再清理。这一部分垃圾就称为”浮动垃圾“。</p><p>由于CMS运行时还需要给用户空间继续运行，则不能等老年代几乎被填满再进行收集，需要预留一部分空间提供并发收集时，用户程序运行。JDK1.6中，CMS启动阈值为92%. 若预留内存不够用户使用，则出现一次<code>Concurent Mode Failure</code>失败。这时虚拟机启动后备预案，临时启用Serial Old收集老年代，这样停顿时间很长。</p><p>3.CMS基于”标记-清除“算法实现的，则会产生大量空间碎片，空间碎片过多时，没有连续空间分配给大对象，不得不提前触发一次FUll GC。当然可以开启-XX:+UseCMSCompactAtFullCollection(默认开)，在CMS顶不住要FullGC时开启内存碎片合并整理过程。内存整理过程是无法并发的，空间碎片问题没了，但停顿时间变长。</p><p><strong>面试题：CMS一共会有几次STW</strong></p><p>首先，回答两次，初始标记和重新标记需要。</p><p>然后，CMS并发的代价是预留空间给用户，预留不足的时候触发FUllGC，这时Serail Old会STW.</p><p>然后，CMS是标记-清除算法，导致空间碎片，则没有连续空间分配大对象时，FUllGC, 而FUllGC会开始碎片整理， STW.</p><p>即2次或多次。</p><h2 id="CMS什么时候FUll-GC"><a href="#CMS什么时候FUll-GC" class="headerlink" title="CMS什么时候FUll GC"></a>CMS什么时候FUll GC</h2><p>除直接调用System.gc外，触发Full GC执行的情况有如下四种。</p><h3 id="1-旧生代空间不足"><a href="#1-旧生代空间不足" class="headerlink" title="1. 旧生代空间不足"></a>1. 旧生代空间不足</h3><p>旧生代空间只有在新生代对象转入及创建为大对象、大数组时才会出现不足的现象，当执行Full GC后空间仍然不足，则抛出如下错误：<br>java.lang.OutOfMemoryError: Java heap space<br>为避免以上两种状况引起的FullGC，调优时应尽量做到让对象在Minor GC阶段被回收、让对象在新生代多存活一段时间及不要创建过大的对象及数组。</p><h3 id="2-Permanet-Generation空间满"><a href="#2-Permanet-Generation空间满" class="headerlink" title="2. Permanet Generation空间满"></a>2. Permanet Generation空间满</h3><p>PermanetGeneration中存放的为一些class的信息等，当系统中要加载的类、反射的类和调用的方法较多时，Permanet Generation可能会被占满，在未配置为采用CMS GC的情况下会执行Full GC。如果经过Full GC仍然回收不了，那么JVM会抛出如下错误信息：<br>java.lang.OutOfMemoryError: PermGen space<br>为避免Perm Gen占满造成Full GC现象，可采用的方法为增大Perm Gen空间或转为使用CMS GC。</p><h3 id="3-CMS-GC时出现promotion-failed和concurrent-mode-failure"><a href="#3-CMS-GC时出现promotion-failed和concurrent-mode-failure" class="headerlink" title="3. CMS GC时出现promotion failed和concurrent mode failure"></a>3. CMS GC时出现promotion failed和concurrent mode failure</h3><p>对于采用CMS进行旧生代GC的程序而言，尤其要注意GC日志中是否有promotion failed和concurrent mode failure两种状况，当这两种状况出现时可能会触发Full GC。<br>promotionfailed是在进行Minor GC时，survivor space放不下、对象只能放入旧生代，而此时旧生代也放不下造成的；concurrent mode failure是在执行CMS GC的过程中同时有对象要放入旧生代，而此时旧生代空间不足造成的。<br>应对措施为：增大survivorspace、旧生代空间或调低触发并发GC的比率，但在JDK 5.0+、6.0+的版本中有可能会由于JDK的bug29导致CMS在remark完毕后很久才触发sweeping动作。对于这种状况，可通过设置-XX:CMSMaxAbortablePrecleanTime=5（单位为ms）来避免。</p><h3 id="4-统计得到的Minor-GC晋升到旧生代的平均大小大于旧生代的剩余空间"><a href="#4-统计得到的Minor-GC晋升到旧生代的平均大小大于旧生代的剩余空间" class="headerlink" title="4. 统计得到的Minor GC晋升到旧生代的平均大小大于旧生代的剩余空间"></a>4. 统计得到的Minor GC晋升到旧生代的平均大小大于旧生代的剩余空间</h3><p>这是一个较为复杂的触发情况，Hotspot为了避免由于新生代对象晋升到旧生代导致旧生代空间不足的现象，在进行Minor GC时，做了一个判断，如果之前统计所得到的Minor GC晋升到旧生代的平均大小大于旧生代的剩余空间，那么就直接触发Full GC。<br>例如程序第一次触发MinorGC后，有6MB的对象晋升到旧生代，那么当下一次Minor GC发生时，首先检查旧生代的剩余空间是否大于6MB，如果小于6MB，则执行Full GC。<br>当新生代采用PSGC时，方式稍有不同，PS GC是在Minor GC后也会检查，例如上面的例子中第一次Minor GC后，PS GC会检查此时旧生代的剩余空间是否大于6MB，如小于，则触发对旧生代的回收。<br>除了以上4种状况外，对于使用RMI来进行RPC或管理的Sun JDK应用而言，默认情况下会一小时执行一次Full GC。可通过在启动时通过- java-Dsun.rmi.dgc.client.gcInterval=3600000来设置Full GC执行的间隔时间或通过-XX:+ DisableExplicitGC来禁止RMI调用System.gc。</p><h2 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h2><h3 id="什么是垃圾回收"><a href="#什么是垃圾回收" class="headerlink" title="什么是垃圾回收"></a>什么是垃圾回收</h3><p>首先，在了解G1之前，我们需要清楚的知道，垃圾回收是什么？简单的说垃圾回收就是回收内存中不再使用的对象。</p><p>垃圾回收的基本步骤</p><p>回收的步骤有2步：</p><p>1.查找内存中不再使用的对象   </p><p>2.释放这些对象占用的内存  </p><h4 id="1-查找内存中不再使用的对象"><a href="#1-查找内存中不再使用的对象" class="headerlink" title="1,查找内存中不再使用的对象"></a>1,查找内存中不再使用的对象</h4><p>那么问题来了，如何判断哪些对象不再被使用呢？我们也有2个方法：</p><p><strong>1.引用计数法</strong><br>引用计数法就是如果一个对象没有被任何引用指向，则可视之为垃圾。这种方法的缺点就是不能检测到环的存在。</p><p><strong>2.根搜索算法</strong></p><p>根搜索算法的基本思路就是通过一系列名为”GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链(Reference Chain)，当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可用的。</p><p>现在我们已经知道如何找出垃圾对象了，如何把这些对象清理掉呢？</p><h4 id="2-释放这些对象占用的内存"><a href="#2-释放这些对象占用的内存" class="headerlink" title="2. 释放这些对象占用的内存"></a>2. 释放这些对象占用的内存</h4><p>常见的方式有复制或者直接清理，但是直接清理会存在内存碎片，于是就会产生了清理再压缩的方式。</p><p>总得来说就产生了三种类型的回收算法。</p><p>1.标记-复制</p><p>2.标记-清理</p><p>3.标记-整理</p><p>基于分代的假设</p><p>由于对象的存活时间有长有短，所以对于存活时间长的对象，减少被gc的次数可以避免不必要的开销。这样我们就把内存分成新生代和老年代，新生代存放刚创建的和存活时间比较短的对象，老年代存放存活时间比较长的对象。这样每次仅仅清理年轻代，老年代仅在必要时时再做清理可以极大的提高GC效率，节省GC时间。</p><h3 id="Java垃圾收集器的历史"><a href="#Java垃圾收集器的历史" class="headerlink" title="Java垃圾收集器的历史"></a>Java垃圾收集器的历史</h3><p>第一阶段，Serial（串行）收集器</p><p>在jdk1.3.1之前，java虚拟机仅仅能使用Serial收集器。 Serial收集器是一个单线程的收集器，但它的“单线程”的意义并不仅仅是说明它只会使用一个CPU或一条收集线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束。</p><p>PS：开启Serial收集器的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseSerialGC</span><br></pre></td></tr></table></figure><p>第二阶段，Parallel（并行）收集器</p><p>Parallel收集器也称吞吐量收集器，相比Serial收集器，Parallel最主要的优势在于使用多线程去完成垃圾清理工作，这样可以充分利用多核的特性，大幅降低gc时间。</p><p>PS:开启Parallel收集器的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseParallelGC -XX:+UseParallelOldGC</span><br></pre></td></tr></table></figure><p>第三阶段，CMS（并发）收集器</p><p>CMS收集器在Minor GC时会暂停所有的应用线程，并以多线程的方式进行垃圾回收。在Full GC时不再暂停应用线程，而是使用若干个后台线程定期的对老年代空间进行扫描，及时回收其中不再使用的对象。</p><p>PS:开启CMS收集器的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseParNewGC -XX:+UseConcMarkSweepGC</span><br></pre></td></tr></table></figure><p>第四阶段，G1（并发）收集器</p><p>G1收集器（或者垃圾优先收集器）的设计初衷是为了尽量缩短处理超大堆（大于4GB）时产生的停顿。相对于CMS的优势而言是内存碎片的产生率大大降低。</p><p>PS:开启G1收集器的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseG1GC</span><br></pre></td></tr></table></figure><h3 id="了解G1"><a href="#了解G1" class="headerlink" title="了解G1"></a>了解G1</h3><p>G1的第一篇paper（附录1）发表于2004年，在2012年才在jdk1.7u4中可用。oracle官方计划在jdk9中将G1变成默认的垃圾收集器，以替代CMS。为何oracle要极力推荐G1呢，G1有哪些优点</p><blockquote><p><strong>首先，G1的设计原则就是简单可行的性能调优</strong></p></blockquote><p>开发人员仅仅需要声明以下参数即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseG1GC -Xmx32g -XX:MaxGCPauseMillis&#x3D;200</span><br></pre></td></tr></table></figure><p>其中-XX:+UseG1GC为开启G1垃圾收集器，-Xmx32g 设计堆内存的最大内存为32G，-XX:MaxGCPauseMillis=200设置GC的最大暂停时间为200ms。如果我们需要调优，在内存大小一定的情况下，我们只需要修改最大暂停时间即可。</p><blockquote><p><strong>其次，G1将新生代，老年代的物理空间划分取消了。</strong></p></blockquote><p>这样我们再也不用单独的空间对每个代进行设置了，不用担心每个代内存是否足够。</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/no-generation-jvm.png"></p><p>取而代之的是，G1算法将堆划分为若干个区域（Region），它仍然属于分代收集器。不过，这些区域的一部分包含新生代，新生代的垃圾收集依然采用暂停所有应用线程的方式，将存活对象拷贝到老年代或者Survivor空间。老年代也分成很多区域，G1收集器通过将对象从一个区域复制到另外一个区域，完成了清理工作。这就意味着，在正常的处理过程中，G1完成了堆的压缩（至少是部分堆的压缩），这样也就不会有cms内存碎片问题的存在了。</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/g1-jvm.png"></p><p>在G1中，还有一种特殊的区域，叫Humongous区域。 如果一个对象占用的空间超过了分区容量50%以上，G1收集器就认为这是一个巨型对象。这些巨型对象，默认直接会被分配在年老代，但是如果它是一个短期存在的巨型对象，就会对垃圾收集器造成负面影响。为了解决这个问题，G1划分了一个Humongous区，它用来专门存放巨型对象。如果一个H区装不下一个巨型对象，那么G1会寻找连续的H分区来存储。为了能找到连续的H区，有时候不得不启动Full GC。</p><blockquote><p>PS：在java 8中，持久代也移动到了普通的堆内存空间中，改为元空间。</p></blockquote><h3 id="对象分配策略"><a href="#对象分配策略" class="headerlink" title="对象分配策略"></a>对象分配策略</h3><p>说起大对象的分配，我们不得不谈谈对象的分配策略。它分为3个阶段：</p><p>1.TLAB(Thread Local Allocation Buffer)线程本地分配缓冲区<br>2.Eden区中分配<br>3.Humongous区分配    </p><p>TLAB为线程本地分配缓冲区，它的目的为了使对象尽可能快的分配出来。如果对象在一个共享的空间中分配，我们需要采用一些同步机制来管理这些空间内的空闲空间指针。在Eden空间中，每一个线程都有一个固定的分区用于分配对象，即一个TLAB。分配对象时，线程之间不再需要进行任何的同步。</p><p>对TLAB空间中无法分配的对象，JVM会尝试在Eden空间中进行分配。如果Eden空间无法容纳该对象，就只能在老年代中进行分配空间。</p><p>最后，G1提供了两种GC模式，Young GC和Mixed GC，两种都是Stop The World(STW)的。下面我们将分别介绍一下这2种模式。</p><h3 id="G1-Young-GC"><a href="#G1-Young-GC" class="headerlink" title="G1 Young GC"></a>G1 Young GC</h3><p>Young GC主要是对Eden区进行GC，它在Eden空间耗尽时会被触发。在这种情况下，Eden空间的数据移动到Survivor空间中，如果Survivor空间不够，Eden空间的部分数据会直接晋升到年老代空间。Survivor区的数据移动到新的Survivor区中，也有部分数据晋升到老年代空间中。最终Eden空间的数据为空，GC停止工作，应用线程继续执行。</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/g1-young-gc-1.png"><br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/g1-young-gc-2.png"></p><p>这时，我们需要考虑一个问题，如果仅仅GC 新生代对象，我们如何找到所有的根对象呢？ 老年代的所有对象都是根么？那这样扫描下来会耗费大量的时间。于是，G1引进了RSet的概念。它的全称是Remembered Set，作用是跟踪指向某个heap区内的对象引用。</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/jvm-g1-rset.png"></p><p>在CMS中，也有RSet的概念，在老年代中有一块区域用来记录指向新生代的引用。这是一种point-out，在进行Young GC时，扫描根时，仅仅需要扫描这一块区域，而不需要扫描整个老年代。</p><p>但在G1中，并没有使用point-out，这是由于一个分区太小，分区数量太多，如果是用point-out的话，会造成大量的扫描浪费，有些根本不需要GC的分区引用也扫描了。于是G1中使用point-in来解决。point-in的意思是哪些分区引用了当前分区中的对象。这样，仅仅将这些对象当做根来扫描就避免了无效的扫描。由于新生代有多个，那么我们需要在新生代之间记录引用吗？这是不必要的，原因在于每次GC时，所有新生代都会被扫描，所以只需要记录老年代到新生代之间的引用即可。</p><p>需要注意的是，如果引用的对象很多，赋值器需要对每个引用做处理，赋值器开销会很大，为了解决赋值器开销这个问题，在G1 中又引入了另外一个概念，卡表（Card Table）。一个Card Table将一个分区在逻辑上划分为固定大小的连续区域，每个区域称之为卡。卡通常较小，介于128到512字节之间。Card Table通常为字节数组，由Card的索引（即数组下标）来标识每个分区的空间地址。默认情况下，每个卡都未被引用。当一个地址空间被引用时，这个地址空间对应的数组索引的值被标记为”0″，即标记为脏被引用，此外RSet也将这个数组下标记录下来。一般情况下，这个RSet其实是一个Hash Table，Key是别的Region的起始地址，Value是一个集合，里面的元素是Card Table的Index。</p><p><strong>Young GC 阶段</strong>：</p><p><strong>阶段1：根扫描</strong></p><p>静态和本地对象被扫描</p><p><strong>阶段2：更新RS</strong></p><p>处理dirty card队列更新RS</p><p><strong>阶段3：处理RS</strong></p><p>检测从年轻代指向年老代的对象</p><p><strong>阶段4：对象拷贝</strong></p><p>拷贝存活的对象到survivor/old区域</p><p><strong>阶段5：处理引用队列</strong></p><p>软引用，弱引用，虚引用处理</p><h3 id="G1-Mix-GC"><a href="#G1-Mix-GC" class="headerlink" title="G1 Mix GC"></a>G1 Mix GC</h3><p>Mix GC不仅进行正常的新生代垃圾收集，同时也回收部分后台扫描线程标记的老年代分区。</p><p>它的GC步骤分2步：</p><p>1.全局并发标记（global concurrent marking）<br>2.拷贝存活对象（evacuation）</p><p>在进行Mix GC之前，会先进行global concurrent marking（全局并发标记）。 global concurrent marking的执行过程是怎样的呢？</p><p>在G1 GC中，它主要是为Mixed GC提供标记服务的，并不是一次GC过程的一个必须环节。global concurrent marking的执行过程分为五个步骤：</p><p><strong>初始标记（initial mark，STW）</strong></p><p>在此阶段，G1 GC 对根进行标记。该阶段与常规的 (STW) 年轻代垃圾回收密切相关。</p><p><strong>根区域扫描（root region scan</strong></p><p>G1 GC 在初始标记的存活区扫描对老年代的引用，并标记被引用的对象。该阶段与应用程序（非 STW）同时运行，并且只有完成该阶段后，才能开始下一次 STW 年轻代垃圾回收。</p><p><strong>并发标记（Concurrent Marking）</strong></p><p>G1 GC 在整个堆中查找可访问的（存活的）对象。该阶段与应用程序同时运行，可以被 STW 年轻代垃圾回收中断</p><p><strong>最终标记（Remark，STW）</strong></p><p>该阶段是 STW 回收，帮助完成标记周期。G1 GC 清空 SATB 缓冲区，跟踪未被访问的存活对象，并执行引用处理。</p><p><strong>清除垃圾（Cleanup，STW）</strong></p><p>在这个最后阶段，G1 GC 执行统计和 RSet 净化的 STW 操作。在统计期间，G1 GC 会识别完全空闲的区域和可供进行混合垃圾回收的区域。清理阶段在将空白区域重置并返回到空闲列表时为部分并发。</p><h3 id="三色标记算法"><a href="#三色标记算法" class="headerlink" title="三色标记算法"></a>三色标记算法</h3><p>提到并发标记，我们不得不了解并发标记的三色标记算法。它是描述追踪式回收器的一种有用的方法，利用它可以推演回收器的正确性。 首先，我们将对象分成三种类型的。</p><p><strong>黑色</strong>:根对象，或者该对象与它的子对象都被扫描</p><p><strong>灰色</strong>:对象本身被扫描,但还没扫描完该对象中的子对象</p><p><strong>白色</strong>:未被扫描对象，扫描完成所有对象之后，最终为白色的为不可达对象，即垃圾对象</p><p>当GC开始扫描对象时，按照如下图步骤进行对象的扫描：</p><p>根对象被置为黑色，子对象被置为灰色。</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/jvm-g1-3color-1.png"></p><p>继续由灰色遍历,将已扫描了子对象的对象置为黑色。</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/jvm-g1-3color-2.png"></p><p>遍历了所有可达的对象后，所有可达的对象都变成了黑色。不可达的对象即为白色，需要被清理。</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/jvm-g1-3color-3.png"></p><p>这看起来很美好，但是如果在标记过程中，应用程序也在运行，那么对象的指针就有可能改变。这样的话，我们就会遇到一个问题：对象丢失问题</p><p>我们看下面一种情况，当垃圾收集器扫描到下面情况时:</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/jvm-g1-3color-4.png"></p><p>这时候应用程序执行了以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A.c&#x3D;C</span><br><span class="line">B.c&#x3D;null</span><br></pre></td></tr></table></figure><p>这样，对象的状态图变成如下情形：</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/jvm-g1-3color-5.png"></p><p>这时候垃圾收集器再标记扫描的时候就会下图成这样：</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/jvm-g1-3color-6.png"></p><p>很显然，此时C是白色，被认为是垃圾需要清理掉，显然这是不合理的。那么我们如何保证应用程序在运行的时候，GC标记的对象不丢失呢？有如下2中可行的方式：</p><p>1.在插入的时候记录对象<br>2.在删除的时候记录对象</p><p>刚好这对应CMS和G1的2种不同实现方式：</p><p>在CMS采用的是增量更新（Incremental update），只要在写屏障（write barrier）里发现要有一个白对象的引用被赋值到一个黑对象 的字段里，那就把这个白对象变成灰色的。即插入的时候记录下来。</p><p>在G1中，使用的是STAB（snapshot-at-the-beginning）的方式，删除的时候记录所有的对象，它有3个步骤：</p><p>1.在开始标记的时候生成一个快照图标记存活对象</p><p>2.在并发标记的时候所有被改变的对象入队（在write barrier里把所有旧的引用所指向的对象都变成非白的）</p><p>3.可能存在游离的垃圾，将在下次被收集</p><p>这样，G1到现在可以知道哪些老的分区可回收垃圾最多。 当全局并发标记完成后，在某个时刻，就开始了Mix GC。这些垃圾回收被称作“混合式”是因为他们不仅仅进行正常的新生代垃圾收集，同时也回收部分后台扫描线程标记的分区。混合式垃圾收集如下图：</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/jvm-g1-mixgc.png"></p><p>混合式GC也是采用的复制的清理策略，当GC完成后，会重新释放空间。<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/jvm-g1-mixgc2.png"></p><h3 id="调优实践"><a href="#调优实践" class="headerlink" title="调优实践"></a>调优实践</h3><p><strong>MaxGCPauseMillis</strong>调优</p><p>前面介绍过使用GC的最基本的参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseG1GC -Xmx32g -XX:MaxGCPauseMillis&#x3D;200</span><br></pre></td></tr></table></figure><p>前面2个参数都好理解，后面这个MaxGCPauseMillis参数该怎么配置呢？这个参数从字面的意思上看，就是允许的GC最大的暂停时间。G1尽量确保每次GC暂停的时间都在设置的MaxGCPauseMillis范围内。 那G1是如何做到最大暂停时间的呢？这涉及到另一个概念，CSet(collection set)。它的意思是在一次垃圾收集器中被收集的区域集合。</p><p>Young GC：选定所有新生代里的region。通过控制新生代的region个数来控制young GC的开销。</p><p>Mixed GC：选定所有新生代里的region，外加根据global concurrent marking统计得出收集收益高的若干老年代region。在用户指定的开销目标范围内尽可能选择收益高的老年代region。</p><p>在理解了这些后，我们再设置最大暂停时间就好办了。 首先，我们能容忍的最大暂停时间是有一个限度的，我们需要在这个限度范围内设置。但是应该设置的值是多少呢？我们需要在吞吐量跟MaxGCPauseMillis之间做一个平衡。如果MaxGCPauseMillis设置的过小，那么GC就会频繁，吞吐量就会下降。如果MaxGCPauseMillis设置的过大，应用程序暂停时间就会变长。G1的默认暂停时间是200毫秒，我们可以从这里入手，调整合适的时间。</p><p><strong>其他调优参数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:G1HeapRegionSize&#x3D;n</span><br></pre></td></tr></table></figure><p>设置的 G1 区域的大小。值是 2 的幂，范围是 1 MB 到 32 MB 之间。目标是根据最小的 Java 堆大小划分出约 2048 个区域。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:ParallelGCThreads&#x3D;n</span><br></pre></td></tr></table></figure><p>设置 STW 工作线程数的值。将 n 的值设置为逻辑处理器的数量。n 的值与逻辑处理器的数量相同，最多为 8。</p><p>如果逻辑处理器不止八个，则将 n 的值设置为逻辑处理器数的 5/8 左右。这适用于大多数情况，除非是较大的 SPARC 系统，其中 n 的值可以是逻辑处理器数的 5/16 左右。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:ConcGCThreads&#x3D;n</span><br></pre></td></tr></table></figure><p>设置并行标记的线程数。将 n 设置为并行垃圾回收线程数 (ParallelGCThreads) 的 1/4 左右。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:InitiatingHeapOccupancyPercent&#x3D;45</span><br></pre></td></tr></table></figure><p>设置触发标记周期的 Java 堆占用率阈值。默认占用率是整个 Java 堆的 45%。</p><p>避免使用以下参数：</p><p>避免使用 -Xmn 选项或 -XX:NewRatio 等其他相关选项显式设置年轻代大小。固定年轻代的大小会覆盖暂停时间目标。</p><h3 id="触发Full-GC"><a href="#触发Full-GC" class="headerlink" title="触发Full GC"></a>触发Full GC</h3><p>在某些情况下，G1触发了Full GC，这时G1会退化使用Serial收集器来完成垃圾的清理工作，它仅仅使用单线程来完成GC工作，GC暂停时间将达到秒级别的。整个应用处于假死状态，不能处理任何请求，我们的程序当然不希望看到这些。那么发生Full GC的情况有哪些呢？</p><h4 id="并发模式失败"><a href="#并发模式失败" class="headerlink" title="并发模式失败"></a>并发模式失败</h4><p>G1启动标记周期，但在Mix GC之前，老年代就被填满，这时候G1会放弃标记周期。这种情形下，需要增加堆大小，或者调整周期（例如增加线程数-XX:ConcGCThreads等）。</p><h4 id="晋升失败或者疏散失败"><a href="#晋升失败或者疏散失败" class="headerlink" title="晋升失败或者疏散失败"></a>晋升失败或者疏散失败</h4><p>G1在进行GC的时候没有足够的内存供存活对象或晋升对象使用，由此触发了Full GC。可以在日志中看到(to-space exhausted)或者（to-space overflow）。解决这种问题的方式是：</p><p>a. 增加 <code>-XX:G1ReservePercent</code> 选项的值（并相应增加总的堆大小），为“目标空间”增加预留内存量。</p><p>b. 通过减少<code> -XX:InitiatingHeapOccupancyPercent</code> 提前启动标记周期。</p><p>c. 也可以通过增加 <code>-XX:ConcGCThreads</code> 选项的值来增加并行标记线程的数目。</p><h4 id="巨型对象分配失败"><a href="#巨型对象分配失败" class="headerlink" title="巨型对象分配失败"></a>巨型对象分配失败</h4><p>当巨型对象找不到合适的空间进行分配时，就会启动Full GC，来释放空间。这种情况下，应该避免分配大量的巨型对象，增加内存或者增大-XX:G1HeapRegionSize，使巨型对象不再是巨型对象。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>转载 深入理解JVM虚拟机 第三章</li><li>转载 <a href="http://blog.jobbole.com/109170/">《深入理解 Java G1 垃圾收集器》</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud入门2-Springboot监控模块(actuator)</title>
      <link href="2018/03/04/springboot-actuator/"/>
      <url>2018/03/04/springboot-actuator/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习一项新技术最大的困难是什么？ 是资料。让人高兴的是找到了一本系统学习Spring Cloud的教程，《Spring Cloud微服务实战》, 接下来的学习目标将以此书顺序演进。</p><p>虽然Springboot 2.0刚刚发布，鉴于当下资料都是基于1.x的，对于初学者，站在前人的肩膀上会少踩坑。因此，接下来都将采用<code>1.5.10.RELEASE</code>。</p><p>上一节，<a href="">SpringCloud入门1-服务注册与发现(Eureka)</a> 中已经尝试使用了<code>spring-boot-starter-actuator</code>模块中的健康检查端点，接下来将系统的学习该模块的功能。</p><blockquote><p>Spring Boot includes a number of additional features to help you monitor and manage your application when it’s pushed to production. You can choose to manage and monitor your application using HTTP endpoints, with JMX or even by remote shell (SSH or Telnet). Auditing, health and metrics gathering can be automatically applied to your application.</p></blockquote><a id="more"></a><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>测试代码： <a href="https://github.com/Ryan-Miao/actuator-demo">https://github.com/Ryan-Miao/actuator-demo</a></p><p>如同上一节中所引入的方式一样。创建一个springboot项目，并添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>actuator 美 [‘æktʃʊˌeɪtə]</p><p>接下来，启动项目。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> .   ____          _            __ _ _</span><br><span class="line"> &#x2F;\\ &#x2F; ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &#39;_ | &#39;_| | &#39;_ \&#x2F; _&#96; | \ \ \ \</span><br><span class="line"> \\&#x2F;  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &#39;  |____| .__|_| |_|_| |_\__, | &#x2F; &#x2F; &#x2F; &#x2F;</span><br><span class="line"> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|_|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|___&#x2F;&#x3D;&#x2F;_&#x2F;_&#x2F;_&#x2F;</span><br><span class="line"> :: Spring Boot ::       (v1.5.10.RELEASE)</span><br><span class="line"></span><br><span class="line">2018-03-04 12:15:52.611  INFO 18468 --- [           main] com.test.actuator.ActuatorApplication    : Starting ActuatorApplication on DESKTOP-4MOUU2Q with PID 18468 (D:\workspace\learn\springcloud\actuator-demo\target\classes started by Ryan in D:\workspace\learn\springcloud\actuator-demo)</span><br><span class="line">2018-03-04 12:15:52.615  INFO 18468 --- [           main] com.test.actuator.ActuatorApplication    : No active profile set, falling back to default profiles: default</span><br><span class="line">2018-03-04 12:15:52.709  INFO 18468 --- [           main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1efee8e7: startup date [Sun Mar 04 12:15:52 CST 2018]; root of context hierarchy</span><br><span class="line">2018-03-04 12:15:55.125  INFO 18468 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat initialized with port(s): 8080 (http)</span><br><span class="line">2018-03-04 12:15:55.140  INFO 18468 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</span><br><span class="line">2018-03-04 12:15:55.140  INFO 18468 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat&#x2F;8.5.27</span><br><span class="line">2018-03-04 12:15:55.265  INFO 18468 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[&#x2F;]       : Initializing Spring embedded WebApplicationContext</span><br><span class="line">2018-03-04 12:15:55.265  INFO 18468 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2588 ms</span><br><span class="line">2018-03-04 12:15:55.512  INFO 18468 --- [ost-startStop-1] o.s.b.w.servlet.ServletRegistrationBean  : Mapping servlet: &#39;dispatcherServlet&#39; to [&#x2F;]</span><br><span class="line">2018-03-04 12:15:55.512  INFO 18468 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &#39;metricsFilter&#39; to: [&#x2F;*]</span><br><span class="line">2018-03-04 12:15:55.512  INFO 18468 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &#39;characterEncodingFilter&#39; to: [&#x2F;*]</span><br><span class="line">2018-03-04 12:15:55.512  INFO 18468 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &#39;hiddenHttpMethodFilter&#39; to: [&#x2F;*]</span><br><span class="line">2018-03-04 12:15:55.512  INFO 18468 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &#39;httpPutFormContentFilter&#39; to: [&#x2F;*]</span><br><span class="line">2018-03-04 12:15:55.512  INFO 18468 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &#39;requestContextFilter&#39; to: [&#x2F;*]</span><br><span class="line">2018-03-04 12:15:55.512  INFO 18468 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &#39;webRequestLoggingFilter&#39; to: [&#x2F;*]</span><br><span class="line">2018-03-04 12:15:55.512  INFO 18468 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &#39;applicationContextIdFilter&#39; to: [&#x2F;*]</span><br><span class="line">2018-03-04 12:15:55.926  INFO 18468 --- [           main] s.w.s.m.m.a.RequestMappingHandlerAdapter : Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1efee8e7: startup date [Sun Mar 04 12:15:52 CST 2018]; root of context hierarchy</span><br><span class="line">2018-03-04 12:15:56.004  INFO 18468 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;&#123;[&#x2F;error]&#125;&quot; onto public org.springframework.http.ResponseEntity&lt;java.util.Map&lt;java.lang.String, java.lang.Object&gt;&gt; org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)</span><br><span class="line">2018-03-04 12:15:56.004  INFO 18468 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;&#123;[&#x2F;error],produces&#x3D;[text&#x2F;html]&#125;&quot; onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)</span><br><span class="line">2018-03-04 12:15:56.051  INFO 18468 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [&#x2F;webjars&#x2F;**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</span><br><span class="line">2018-03-04 12:15:56.051  INFO 18468 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [&#x2F;**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</span><br><span class="line">2018-03-04 12:15:56.097  INFO 18468 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [&#x2F;**&#x2F;favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</span><br><span class="line">2018-03-04 12:15:56.387  INFO 18468 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped &quot;&#123;[&#x2F;env&#x2F;&#123;name:.*&#125;],methods&#x3D;[GET],produces&#x3D;[application&#x2F;vnd.spring-boot.actuator.v1+json || application&#x2F;json]&#125;&quot; onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EnvironmentMvcEndpoint.value(java.lang.String)</span><br><span class="line">2018-03-04 12:15:56.387  INFO 18468 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped &quot;&#123;[&#x2F;env || &#x2F;env.json],methods&#x3D;[GET],produces&#x3D;[application&#x2F;vnd.spring-boot.actuator.v1+json || application&#x2F;json]&#125;&quot; onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()</span><br><span class="line">2018-03-04 12:15:56.387  INFO 18468 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped &quot;&#123;[&#x2F;info || &#x2F;info.json],methods&#x3D;[GET],produces&#x3D;[application&#x2F;vnd.spring-boot.actuator.v1+json || application&#x2F;json]&#125;&quot; onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()</span><br><span class="line">2018-03-04 12:15:56.387  INFO 18468 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped &quot;&#123;[&#x2F;health || &#x2F;health.json],methods&#x3D;[GET],produces&#x3D;[application&#x2F;vnd.spring-boot.actuator.v1+json || application&#x2F;json]&#125;&quot; onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint.invoke(javax.servlet.http.HttpServletRequest,java.security.Principal)</span><br><span class="line">2018-03-04 12:15:56.387  INFO 18468 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped &quot;&#123;[&#x2F;mappings || &#x2F;mappings.json],methods&#x3D;[GET],produces&#x3D;[application&#x2F;vnd.spring-boot.actuator.v1+json || application&#x2F;json]&#125;&quot; onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()</span><br><span class="line">2018-03-04 12:15:56.387  INFO 18468 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped &quot;&#123;[&#x2F;trace || &#x2F;trace.json],methods&#x3D;[GET],produces&#x3D;[application&#x2F;vnd.spring-boot.actuator.v1+json || application&#x2F;json]&#125;&quot; onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()</span><br><span class="line">2018-03-04 12:15:56.387  INFO 18468 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped &quot;&#123;[&#x2F;dump || &#x2F;dump.json],methods&#x3D;[GET],produces&#x3D;[application&#x2F;vnd.spring-boot.actuator.v1+json || application&#x2F;json]&#125;&quot; onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()</span><br><span class="line">2018-03-04 12:15:56.403  INFO 18468 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped &quot;&#123;[&#x2F;loggers&#x2F;&#123;name:.*&#125;],methods&#x3D;[GET],produces&#x3D;[application&#x2F;vnd.spring-boot.actuator.v1+json || application&#x2F;json]&#125;&quot; onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.LoggersMvcEndpoint.get(java.lang.String)</span><br><span class="line">2018-03-04 12:15:56.403  INFO 18468 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped &quot;&#123;[&#x2F;loggers&#x2F;&#123;name:.*&#125;],methods&#x3D;[POST],consumes&#x3D;[application&#x2F;vnd.spring-boot.actuator.v1+json || application&#x2F;json],produces&#x3D;[application&#x2F;vnd.spring-boot.actuator.v1+json || application&#x2F;json]&#125;&quot; onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.LoggersMvcEndpoint.set(java.lang.String,java.util.Map&lt;java.lang.String, java.lang.String&gt;)</span><br><span class="line">2018-03-04 12:15:56.403  INFO 18468 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped &quot;&#123;[&#x2F;loggers || &#x2F;loggers.json],methods&#x3D;[GET],produces&#x3D;[application&#x2F;vnd.spring-boot.actuator.v1+json || application&#x2F;json]&#125;&quot; onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()</span><br><span class="line">2018-03-04 12:15:56.403  INFO 18468 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped &quot;&#123;[&#x2F;autoconfig || &#x2F;autoconfig.json],methods&#x3D;[GET],produces&#x3D;[application&#x2F;vnd.spring-boot.actuator.v1+json || application&#x2F;json]&#125;&quot; onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()</span><br><span class="line">2018-03-04 12:15:56.403  INFO 18468 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped &quot;&#123;[&#x2F;metrics&#x2F;&#123;name:.*&#125;],methods&#x3D;[GET],produces&#x3D;[application&#x2F;vnd.spring-boot.actuator.v1+json || application&#x2F;json]&#125;&quot; onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint.value(java.lang.String)</span><br><span class="line">2018-03-04 12:15:56.403  INFO 18468 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped &quot;&#123;[&#x2F;metrics || &#x2F;metrics.json],methods&#x3D;[GET],produces&#x3D;[application&#x2F;vnd.spring-boot.actuator.v1+json || application&#x2F;json]&#125;&quot; onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()</span><br><span class="line">2018-03-04 12:15:56.403  INFO 18468 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped &quot;&#123;[&#x2F;auditevents || &#x2F;auditevents.json],methods&#x3D;[GET],produces&#x3D;[application&#x2F;vnd.spring-boot.actuator.v1+json || application&#x2F;json]&#125;&quot; onto public org.springframework.http.ResponseEntity&lt;?&gt; org.springframework.boot.actuate.endpoint.mvc.AuditEventsMvcEndpoint.findByPrincipalAndAfterAndType(java.lang.String,java.util.Date,java.lang.String)</span><br><span class="line">2018-03-04 12:15:56.403  INFO 18468 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped &quot;&#123;[&#x2F;configprops || &#x2F;configprops.json],methods&#x3D;[GET],produces&#x3D;[application&#x2F;vnd.spring-boot.actuator.v1+json || application&#x2F;json]&#125;&quot; onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()</span><br><span class="line">2018-03-04 12:15:56.403  INFO 18468 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped &quot;&#123;[&#x2F;beans || &#x2F;beans.json],methods&#x3D;[GET],produces&#x3D;[application&#x2F;vnd.spring-boot.actuator.v1+json || application&#x2F;json]&#125;&quot; onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()</span><br><span class="line">2018-03-04 12:15:56.403  INFO 18468 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped &quot;&#123;[&#x2F;heapdump || &#x2F;heapdump.json],methods&#x3D;[GET],produces&#x3D;[application&#x2F;octet-stream]&#125;&quot; onto public void org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint.invoke(boolean,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.io.IOException,javax.servlet.ServletException</span><br><span class="line">2018-03-04 12:15:56.512  INFO 18468 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup</span><br><span class="line">2018-03-04 12:15:56.512  INFO 18468 --- [           main] o.s.c.support.DefaultLifecycleProcessor  : Starting beans in phase 0</span><br><span class="line">2018-03-04 12:15:56.747  INFO 18468 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080 (http)</span><br><span class="line">2018-03-04 12:15:56.747  INFO 18468 --- [           main] com.test.actuator.ActuatorApplication    : Started ActuatorApplication in 4.615 seconds (JVM running for 5.11)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到url mapping多了几个。接下来，分别看看这几个接口的内容。</p><p>访问这几个接口的时候发现啥也没有，然后看到控制台提示，这些敏感信息需要加密。所以，必须引入security模块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>设置用户名密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">security.user.name&#x3D;admin</span><br><span class="line">security.user.password&#x3D;123456</span><br></pre></td></tr></table></figure><p>然后，重启，访问<a href="http://localhost:8080/health">http://localhost:8080/health</a> 得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;status&quot;: &quot;UP&quot;,</span><br><span class="line">    &quot;diskSpace&quot;: &#123;</span><br><span class="line">        &quot;status&quot;: &quot;UP&quot;,</span><br><span class="line">        &quot;total&quot;: 126702579712,</span><br><span class="line">        &quot;free&quot;: 71547412480,</span><br><span class="line">        &quot;threshold&quot;: 10485760</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="端点endpoint"><a href="#端点endpoint" class="headerlink" title="端点endpoint"></a>端点endpoint</h2><p>Actuator endpoints可以让我们监控和与我们的应用(application)交互。Spring Boot actuator包含了大量的内置endpoints， 当然，我们也可以添加我们自己的。</p><p>如何暴露端口取决与你采用的技术。大多数应用采用HTTP监控，这时，endpoint的ID就映射为一个接口URL。比如，默认<code>health</code>映射为<code>/health</code>. (2.0貌似不是这样，后面再看)</p><p>自带的内置endpoint大概有这些(sensitive是指需要密码)：</p><table><thead><tr><th>ID</th><th>Description</th><th>Sensitive Default</th></tr></thead><tbody><tr><td>actuator</td><td>提供端点基本信息，”discovery page”</td><td>true</td></tr><tr><td>auditevents</td><td>提供审计事件信息</td><td>true</td></tr><tr><td>autoconfig</td><td>提供auto-configuration报告，显示所有的自动配置项以及生效和不生效的原因</td><td>true</td></tr><tr><td>beans</td><td>显示应用中所有的bean</td><td>true</td></tr><tr><td>configprops</td><td>显示整理过的<code>@ConfigurationProperties</code></td><td>true</td></tr><tr><td>dump</td><td>显示线程dump信息</td><td>true</td></tr><tr><td>env</td><td>显示Spring的<code>ConfigurableEnvironment</code>属性</td><td>true</td></tr><tr><td>flyway</td><td>显示应用的所有Flyway database迁移</td><td>true</td></tr><tr><td>health</td><td>显示系统健康状态(登陆后显示详细信息)</td><td>false</td></tr><tr><td>info</td><td>显示一些自定义信息</td><td>false</td></tr><tr><td>loggers</td><td>显示和更改应用的logger配置</td><td>true</td></tr><tr><td>liquibase</td><td>显示所有的Liquibase database迁移</td><td>true</td></tr><tr><td>metrics</td><td>显示当前的metrics信息</td><td>true</td></tr><tr><td>mappings</td><td>显示所有<code>@RequestMapping</code></td><td>true</td></tr><tr><td>shutdown</td><td>允许应用程序正常关机（默认情况下未启用）。</td><td>true</td></tr><tr><td>trace</td><td>显示跟踪信息（默认情况下是最近的100个HTTP请求）</td><td>true</td></tr></tbody></table><p>如果是Spring MVC, 还有以下几个：</p><table><thead><tr><th>ID</th><th>Description</th><th>Sensitive  Default</th></tr></thead><tbody><tr><td>docs</td><td>显示actuator的文档。需要引入<code>spring-boot-actuator-docs</code></td><td>false</td></tr><tr><td>heapdump</td><td>返回<code>hprof</code> 文件</td><td>true</td></tr><tr><td>jolokia</td><td>通过HTTP公开JMX bean（当Jolokia位于类路径中时）。</td><td>true</td></tr><tr><td>logfile</td><td>返回日志文件的内容（如果logging.file或logging.path属性已设置）。支持使用HTTP范围头来检索部分日志文件的内容。</td><td>true</td></tr></tbody></table><p>根据endpoint的作用，可以将原生endpoint分为3类</p><ol><li>应用配置类： 获取应用程序中加载的应用配置、环境变量、自动化配置报告等与Spring Boot应用密切相关的配置类信息。</li><li>度量指标类： 获取应用程序运行过程中用于监控的度量指标，比如内存信息、线程池信息、HTTP请求统计等。</li><li>操作控制类：提供对应用的关闭等操作类功能。</li></ol><h3 id="应用配置类"><a href="#应用配置类" class="headerlink" title="应用配置类"></a>应用配置类</h3><p>由于Spring Boot为了改善传统Spring应用复杂的配置，采用了包扫描和自动化配置机制来加载原来集中与XML的内容。虽然这样做让我们代码变得简洁，但整个应用的实例创建和依赖关系等信息都被离散到了各个配置类的注解上。这使我们分析整个应用中资源和实例的各种关系变得非常困难。而这类endpoint可以帮助我们轻松获取一系列关于Spring配置内容的详细报告，比如自动化配置的报告、Bean创建的报告、环境属性的报告等。</p><p><code>/env</code>: 对于密码属性，属性名中包含password、secret、key这些关键词，会返回**代替value。</p><p><code>/info</code>: 自定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">info.app.name&#x3D;spring boot demo</span><br><span class="line">info.app.version&#x3D;1.0</span><br></pre></td></tr></table></figure><h3 id="度量指标类"><a href="#度量指标类" class="headerlink" title="度量指标类"></a>度量指标类</h3><p><code>/metrics</code>: 返回内存信息、线程信息、垃圾回收信息等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;mem&quot;: 437985,</span><br><span class="line">    &quot;mem.free&quot;: 342068,</span><br><span class="line">    &quot;processors&quot;: 4,</span><br><span class="line">    &quot;instance.uptime&quot;: 19821025,</span><br><span class="line">    &quot;uptime&quot;: 19812936,</span><br><span class="line">    &quot;systemload.average&quot;: -1,</span><br><span class="line">    &quot;heap.committed&quot;: 382464,</span><br><span class="line">    &quot;heap.init&quot;: 131072,</span><br><span class="line">    &quot;heap.used&quot;: 40395,</span><br><span class="line">    &quot;heap&quot;: 1846272,</span><br><span class="line">    &quot;nonheap.committed&quot;: 56848,</span><br><span class="line">    &quot;nonheap.init&quot;: 2496,</span><br><span class="line">    &quot;nonheap.used&quot;: 55521,</span><br><span class="line">    &quot;nonheap&quot;: 0,</span><br><span class="line">    &quot;threads.peak&quot;: 25,</span><br><span class="line">    &quot;threads.daemon&quot;: 21,</span><br><span class="line">    &quot;threads.totalStarted&quot;: 28,</span><br><span class="line">    &quot;threads&quot;: 23,</span><br><span class="line">    &quot;classes&quot;: 6792,</span><br><span class="line">    &quot;classes.loaded&quot;: 6843,</span><br><span class="line">    &quot;classes.unloaded&quot;: 51,</span><br><span class="line">    &quot;gc.ps_scavenge.count&quot;: 8,</span><br><span class="line">    &quot;gc.ps_scavenge.time&quot;: 98,</span><br><span class="line">    &quot;gc.ps_marksweep.count&quot;: 3,</span><br><span class="line">    &quot;gc.ps_marksweep.time&quot;: 322,</span><br><span class="line">    &quot;httpsessions.max&quot;: -1,</span><br><span class="line">    &quot;httpsessions.active&quot;: 0,</span><br><span class="line">    &quot;gauge.response.actuator&quot;: 224,</span><br><span class="line">    &quot;gauge.response.loggers&quot;: 23,</span><br><span class="line">    &quot;gauge.response.env&quot;: 12,</span><br><span class="line">    &quot;gauge.response.docs.star-star&quot;: 19,</span><br><span class="line">    &quot;gauge.response.autoconfig&quot;: 67,</span><br><span class="line">    &quot;gauge.response.trace&quot;: 17,</span><br><span class="line">    &quot;gauge.response.metrics&quot;: 8,</span><br><span class="line">    &quot;gauge.response.heapdump.root&quot;: 2656,</span><br><span class="line">    &quot;gauge.response.docs&quot;: 3,</span><br><span class="line">    &quot;gauge.response.configprops&quot;: 167,</span><br><span class="line">    &quot;gauge.response.star-star&quot;: 8,</span><br><span class="line">    &quot;counter.status.302.docs&quot;: 2,</span><br><span class="line">    &quot;counter.status.200.actuator&quot;: 1,</span><br><span class="line">    &quot;counter.status.200.loggers&quot;: 1,</span><br><span class="line">    &quot;counter.status.200.docs.star-star&quot;: 4,</span><br><span class="line">    &quot;counter.status.200.metrics&quot;: 2,</span><br><span class="line">    &quot;counter.status.200.configprops&quot;: 1,</span><br><span class="line">    &quot;counter.status.404.star-star&quot;: 5,</span><br><span class="line">    &quot;counter.status.200.autoconfig&quot;: 1,</span><br><span class="line">    &quot;counter.status.200.heapdump.root&quot;: 1,</span><br><span class="line">    &quot;counter.status.200.env&quot;: 1,</span><br><span class="line">    &quot;counter.status.200.trace&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>系统信息：包括处理器数量processors，运行时间uptime和instance.uptime,系统平均负载systemload.average.</li><li>mem.*: 内存概要信息。包括分配给应用的总内存数量以及当前空闲的内存数量。这些信息来自java.lang.Runtime。</li><li>heap.*: 堆内存使用情况。 这些信息来自 java.lang.management.MemoryMXBean 接口中 getHeapMemoryUsage 方法获取的 java.lang.management.MemoryUsage。</li><li>nonheap. *: 非堆内存使用情况。 这些信息来自 java.lang.management.MemoryMXBean接口中ge七NonHeapMemoryUsage方法获取的java.lang.managemen七.MemoryUsage。</li><li>threads.*: 线程使用情况，包括线程数、守护线程数(daemon汃线程峰值(peak)等，这些数据均来自java.lang.management.ThreadMXBean。</li><li>classes.*: 应用加载和卸载的类统计。这些数据均来自java.lang.management．ClassLoadingMXBean。</li><li>gc. *: 垃圾收集器的详细信息，包括垃圾回收次数gc.ps—scavenge.count、垃圾回收消耗时间 gc.ps _ scavenge.time、 标记－清除算法的次数 gc.psmarksweep.count、 标记－清除算法的消耗时间gc.ps_marksweep.time。这些数据均来自java.lang.managemen七.GarbageCollectorMXBean。</li><li>httpsessions. * : Tomcat容 器 的会话使用情况。包括最大会话数httpsessions.max和活跃会话数httpsessions.ac巨ve。 该度量指标信息仅在引入嵌入式Tomcat作为应用容器的时候才会提供。</li><li>gauge.*: HTTP请求的性能指标之 一 ，它主要用来反映 一 个绝对数值。 比如上面示例中的gauge.response.hello: 5, 它表示上一次hello请求的延迟时间为5毫秒。</li><li>counter.*: HTTP 请求的性能指标之 一 ，它主要作为计 数器来使用，记录了增加量和减少量。 上述示例中的counter.s七红us.200.hello: 11, 它代表了 hello请求返回200状态的次数为11。</li></ol><p>对于gauge.*和counter.*的统计， 这里有一 个特殊的内容请求 star-star,它代表了对静态资源的访问。 这两类度量指标非常有用，我们不仅可以使用它默认的统计指标，还可以在程序中轻松地增加自定义 统计 值。只需要通过注org.springframework.boot.actuate.metrics.CounterService和org.springframework.boot.actuate.metrics.GaugeService 来实现自定义的统计指标信息。比如我们可以像下面这样自定义实现对hello接口的访问次数统计。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Qualifier(&quot;counterService&quot;)</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CounterService counterService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;hello&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        counterService.increment(<span class="string">&quot;test.hello.count&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> counterService.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>/metrics端点可以提供应用运行状态的完整度量指标报告，这项功能 非常实用，但是对千监控系 统中的各项监控功能，它们的监控内容、 数据收集频率都有所不同，如果每次都通过全量获取报告的方式来收集，略显粗暴。 所以，我们还可以通过/metrics/{name}接口来更细粒度地获取度量信息 ， 比如可以通过访问/metrics/mem.free来获取当前可用内存数量。</p><p>/health:  在spring-boot-s七arter-ac七uator模块中自带实现了一 些常用资源的健康指标检测器。这些检测器 都通过Hea巨hindicator接口实现，并且会根据依赖关系的引入实现自动化装配， 比如下面列出的这些。</p><p>CassandraHealthIndicator，DiskSpaceHealthIndicator，DataSourceHealthIndicator，ElasticsearchHealthIndicator，JmsHealthIndicator，MailHealthIndicator，MongoHealthIndicator，RabbitHealthIndicator，RedisHealthIndicator，SolrHealthIndicator</p><p>可以通过<code>management.health.defaults.enabled</code>来控制上述健康检查是否生效。</p><p>也可以自定义，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RocketMQHealthIndicator</span> <span class="keyword">implements</span> <span class="title">HealthIndicator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Health <span class="title">health</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> errorCode = check();</span><br><span class="line">        <span class="keyword">if</span> (errorCode != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Health.down().withDetail(<span class="string">&quot;Error Code&quot;</span>, errorCode).build();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Health.up().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 自定义健康检查</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> /dump:  该端点用来暴露程序运行中的线程信息。它使用 java.lang.rnanagernent.ThreadMXBean 的 durnpAllThreads 方法来返回所有含有同步信息的活动线程详情。</p><p>/trace:  该端点用来返回基本的 HTTP 跟踪信息。 默认情况下， 跟踪信息的存储采用org.springfrarnework.boo七.ac七uate.trace.InMernoryTraceRepository实现的内存方式， 默认始终保留最近的100条请求记录。</p><h2 id="修改endpoint配置"><a href="#修改endpoint配置" class="headerlink" title="修改endpoint配置"></a>修改endpoint配置</h2><p>上述的自带属性可以通过配置文件修改默认配置。key前缀为<code>endpoints.*</code></p><p>比如，修改<code>beans</code>和<code>shutdown</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">endpoints.beans.id&#x3D;springbeans</span><br><span class="line">endpoints.beans.sensitive&#x3D;false</span><br><span class="line">endpoints.shutdown.enabled&#x3D;true</span><br></pre></td></tr></table></figure><p>默认所有的endpoint可用，除了<code>shutdown</code>。当然，可以是全部关闭，然后单独打开。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">endpoints.enabled&#x3D;false</span><br><span class="line">endpoints.info.enabled&#x3D;true</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以设置全局属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">endpoints.sensitive&#x3D;true</span><br><span class="line">endpoints.info.sensitive&#x3D;false</span><br></pre></td></tr></table></figure><h2 id="设置跨域"><a href="#设置跨域" class="headerlink" title="设置跨域"></a>设置跨域</h2><p>如果想在别的域名下调用，则需要设置允许跨域。当然可以自己手动写跨域拦截。但actuator也提供了配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">endpoints.cors.allowed-origins&#x3D;http:&#x2F;&#x2F;example.com</span><br><span class="line">endpoints.cors.allowed-methods&#x3D;GET,POST</span><br></pre></td></tr></table></figure><h2 id="添加自定义endpoint"><a href="#添加自定义endpoint" class="headerlink" title="添加自定义endpoint"></a>添加自定义endpoint</h2><p>配置<code>@Bean</code>的<code>Endpoint</code>对象即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Endpoint <span class="title">myEndpoint</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Endpoint&lt;Map&lt;String,Object&gt;&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;my-endpoint&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSensitive</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">invoke</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> Map&lt;String, Object&gt; dataToDisplay = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">dataToDisplay.put(<span class="string">&quot;some&quot;</span>, <span class="string">&quot;thing&quot;</span>);</span><br><span class="line">dataToDisplay.put(<span class="string">&quot;you&quot;</span>, <span class="string">&quot;want&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> dataToDisplay;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#production-ready">https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#production-ready</a></li><li>《Spring Cloud微服务实战》</li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> 监控 </tag>
            
            <tag> actuator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud入门1-服务注册与发现(Eureka)</title>
      <link href="2018/03/03/springcloud-eureka/"/>
      <url>2018/03/03/springcloud-eureka/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Oracle转让Java，各种动态语言的曝光率上升，Java工程师的未来在哪里？我觉得Spring Cloud让未来有无限可能。拖了半年之久的Spring Cloud学习就从今天开始了。中文教材不多，而且大多都是简单的离散的信息，想要找到企业级的一体化解决方案很少。不过，对于入门来说，简单就够了，等到用的时候自然而然的汇总起来。</p><p>目标是把springcloud的子项目过一遍。</p><p>|Component|    Edgware.SR2    |Finchley.M7|    Finchley.BUILD-SNAPSHOT|<br>|—|—|—|—|—|<br>|spring-cloud-aws|    1.2.2.RELEASE|    2.0.0.M4|    2.0.0.BUILD-SNAPSHOT|<br>|spring-cloud-bus|    1.3.2.RELEASE|    2.0.0.M6|    2.0.0.BUILD-SNAPSHOT|<br>|spring-cloud-cli|    1.4.1.RELEASE|    2.0.0.M1|    2.0.0.BUILD-SNAPSHOT|<br>|spring-cloud-commons|    1.3.2.RELEASE|    2.0.0.M7|    2.0.0.BUILD-SNAPSHOT|<br>|spring-cloud-contract    |1.2.3.RELEASE|    2.0.0.M7|    2.0.0.BUILD-SNAPSHOT|<br>|spring-cloud-config|    1.4.2.RELEASE|    2.0.0.M7|    2.0.0.BUILD-SNAPSHOT|<br>|spring-cloud-netflix|    1.4.3.RELEASE|    2.0.0.M7|    2.0.0.BUILD-SNAPSHOT|<br>|spring-cloud-security|    1.2.2.RELEASE|    2.0.0.M2|    2.0.0.BUILD-SNAPSHOT|<br>|spring-cloud-cloudfoundry|    1.1.1.RELEASE|    2.0.0.M3|    2.0.0.BUILD-SNAPSHOT|<br>|spring-cloud-consul|    1.3.2.RELEASE|    2.0.0.M6|    2.0.0.BUILD-SNAPSHOT|<br>|spring-cloud-sleuth|    1.3.2.RELEASE|    2.0.0.M7|    2.0.0.BUILD-SNAPSHOT|<br>|spring-cloud-stream|    Ditmars.SR3|    Elmhurst.RC1|    Elmhurst.BUILD-SNAPSHOT|<br>|spring-cloud-zookeeper|    1.2.0.RELEASE|    2.0.0.M6|    2.0.0.BUILD-SNAPSHOT|<br>|spring-boot|    1.5.10.RELEASE|    2.0.0.RC2|    2.0.0.BUILD-SNAPSHOT|<br>|spring-cloud-task|    1.2.2.RELEASE|    2.0.0.M3|    2.0.0.RELEASE|<br>|spring-cloud-vault|    1.1.0.RELEASE|    2.0.0.M6|    2.0.0.BUILD-SNAPSHOT|<br>|spring-cloud-gateway|    1.0.1.RELEASE|    2.0.0.M7|    2.0.0.BUILD-SNAPSHOT|<br>|spring-cloud-openfeign|    |     2.0.0.M1|    2.0.0.BUILD-SNAPSHOT|</p><p>本次学习服务注册与发现， Eureka。</p><a id="more"></a><h2 id="Eureka介绍"><a href="#Eureka介绍" class="headerlink" title="Eureka介绍"></a>Eureka介绍</h2><p>Eureka是一个基于REST(Representational State Transfer)的服务，主要用于AWS cloud， 提供服务定位(locating services)、负载均衡(load balancing)、故障转移(failover of middle-tier servers)。我们把它叫做<strong>Eureka Server</strong>. Eureka也提供了基于Java的客户端组件，<strong>Eureka Client</strong>,内置的负载均衡器可以实现基本的round-robin负载均衡能力。在Netflix，一个基于Eureka的更复杂的负载均衡器针对多种因素(如流量、资源利用率、错误状态等)提供加权负载均衡，以实现高可用(superior resiliency).</p><h3 id="为什么需要Eureka"><a href="#为什么需要Eureka" class="headerlink" title="为什么需要Eureka"></a>为什么需要Eureka</h3><p>在AWS Cloud，由于其天生的特性，服务器经常变换。我们知道每个EC2挂掉后，重启又是一个新的。不像传统的固定IP，AWS的服务器是变化的。因此需要更复杂的负载均衡方案来动态注册和注销。由于AWS并没有提供中间层负载均衡解决方案，Eureka填补了这个领域的巨大空白。</p><h3 id="Eureka和AWS-ELB有什么不同"><a href="#Eureka和AWS-ELB有什么不同" class="headerlink" title="Eureka和AWS ELB有什么不同"></a>Eureka和AWS ELB有什么不同</h3><p>AWS ELB(Elastic Load Balancer)是面向最终用户Web流量的边缘服务的负载均衡解决方案。Eureka填补了对中间层负载均衡的需求。理论上，你可以把中间层服务放在AWS ELB之后，但在EC2模型中，你将会把他们直接暴露到外网，从而失去了AWS security groups的好处。(这里有疑问，我现实使用的时候ELB也有区分VPC的，所以不会暴露到外网，不知道是不是本文发布的时候AWS还没这功能，所以感觉Eureka和ELB区别不大啊)。</p><p>AWS ELB也是一种传统的基于代理的负载平衡解决方案，而Eureka则不同之处在于负载平衡发生在实例/服务器/主机级别。客户端实例知道他们需要与哪些服务器交互的所有信息。这样的好坏取决于你怎么看待它。如果你想要AWS现在提供的基于粘滞用户session的负载均衡，Eureka没有开箱即用的解决方案。在Netflix，我们更喜欢我们的服务是无状态的(非粘性)。这有利于提供更好的扩展性，Eureka非常适合解决这个问题。(感觉这段也是吹水，现在的web交互大都是无状态的，状态通过redis，message queue等第三方维护，ELB照样可以提供)。</p><p>使用Eureka区分基于代理的负载平衡和负载平衡的另一个重要方面是，<strong>您的应用程序可以灵活地处理负载平衡器的中断，因为有关可用服务器的信息会缓存在客户端上。这确实需要少量的内存，但换得更好的弹性。</strong></p><h3 id="Eureka和Route-53有什么不同"><a href="#Eureka和Route-53有什么不同" class="headerlink" title="Eureka和Route 53有什么不同"></a>Eureka和Route 53有什么不同</h3><p>Route 53是一个域名服务，就像Eureka可以为中层服务器提供相同的服务一样，但仅此而已。 Route 53是一项DNS服务，即使对于非AWS数据中心，也可以托管您的DNS记录。 Route 53还可以在AWS区域间执行基于延迟的路由。Eureka类似于内部DNS，与全世界的DNS服务器无关。Eureka也是区域隔离的，因为它不知道其他AWS区域中的服务器。保存信息的主要目的是在区域内进行负载平衡。</p><p>虽然你可以在Route 53中注册你的中间层服务器，并依赖AWS安全组保护你的服务器不受外网访问，但你的中间层服务器身份仍然暴露于外网环境。它同样带有传统基于DNS的负载均衡方案的缺点，其中流量仍然会被路由到已经不健康或已经不存在的服务器上（在AWS云中，服务器随时可能消失）。</p><h3 id="Eureka如何使用？"><a href="#Eureka如何使用？" class="headerlink" title="Eureka如何使用？"></a>Eureka如何使用？</h3><p>在Netflix，Eureka不仅是中间层负载均衡关键部分，还有以下功能：</p><p>与Netflix Asgard一起提供红/黑部署服务， Asgard是一个让云部署更方便的开源服务。Eureka会与Asgard搭配，让应用在新/老版本部署切换，让故障处理更快速和无缝，尤其是当启动100个实例部署时要花费很长时间的时候。</p><p>当我们的cassandra需要维护时，停止Cassandra实例。</p><p>为我们的memcached缓存服务提供识别环上实例列表功能。</p><p>为特定的应用提供因意外导致故障保存元信息的服务。</p><h3 id="Eureka使用时机？"><a href="#Eureka使用时机？" class="headerlink" title="Eureka使用时机？"></a>Eureka使用时机？</h3><p>当你的服务运行在AWS云上并且你不希望使用AWS ELB注册或暴露给外网。你要么需要使用类似round-robin这种简单的负载均衡方案或者想要写一个基于Eureka包装过的符合要求的负载均衡器。你没有session粘性，没有session绑定机制和在外部缓存(例如 memcached)载入会话数据的需要。更重要的是，如果你的架构风格适合一个基于客户端的负载均衡模型，Eureka相当适合这个场景。</p><p>应用客户端和应用服务端如何通信？</p><p>通信技术可以是任何你喜欢的。Eureka帮你找到你需要通信的服务信息但没有引入任何通信协议或方法的限制。比如，你可以用Eureka获取目标服务器地址并使用thrift,http(s)或其他RPC机制的协议。</p><h3 id="Eureka架构"><a href="#Eureka架构" class="headerlink" title="Eureka架构"></a>Eureka架构</h3><p><img src="https://raw.githubusercontent.com/Netflix/eureka/master/images/eureka_architecture.png"><br>上面的架构图描述了Eureka是如何在Netflix部署的，这也是Eureka集群的运行方式。在每个区域（region）都有一个eureka集群，它只知道该区域内的实例信息。每个分区（zone）至少有一个eureka服务器来处理本分区故障。</p><p>服务注册在Eureka上并且每30秒发送心跳来续租。如果一个客户端在几次内没有刷新心跳，它将在大约90秒内被移出服务器注册表。注册信息和更新信息会在整个eureka集群的节点进行复制。任何分区的客户端都可查找注册中心信息（每30秒发生一次）来定位他们的服务（可能会在任何分区）并进行远程调用。</p><h3 id="非Java服务和客户端"><a href="#非Java服务和客户端" class="headerlink" title="非Java服务和客户端"></a>非Java服务和客户端</h3><p>对于非Java的服务，你可以用其他语言实现eureka的客户端部分。基于REST的服务也暴露给了所有操作给Eureka客户端。非Java客户端也可以使用REST服务来查询其他服务的信息。</p><h3 id="可配置"><a href="#可配置" class="headerlink" title="可配置"></a>可配置</h3><p>有了Eureka，你可以动态添加删除集群节点。你可以调整内部配置，从超时到线程池。Eureka使用archaius并且如果你有一个配置源的实现，那么很多配置可以动态调优。</p><h3 id="弹性"><a href="#弹性" class="headerlink" title="弹性"></a>弹性</h3><p>在AWS云中，构建弹性伸缩必不可少。Eureka是我们经验的结晶，并且在客户端和服务端都内置了弹性能力。</p><p>Eureka客户端设计成可以处理一个或多个Eureka服务端的失败场景。由于Eureka客户端有注册表缓存信息，即使所有的eureka服务器都挂了，服务也能正常运行。</p><p>Eureka服务器对于其他eureka节点挂了也提供了足够的弹性。即使服务端和客户端之间产生了网络分区，服务器也由内置的弹性策略来防止大规模的停机。</p><h3 id="多区域"><a href="#多区域" class="headerlink" title="多区域"></a>多区域</h3><p>在多个AWS区域部署Eureka是一个很简单的工作。不同区域之间Eureka集群并不通信。</p><h3 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h3><p>Eureka使用servo来跟踪服务端和客户端的信息，包括性能，监控和报警。数据保存在JMX中并暴露给Amazon Cloud Watch。</p><hr><h2 id="Eureka服务治理体系"><a href="#Eureka服务治理体系" class="headerlink" title="Eureka服务治理体系"></a>Eureka服务治理体系</h2><p>以下参考<a href="http://blog.csdn.net/sunhuiliang85/article/details/76222517">《Spring Cloud Eureka详解》</a>, 作者 大道化简</p><p>大概读完Eureka的简介，应该可以知道Eureka是负责微服务架构中服务治理的功能，负责各个微服务实例的自动注册和发现。</p><p>盗图一张, 画的很好。  </p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/eureka-archi.png-f"></p><h3 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h3><p>在服务治理框架中，通常都会构建一个注册中心，每个服务单元向注册中心登记自己提供的服务，包括服务的主机与端口号、服务版本号、通讯协议等一些附加信息。注册中心按照服务名分类组织服务清单，同时还需要以心跳检测的方式去监测清单中的服务是否可用，若不可用需要从服务清单中剔除，以达到排除故障服务的效果。</p><h3 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h3><p>在服务治理框架下，服务间的调用不再通过指定具体的实例地址来实现，而是通过服务名发起请求调用实现。服务调用方通过服务名从服务注册中心的服务清单中获取服务实例的列表清单，通过指定的负载均衡策略取出一个服务实例位置来进行服务调用。</p><h3 id="Eureka服务端"><a href="#Eureka服务端" class="headerlink" title="Eureka服务端"></a>Eureka服务端</h3><p>Eureka服务端，即服务注册中心。它同其他服务注册中心一样，支持高可用配置。依托于强一致性提供良好的服务实例可用性，可以应对多种不同的故障场景。</p><p>Eureka服务端支持集群模式部署，当集群中有分片发生故障的时候，Eureka会自动转入自我保护模式。它允许在分片发生故障的时候继续提供服务的发现和注册，当故障分配恢复时，集群中的其他分片会把他们的状态再次同步回来。集群中的的不同服务注册中心通过异步模式互相复制各自的状态，这也意味着在给定的时间点每个实例关于所有服务的状态可能存在不一致的现象。</p><h3 id="Eureka客户端"><a href="#Eureka客户端" class="headerlink" title="Eureka客户端"></a>Eureka客户端</h3><p>Eureka客户端，主要处理服务的注册和发现。客户端服务通过注册和参数配置的方式，嵌入在客户端应用程序的代码中。在应用程序启动时，Eureka客户端向服务注册中心注册自身提供的服务，并周期性的发送心跳来更新它的服务租约。同时，他也能从服务端查询当前注册的服务信息并把它们缓存到本地并周期行的刷新服务状态。</p><hr><h2 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h2><p>在服务治理框架中，通常都会构建一个注册中心，每个服务单元向注册中心登记自己提供的服务，包括服务的主机与端口号、服务版本号、通讯协议等一些附加信息。注册中心按照服务名分类组织服务清单，同时还需要以心跳检测的方式去监测清单中的服务是否可用，若不可用需要从服务清单中剔除，以达到排除故障服务的效果。</p><h3 id="创建Eureka-Server"><a href="#创建Eureka-Server" class="headerlink" title="创建Eureka Server"></a>创建Eureka Server</h3><p>测试代码： <a href="https://github.com/Ryan-Miao/eureka-server">https://github.com/Ryan-Miao/eureka-server</a></p><p>Eureka Server是基于springboot的，只要启动一个springboot就可以了。start.spring.io提供了一系列启动模板，而且Spring又和Idea比较暧昧，所以使用Idea可以超级简单的搭建和集成Spring项目。</p><p>在Idea里，新建项目，选择Spring initializer.</p><p><img src="http://upload-images.jianshu.io/upload_images/2279594-de33b84a79858106.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600"></p><p>然后，勾选你想要的组件就行了。这里搜索Eureka Server, 选择</p><p><img src="http://upload-images.jianshu.io/upload_images/2279594-3addb73d569a58e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600"></p><p>当然，创建好项目后记得先修改编码为UTF8, 不然万恶的GBK…</p><p>我的pom如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.test<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>eureka-server<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Edgware.SR2<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后，在application.properties中加入配置信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name&#x3D;eureka-server</span><br><span class="line"></span><br><span class="line">#服务注册中心端口号</span><br><span class="line">server.port&#x3D;1110</span><br><span class="line"></span><br><span class="line">#服务注册中心实例的主机名</span><br><span class="line">eureka.instance.hostname&#x3D;localhost</span><br><span class="line"></span><br><span class="line">#是否向服务注册中心注册自己</span><br><span class="line">eureka.client.register-with-eureka&#x3D;false</span><br><span class="line"></span><br><span class="line">#是否检索服务</span><br><span class="line">eureka.client.fetch-registry&#x3D;false</span><br><span class="line"></span><br><span class="line">#服务注册中心的配置内容，指定服务注册中心的位置</span><br><span class="line">eureka.client.serviceUrl.defaultZone&#x3D;http:&#x2F;&#x2F;$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;&#x2F;eureka&#x2F;</span><br></pre></td></tr></table></figure><p>修改启动类，添加<code>@EnableEurekaServer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(EurekaServerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后，启动main方法即可。如果端口有冲突，修改合适的端口重启。demo中端口为1110，启动后，访问<a href="http://localhost:1110/">http://localhost:1110/</a> 可以看到状态控制台。</p><p>前文也说了，上述demo是注册中心，所有的微服务要向本server注册以实现负载均衡。那么，首先就要保证注册中心的稳定，于是就必须搭建Eureka集群的高可用方案。</p><h2 id="高可用服务注册中心"><a href="#高可用服务注册中心" class="headerlink" title="高可用服务注册中心"></a>高可用服务注册中心</h2><p>考虑到发生故障的情况，服务注册中心发生故障必将会造成整个系统的瘫痪，因此需要保证服务注册中心的高可用。</p><p>Eureka Server在设计的时候就考虑了高可用设计，在Eureka服务治理设计中，所有节点既是服务的提供方，也是服务的消费方，服务注册中心也不例外。</p><p>Eureka Server的高可用实际上就是将自己做为服务向其他服务注册中心注册自己，这样就可以形成一组互相注册的服务注册中心，以实现服务清单的互相同步，达到高可用的效果。</p><h3 id="构建服务注册中心集群"><a href="#构建服务注册中心集群" class="headerlink" title="构建服务注册中心集群"></a>构建服务注册中心集群</h3><p>Eureka Server的同步遵循着一个非常简单的原则：只要有一条边将节点连接，就可以进行信息传播与同步。可以采用两两注册的方式实现集群中节点完全对等的效果，实现最高可用性集群，任何一台注册中心故障都不会影响服务的注册与发现.</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/eureka-invoke.png-f"></p><p>所以，下面创建3个Eureka Server两两互相注册，形成集群。由于核心代码一样，我们只要将其部署在不同的机器上即可。因此，我需要3个不同的配置文件。</p><p>为了本地模拟，修改host，虚拟3个域名</p><p>windows host 位置<code>C:\Windows\System32\drivers\etc</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 master</span><br><span class="line">127.0.0.1 backup1</span><br><span class="line">127.0.0.1 backup2</span><br></pre></td></tr></table></figure><p>然后，给我们的Eureka Server增加3个配置文件。此时，应该将application.properties里除了spring.application.name之外的配置注释掉，我们后面3个配置暂时不用上面几个开关。</p><p>application-peer1.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">server.port&#x3D;1111</span><br><span class="line"></span><br><span class="line">eureka.instance.hostname&#x3D;master</span><br><span class="line"></span><br><span class="line">eureka.client.serviceUrl.defaultZone&#x3D;http:&#x2F;&#x2F;backup1:1112&#x2F;eureka&#x2F;,http:&#x2F;&#x2F;backup2:1113&#x2F;eureka&#x2F;</span><br></pre></td></tr></table></figure><p>application-peer2.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server.port&#x3D;1112</span><br><span class="line"></span><br><span class="line">eureka.instance.hostname&#x3D;backup1</span><br><span class="line"></span><br><span class="line">eureka.client.serviceUrl.defaultZone&#x3D;http:&#x2F;&#x2F;master:1111&#x2F;eureka&#x2F;,http:&#x2F;&#x2F;backup2:1113&#x2F;eureka&#x2F;</span><br></pre></td></tr></table></figure><p>application-peer3.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server.port&#x3D;1113</span><br><span class="line"></span><br><span class="line">eureka.instance.hostname&#x3D;backup2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">eureka.client.serviceUrl.defaultZone&#x3D;http:&#x2F;&#x2F;master:1111&#x2F;eureka&#x2F;,http:&#x2F;&#x2F;backup1:1112&#x2F;eureka&#x2F;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于是本地开发环境，我们直接以maven启动。当然，也可以选择jar启动。</p><p>分别打开3个命令行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mvn spring-boot:run -Dspring.profiles.active&#x3D;peer1</span><br><span class="line">mvn spring-boot:run -Dspring.profiles.active&#x3D;peer2</span><br><span class="line">mvn spring-boot:run -Dspring.profiles.active&#x3D;peer3</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，由于启动的时候会去指定zone注册，而另外的server还没启动，这时候会报错，<code>Cannot execute request on any known server</code>, 不用理会，接着启动后两个即可。</p><p>全部启动成功后，访问<a href="http://master:1111/">http://master:1111/</a></p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/eureka-info.png"></p><p>可以看到2个备份，在线的server有3个Availability Zones。Availability Zones在AWS中是指可用区，是在不同region里的不同机房。</p><p>注册中心高可用集群demo搭建完毕。</p><h3 id="失效剔除"><a href="#失效剔除" class="headerlink" title="失效剔除"></a>失效剔除</h3><p>有些时候，我们的服务实例并不一定会正常下线，可能由于内存溢出、网络故障等原因使服务不能正常运作。而服务注册中心并未收到“服务下线”的请求，为了从服务列表中将这些无法提供服务的实例剔除，Eureka Server在启动的时候会创建一个定时任务，默认每隔一段时间（默认为60秒）将当前清单中超时（默认为90秒）没有续约的服务剔除出去。</p><h3 id="自我保护"><a href="#自我保护" class="headerlink" title="自我保护"></a>自我保护</h3><p>服务注册到Eureka Server后，会维护一个心跳连接，告诉Eureka Server自己还活着。Eureka Server在运行期间会统计心跳失败的比例在15分钟以之内是否低于85%，如果出现低于的情况，Eureka Server会将当前实例注册信息保护起来，让这些实例不会过期。这样做会使客户端很容易拿到实际已经不存在的服务实例，会出现调用失败的情况。因此客户端要有容错机制，比如请求重试、断路器。</p><p>以下是自我保护相关的属性：</p><p>eureka.server.enableSelfPreservation=true. 可以设置改参数值为false，以确保注册中心将不可用的实例删除</p><h3 id="region（地域）与zone（可用区）"><a href="#region（地域）与zone（可用区）" class="headerlink" title="region（地域）与zone（可用区）"></a>region（地域）与zone（可用区）</h3><p>region和zone（或者Availability Zone）均是AWS的概念。在非AWS环境下，我们可以简单地将region理解为地域，zone理解成机房。一个region可以包含多个zone，可以理解为一个地域内的多个不同的机房。不同地域的距离很远，一个地域的不同zone间距离往往较近，也可能在同一个机房内。</p><p>region可以通过配置文件进行配置，如果不配置，会默认使用us-east-1。同样Zone也可以配置，如果不配置，会默认使用defaultZone。</p><p>Eureka Server通过eureka.client.serviceUrl.defaultZone属性设置Eureka的服务注册中心的位置。</p><p>指定region和zone的属性如下：</p><p>（1）eureka.client.availabilityZones.myregion=myzone# myregion是region</p><p>（2）eureka.client.region=myregion</p><p>Ribbon的默认策略会优先访问通客户端处于同一个region中的服务端实例，只有当同一个zone中没有可用服务端实例的时候才会访问其他zone中的实例。所以通过zone属性的定义，配合实际部署的物理结构，我们就可以设计出应对区域性故障的容错集群。</p><h3 id="安全验证"><a href="#安全验证" class="headerlink" title="安全验证"></a>安全验证</h3><p>刚才的demo中，我们注册中心的面板是公开访问的。这里可以简单加入用户名密码，让访问更安全。当然，你可以自己实现sso。<br>pom添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后，为了简单演示，事实上也应该这样。我们将3个server的用户名密码设置一致。即，在application.properties里添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">security.user.name&#x3D;admin</span><br><span class="line">security.user.password&#x3D;123456</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后，在我们其他三个配置文件中的<code>eureka.client.serviceUrl.defaultZone</code>添加自己的url并加入用户名密码，<br>以peer1为例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eureka.client.serviceUrl.defaultZone&#x3D;http:&#x2F;&#x2F;$&#123;security.user.name&#125;:$&#123;security.user.password&#125;@$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;&#x2F;eureka&#x2F;,http:&#x2F;&#x2F;backup1:1112&#x2F;eureka&#x2F;,http:&#x2F;&#x2F;backup2:1113&#x2F;eureka&#x2F;</span><br></pre></td></tr></table></figure><hr><h2 id="服务提供者-微服务集群"><a href="#服务提供者-微服务集群" class="headerlink" title="服务提供者 微服务集群"></a>服务提供者 微服务集群</h2><h3 id="服务注册-1"><a href="#服务注册-1" class="headerlink" title="服务注册"></a>服务注册</h3><p>服务提供者在启动的时候会通过REST请求的方式将自己注册到Eureka Server上，同时带上自身服务的一些元数据信息。Eureka Server接收到这个Rest请求之后，将元数据信息存储在一个双层结构的Map中，其中第一层的key是服务名。第二层的key 是具体服务的实例名。</p><p>在服务注册时，需要确认一下eureka.client.register-with-eureka=true参数是否正确，该值默认为true。若设置为fasle将不会启动注册操作。</p><h3 id="服务同步"><a href="#服务同步" class="headerlink" title="服务同步"></a>服务同步</h3><p>从eureka服务治理体系架构图中可以看到，不同的服务提供者可以注册在不同的服务注册中心上，它们的信息被不同的服务注册中心维护。</p><p>此时，由于多个服务注册中心互相注册为服务，当服务提供者发送注册请求到一个服务注册中心时，它会将该请求转发给集群中相连的其他注册中心，从而实现服务注册中心之间的服务同步。通过服务同步，提供者的服务信息就可以通过集群中的任意一个服务注册中心获得。</p><h3 id="服务续约"><a href="#服务续约" class="headerlink" title="服务续约"></a>服务续约</h3><p>在注册服务之后，服务提供者会维护一个心跳用来持续高速Eureka Server，“我还在持续提供服务”，否则Eureka Server的剔除任务会将该服务实例从服务列表中排除出去。我们称之为服务续约。</p><p>下面是服务续约的两个重要属性：</p><p>（1）<code>eureka.instance.lease-expiration-duration-in-seconds</code></p><p>leaseExpirationDurationInSeconds，表示eureka server至上一次收到client的心跳之后，等待下一次心跳的超时时间，在这个时间内若没收到下一次心跳，则将移除该instance。</p><p>默认为90秒</p><p>如果该值太大，则很可能将流量转发过去的时候，该instance已经不存活了。<br>如果该值设置太小了，则instance则很可能因为临时的网络抖动而被摘除掉。<br>该值至少应该大于leaseRenewalIntervalInSeconds</p><p>（2）<code>eureka.instance.lease-renewal-interval-in-seconds</code></p><p>leaseRenewalIntervalInSeconds，表示eureka client发送心跳给server端的频率。如果在leaseExpirationDurationInSeconds后，server端没有收到client的心跳，则将摘除该instance。除此之外，如果该instance实现了HealthCheckCallback，并决定让自己unavailable的话，则该instance也不会接收到流量。</p><p>默认30秒</p><h3 id="创建并注册服务提供者-Eureka-Client"><a href="#创建并注册服务提供者-Eureka-Client" class="headerlink" title="创建并注册服务提供者 Eureka Client"></a>创建并注册服务提供者 Eureka Client</h3><p>项目代码： <a href="https://github.com/Ryan-Miao/eureka-client">https://github.com/Ryan-Miao/eureka-client</a></p><p>Eureka Server是注册中心，我们的客户端也要集成Eureka client来自我注册。我们client项目也是基于Springboot的。同样创建一个新的项目 eureka-client. 这次，要引入Eureka Discovery以及健康检查Actuator。最终pom如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">&lt;groupId&gt;com.test&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">&lt;name&gt;eureka-client&lt;/name&gt;</span><br><span class="line">&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.5.10.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;spring-cloud.version&gt;Edgware.SR2&lt;/spring-cloud.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">&lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">&lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后，启动类添加<code>@EnableDiscoveryClient</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaClientApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(EurekaClientApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，添加配置信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name&#x3D;eureka-client-service-provider</span><br><span class="line">server.port&#x3D;2001</span><br><span class="line">eureka.client.serviceUrl.defaultZone&#x3D;http:&#x2F;&#x2F;admin:123456@master:1111&#x2F;eureka&#x2F;,http:&#x2F;&#x2F;admin:123456@backup1:1112&#x2F;eureka&#x2F;,http:&#x2F;&#x2F;admin:123456@backup2:1113&#x2F;eureka&#x2F;</span><br></pre></td></tr></table></figure><p>这里，我们把三个注册中心的地址都加上。然后，为保证高可用，我们的服务提供者也需要集群部署。真实生产环境中肯定是部署到不同的机器上，在本地模拟的话，我们只好以不同端口来模拟了。</p><p>启动端口2001</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn spring-boot:run -Dserver.port&#x3D;2001</span><br></pre></td></tr></table></figure><p>启动端口2002</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn spring-boot:run -Dserver.port&#x3D;2002</span><br></pre></td></tr></table></figure><p>然后，查看注册中心面板。<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/eureka-client-provider.png"></p><hr><h2 id="服务消费者-另一个微服务集群"><a href="#服务消费者-另一个微服务集群" class="headerlink" title="服务消费者 另一个微服务集群"></a>服务消费者 另一个微服务集群</h2><h3 id="获取服务"><a href="#获取服务" class="headerlink" title="获取服务"></a>获取服务</h3><p>消费者服务启动时，会发送一个Rest请求给服务注册中心，来获取上面注册的服务清单。为了性能考虑，Eureka Server会维护一份只读的服务注册清单来返回给客户端，同时该缓存清单默认会每隔30秒更新一次。</p><p>下面是获取服务的两个重要的属性：</p><p>（1）      <code>eureka.client.fetch-registry</code></p><p>是否需要去检索寻找服务，默认是true</p><p>（2）<code>eureka.client.registry-fetch-interval-seconds</code></p><p>表示eureka client间隔多久去拉取服务注册信息，默认为30秒，对于api-gateway，如果要迅速获取服务注册状态，可以缩小该值，比如5秒</p><h3 id="服务调用"><a href="#服务调用" class="headerlink" title="服务调用"></a>服务调用</h3><p>服务消费者在获取服务清单后，通过服务名可以获取具体提供服务的实例名和该实例的元数据信息。因为有这些服务实例的详细信息，所以客户端可以根据自己的需要决定具体调用哪个实例，在Ribbon中会默认采用轮询的方式进行调用，从而实现客户端的负载均衡。</p><p>等学到Ribbon之后再继续服务消费。</p><h3 id="服务下线"><a href="#服务下线" class="headerlink" title="服务下线"></a>服务下线</h3><p>在系统运行过程中必然会面临关闭或重启服务的某个实例的情况，在服务关闭操作时，会触发一个服务下线的Rest服务请求给Eureka Server，告诉服务注册中心：“我要下线了。”服务端在接收到该请求后，将该服务状态置位下线（DOWN），并把该下线事件传播出去。</p><h2 id="配置详解"><a href="#配置详解" class="headerlink" title="配置详解"></a>配置详解</h2><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/eureka-config.png"></p><h2 id="服务实例类配置"><a href="#服务实例类配置" class="headerlink" title="服务实例类配置"></a>服务实例类配置</h2><h3 id="端点配置"><a href="#端点配置" class="headerlink" title="端点配置"></a>端点配置</h3><p>eureka实例的状态页面和健康监控的url默认为spring boot actuator提供的/info端点和/health端点。我们必须确保Eureka客户端的/health端点在发送元数据的时候，是一个能够被注册中心访问到的地址，否则服务注册中心不会根据应用的健康检查来更改状态（仅当开启了healthcheck功能时，以该端点信息作为健康检查标准）。而如果/info端点不正确的话，会导致在Eureka面板中单击服务时，无法访问到服务实例提供的信息接口。</p><p>大多数情况下，我们不需要修改这个几个url配置。但是当应用不使用默认的上下文(context path或servlet path，比如配置server.servletPath=/test），或者管理终端路径（比如配置management.contextPath=/admin）时，我们需要修改健康检查和状态页的url地址信息。</p><p>application.yml配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.context-path&#x3D;&#x2F;helloeureka</span><br></pre></td></tr></table></figure><p>//下面配置为相对路径，也支持配置成绝对路径，例如需要支持https</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eureka.instance.health-check-url-path&#x3D;$&#123;server.context-path&#125;&#x2F;health</span><br><span class="line"></span><br><span class="line">eureka.instance.status-page-url-path&#x3D;$&#123;server.context-path&#125;&#x2F;info</span><br></pre></td></tr></table></figure><h3 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h3><p>元数据是Eureka客户端在向服务注册中心发送注册请求时，用来描述自身服务信息的对象，其中包含了一些标准化的元数据，比如服务名称、实例名称、实例IP、实例端口等用于服务治理的重要信息；以及一些用于负载均衡策略或是其他特殊用途的自定义元数据信息。</p><p>我们可以通过<code>eureka.instance.&lt;properties&gt;=&lt;value&gt;</code>的格式对标准化元数据直接进行配置，其中<code>&lt;properties&gt;</code>就是EurekaInstanceConfigBean对象中的成员变量。而对于自定义元数据，可以通过<code>eureka.instance.metadataMap.&lt;key&gt;=&lt;value&gt;</code>的格式来进行配置。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eureka.instance.metadataMap.zone&#x3D;tianjin</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;随机生成实例名</span><br><span class="line"></span><br><span class="line">eureka.instance.metadataMap.instanceId&#x3D;$&#123;spring.application.name&#125;:$&#123;random.value&#125;</span><br></pre></td></tr></table></figure><h3 id="健康检测"><a href="#健康检测" class="headerlink" title="健康检测"></a>健康检测</h3><p>默认情况下，Eureka中各个服务实例的健康检测并不是通过spring-boot-acturator模块的/health端点来实现的，而是依靠客户端心跳的方式来保持服务实例的存活。在Eureka的服务续约与剔除机制下，客户端的健康状态从注册到注册中心开始都会处于UP状态，除非心跳终止一段时间之后，服务注册中心将其剔除。默认的心跳实现方式可以有效检查客户端进程是否正常运作，但却无法保证客户端应用能够正常提供服务。</p><p>在Spring Cloud Eureka中，可以把Eureka客户端的健康检测交给spring-boot-actuator模块的health端点，以实现更加全面的健康状态维护，设置方式如下：</p><p>（1）      在pom.xml中引入spring-boot-starter-actuator模块的依赖</p><p>（2）      在application.properties中增加参数配置<code>eureka.client.healthcheck.enabled=true</code></p><p>这里，Idea里并没有提示<code>eureka.client.healthcheck.enabled</code>这个属性，并且还显示黄色，让以为是不是哪里错了，根本不敢尝试。不过百度后，发现有人做了类似实验，成功了。好吧，可能对这个的学习还不够，或者就应该给Idea提一个issue。下面给出自定义health check来替换Eureka自带心跳测试。</p><h4 id="自己实现HealthChecker"><a href="#自己实现HealthChecker" class="headerlink" title="自己实现HealthChecker"></a>自己实现HealthChecker</h4><p>根据自己health的定义，自己实现一个HealthChecker。这里简单模拟。<br>在eureka-client创建MyHealthChecker，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHealthChecker</span> <span class="keyword">implements</span> <span class="title">HealthIndicator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> up = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Health <span class="title">health</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (up) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Health.Builder().withDetail(<span class="string">&quot;aaa_cnt&quot;</span>, <span class="number">10</span>) <span class="comment">//自定义监控内容</span></span><br><span class="line">                    .withDetail(<span class="string">&quot;bbb_status&quot;</span>, <span class="string">&quot;up&quot;</span>).up().build();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Health.Builder().withDetail(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;client is down&quot;</span>).down().build();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> up;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">(<span class="keyword">boolean</span> up)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.up = up;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后，暴露出一个接口来控制up状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HealthSettingController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MyHealthChecker myHealthChecker;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/health/&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">up</span><span class="params">(<span class="meta">@PathVariable(&quot;status&quot;)</span> Boolean status)</span> </span>&#123;</span><br><span class="line">        myHealthChecker.setUp(status);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> status.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在我们的客户端eureka-clientp配置文件里新增<code>eureka.client.healthcheck.enabled=true</code></p><p>重新启动，访问<code>http://localhost:2001/health/false</code>来把我们client端中一个instance设置为down。然后，刷新eureka server面板，即访问<a href="http://master:1111/%EF%BC%8C">http://master:1111/，</a> 可以看到，我们的client确实下线了。</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/eureka-client-down.png"></p><h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><p>除了上述配置参数外，下面整理了一些EurekaInstanceConfigBean中定义的配置参数以及对应的说明和默认值，这些参数均以eureka.instance为前缀。</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2018/eureka-config2.png"></p><h2 id="通讯协议"><a href="#通讯协议" class="headerlink" title="通讯协议"></a>通讯协议</h2><p>默认情况下，Eureka使用Jersey和XStream配合JSON作为Server与Client之间的通讯协议。也可以选择实现自己的协议来代替。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/Netflix/eureka/wiki/Eureka-at-a-glance">Eureka at a glance</a></li><li><a href="https://www.jianshu.com/p/1016cae4fc29">Eureka简介</a></li><li><a href="http://blog.csdn.net/sunhuiliang85/article/details/76222517">Spring Cloud Eureka详解</a></li><li><a href="https://projects.spring.io/spring-cloud/">Spring Cloud官网</a></li><li><a href="https://springcloud.cc/spring-cloud-dalston.html#_features">Spring Cloud 中文版</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> Eureka </tag>
            
            <tag> 服务治理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>consul安装使用</title>
      <link href="2018/03/01/consul-install/"/>
      <url>2018/03/01/consul-install/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装环境： Mac</p><p>我参照<a href="https://www.consul.io/downloads.html">官网</a>下载，然后解压,然后添加到PATH，并不能用。最终使用brew安装成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install consul</span><br></pre></td></tr></table></figure><p>安装成功后，文件位于<code>/usr/local/Cellar/consul/</code>.</p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consul agent --dev</span><br></pre></td></tr></table></figure><h2 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h2><p>直接ctrl+c</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> Install </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList源码阅读</title>
      <link href="2018/02/28/ArrayList/"/>
      <url>2018/02/28/ArrayList/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>数组是我们最常用最简单的数据结构，Java里对数组做了一个简单的包装，就是ArrayList，提供自动扩容的功能。</p><a id="more"></a><h2 id="最常用法"><a href="#最常用法" class="headerlink" title="最常用法"></a>最常用法</h2><p>list在我们日常代码中最为常用的做法是创建一个list，放入数据，取出数据。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testList</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String one = list.get(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> size = list.size();</span><br><span class="line"></span><br><span class="line">    Assert.assertEquals(<span class="string">&quot;a&quot;</span>, one);</span><br><span class="line">    Assert.assertEquals(<span class="number">4</span>, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面，将从构造函数开始读取源码。</p><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><p>第一步，构造一个list对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs an empty list with an initial capacity of ten.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释写的很清楚，构造一个空list，初始化容量为10. 我们来看看这个初始值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Shared empty array instance used for default sized empty instances. We</span></span><br><span class="line"><span class="comment"> * distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when</span></span><br><span class="line"><span class="comment"> * first element is added.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br></pre></td></tr></table></figure><p>默认大小的共享的空array实例。可以注意到这是一个static变量，也就是说所有的ArrayList对象共享这个变量。由此可以猜测，这是一个临时值。</p><p>然后看我们的数据存储对象elementData.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The array buffer into which the elements of the ArrayList are stored.</span></span><br><span class="line"><span class="comment"> * The capacity of the ArrayList is the length of this array buffer. Any</span></span><br><span class="line"><span class="comment"> * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span></span><br><span class="line"><span class="comment"> * will be expanded to DEFAULT_CAPACITY when the first element is added.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br></pre></td></tr></table></figure><p>ArrayList的容量(capacity)就是这个数组的长度。<br>另外，注意修饰关键字<code>transient</code>， 这个不常用，用来表示这个字段不可以被序列化。我们知道，ArrayList实现了<code>Serializable</code>接口，为什么不允许序列化data呢？具体原因参加 <a href="http://www.cnblogs.com/woshimrf/p/java-serialize.html">http://www.cnblogs.com/woshimrf/p/java-serialize.html</a></p><h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先保证容量，然后插入数据，size数量+1. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ensureExplicitCapacity(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对空list第一次add，判断elementData是不是默认的空对象，若是空对象，计算容量。容量的计算也很有意思。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>第一次添加后容量就是10了，当超过10之后就肯定要扩容了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再一次看到modCount这个变量名，和HashMap一样，记载容量发生变化的次数。而扩容的阈值也相当简单，只要保证当前数量+1能够容纳就好。当数组长度不够的时候，扩容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩容也同HashMap一样，扩大为2倍。然后新建数组，长度为新的容量，复制旧数据。由于过程中没有加锁，ArrayList也不是线程安全的。</p><h2 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> elementData(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现相当简单，就是通过数组下标读取元素。但值得学习的是编程结构。比如，这个的范围检测，通过一个有意义的方法名封装了一段代码。清晰易懂。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何使用线程安全的List"><a href="#如何使用线程安全的List" class="headerlink" title="如何使用线程安全的List"></a>如何使用线程安全的List</h2><p>自己对变化过程加锁，或者使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List list = Collection.synchronizedList(<span class="keyword">new</span> ArrayList());</span><br></pre></td></tr></table></figure><p>CopyOnWriteArrayList是一个有趣的例子，它规避了只读操作（如get/contains）并发的瓶颈，但是它为了做到这点，在修改操作中做了很多工作和修改可见性规则。 此外，修改操作还会锁住整个List，因此这也是一个并发瓶颈。所以从理论上来说，CopyOnWriteArrayList并不算是一个通用的并发List。(并发编程网)</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java对象的序列化和反序列化</title>
      <link href="2018/02/28/java-serialize/"/>
      <url>2018/02/28/java-serialize/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>序列化和反序列化看起来用的不多，但用起来就很关键，因为稍一不注意就会出现问题。序列化的应用场景在哪里？当然是数据存储和传输。比如缓存，需要将对象复刻到硬盘存储，即使断电也可以重新反序列化恢复。下面简单理解序列化的用法以及注意事项。</p><a id="more"></a><h2 id="如何序列化"><a href="#如何序列化" class="headerlink" title="如何序列化"></a>如何序列化</h2><p>Java中想要序列化一个对象，必须实现<code>Serializable</code>接口。然后就可以持久化和反序列化了。下面是一个简单用法。</p><p>项目测试代码：<br><a href="https://github.com/Ryan-Miao/someTest/blob/master/src/main/java/com/test/java/serial/TestSerialize.java">https://github.com/Ryan-Miao/someTest/blob/master/src/main/java/com/test/java/serial/TestSerialize.java</a></p><p>我们给一个测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.java.serial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ryan Miao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOGGER = <span class="string">&quot;logger&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PUB_STATIC_FINAL = <span class="string">&quot;publicStaticFinal&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String PUB_STATIC;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String fa;</span><br><span class="line">    <span class="keyword">private</span> String fb;</span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">public</span> String ta;</span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">private</span> String tb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后，测试序列化和反序列的数据是否丢失。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSerialize</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String filename = <span class="string">&quot;D:/test.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSer</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Foo foo = Foo.builder()</span><br><span class="line">                .fa(<span class="string">&quot;fa&quot;</span>)</span><br><span class="line">                .fb(<span class="string">&quot;fb&quot;</span>)</span><br><span class="line">                .ta(<span class="string">&quot;ta&quot;</span>)</span><br><span class="line">                .tb(<span class="string">&quot;tb&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        Foo.PUB_STATIC  = <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line">        ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(</span><br><span class="line">                <span class="keyword">new</span> FileOutputStream(filename));</span><br><span class="line">        os.writeObject(foo);</span><br><span class="line">        os.flush();</span><br><span class="line">        os.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRead</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ObjectInputStream is = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(filename));</span><br><span class="line">        Foo foo2 = (Foo) is.readObject();</span><br><span class="line">        is.close();</span><br><span class="line"></span><br><span class="line">        Assert.assertEquals(<span class="string">&quot;fa&quot;</span>, foo2.getFa());</span><br><span class="line">        Assert.assertEquals(<span class="string">&quot;fb&quot;</span>, foo2.getFb());</span><br><span class="line">        Assert.assertEquals(<span class="keyword">null</span>, foo2.getTa());</span><br><span class="line">        Assert.assertEquals(<span class="keyword">null</span>, foo2.getTb());</span><br><span class="line"></span><br><span class="line">        Assert.assertNull(foo2.PUB_STATIC);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>显然，<code>transient</code>修饰的字段不能被序列化，至于静态字段，这里不做测试，但要清楚。静态字段只和class类相关，和实例无关。而序列化是针对实例的，所以无所谓对比内容变化。那么，静态字段反序列化后数据是什么样子的呢？当然是类变量本身应该的样子。如果没有初始化，则是默认值， 本测试中的结果为null。</p><h2 id="为什么可以序列化"><a href="#为什么可以序列化" class="headerlink" title="为什么可以序列化"></a>为什么可以序列化</h2><p>我们只要实现了<code>Serialiable</code>就可以序列化，那么为什么呢？查看<code>ObjectOutputStream</code>的<code>writeObject</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// remaining cases</span></span><br><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">    writeString((String) obj, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cl.isArray()) &#123;</span><br><span class="line">    writeArray(obj, desc, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Enum) &#123;</span><br><span class="line">    writeEnum((Enum&lt;?&gt;) obj, desc, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Serializable) &#123;</span><br><span class="line">    writeOrdinaryObject(obj, desc, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotSerializableException(</span><br><span class="line">            cl.getName() + <span class="string">&quot;\n&quot;</span> + debugInfoStack.toString());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotSerializableException(cl.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然，只针对String，Enum以及Serializable做了处理，因此想要序列化必须要实现这个接口。当然，String和Enum也实现了Serializable。</p><h2 id="如何自定义序列化，Java基础类库中的ArrayList等为什么用transient还能序列化"><a href="#如何自定义序列化，Java基础类库中的ArrayList等为什么用transient还能序列化" class="headerlink" title="如何自定义序列化，Java基础类库中的ArrayList等为什么用transient还能序列化"></a>如何自定义序列化，Java基础类库中的ArrayList等为什么用transient还能序列化</h2><p>简单的对象，对于不想序列化的字段，只要声明为<code>transient</code>就好。而有时候，我想对部分字段处理后序列化。比如ArrayList中存储数据的<code>transient Object[] elementData;</code>。我们知道ArrayList是可以序列化的，根源就在于自定义这里了。下面跟踪<code>ObjectOutputStream</code>源码，知道自定义的执行部分就可以验证了。</p><p>入口： java.io.ObjectOutputStream#writeObject</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (enableOverride) &#123;</span><br><span class="line">        writeObjectOverride(obj);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        writeObject0(obj, <span class="keyword">false</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        <span class="keyword">if</span> (depth == <span class="number">0</span>) &#123;</span><br><span class="line">            writeFatalException(ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，核心方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject0</span><span class="params">(Object obj, <span class="keyword">boolean</span> unshared)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> oldMode = bout.setBlockDataMode(<span class="keyword">false</span>);depth++;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//省略若干行</span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">// 省略若干行</span></span><br><span class="line">            desc = ObjectStreamClass.lookup(cl, <span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//省略若干行</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//省略若干行</span></span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            writeString((String) obj, unshared);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cl.isArray()) &#123;</span><br><span class="line">            writeArray(obj, desc, unshared);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Enum) &#123;</span><br><span class="line">            writeEnum((Enum&lt;?&gt;) obj, desc, unshared);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Serializable) &#123;</span><br><span class="line">            writeOrdinaryObject(obj, desc, unshared);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//....</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        depth--;</span><br><span class="line">        bout.setBlockDataMode(oldMode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，显然可以看到真正的执行序列化代码是<code>writeOrdinaryObject(obj, desc, unshared);</code>。 但直接追踪进去发现里面有许多初始化的字段是在之前做的处理。因此，先卖个关子，看前面初始化的部分，只找到我们想要初始化的字段即可。</p><p>进入<code>desc = ObjectStreamClass.lookup(cl, true);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> ObjectStreamClass <span class="title">lookup</span><span class="params">(Class&lt;?&gt; cl, <span class="keyword">boolean</span> all)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略若干行</span></span><br><span class="line">    <span class="keyword">if</span> (entry == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            entry = <span class="keyword">new</span> ObjectStreamClass(cl);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable th) &#123;</span><br><span class="line">            entry = th;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//.....</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略若干行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入<code>entry = new ObjectStreamClass(cl);</code>这里就是真正的初始化地方，前面省略的代码是缓存处理，当然缓存使用的ConcurrentHashMap。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">ObjectStreamClass</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; cl)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略无数行以及括号</span></span><br><span class="line">    writeObjectMethod = getPrivateMethod(cl, <span class="string">&quot;writeObject&quot;</span>,</span><br><span class="line">                            <span class="keyword">new</span> Class&lt;?&gt;[] &#123; ObjectOutputStream.class &#125;,</span><br><span class="line">                            Void.TYPE);</span><br><span class="line">    readObjectMethod = getPrivateMethod(cl, <span class="string">&quot;readObject&quot;</span>,</span><br><span class="line">                            <span class="keyword">new</span> Class&lt;?&gt;[] &#123; ObjectInputStream.class &#125;,</span><br><span class="line">                            Void.TYPE);</span><br><span class="line">    <span class="comment">//省略无数行</span></span><br></pre></td></tr></table></figure><p>没错，费了这么大劲就是为了找到这两个method。通过反射，获取到目标class的两个私有方法<code>writeObject</code>, <code>readObject</code>。这两个就是自定义方法所在。</p><p>初始化完毕之后，我们再来继续序列化的代码. 回到刚才的核心方法，找到<code>writeOrdinaryObject(obj, desc, unshared);</code>， 进入，然后，继续找到<code>writeSerialData(obj, desc);</code>, 到这里就是真正执行序列化的代码了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeSerialData</span><span class="params">(Object obj, ObjectStreamClass desc)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ObjectStreamClass.ClassDataSlot[] slots = desc.getClassDataLayout();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; slots.length; i++) &#123;</span><br><span class="line">        ObjectStreamClass slotDesc = slots[i].desc;</span><br><span class="line">        <span class="keyword">if</span> (slotDesc.hasWriteObjectMethod()) &#123;</span><br><span class="line">            <span class="comment">//....</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                curContext = <span class="keyword">new</span> SerialCallbackContext(obj, slotDesc);</span><br><span class="line">                bout.setBlockDataMode(<span class="keyword">true</span>);</span><br><span class="line">                slotDesc.invokeWriteObject(obj, <span class="keyword">this</span>);</span><br><span class="line">                bout.setBlockDataMode(<span class="keyword">false</span>);</span><br><span class="line">                bout.writeByte(TC_ENDBLOCKDATA);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            curPut = oldPut;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            defaultWriteFields(obj, slotDesc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然，判断<code>writeObject</code>这个method是否初始化了，如果有，则直接调用这个方法，没有则默认处理。到此，跟踪完毕，我想要自定义序列化只要重写<code>writeObject</code>, <code>readObject</code>这两个方法即可。</p><h3 id="下面看看ArrayList是怎么做的"><a href="#下面看看ArrayList是怎么做的" class="headerlink" title="下面看看ArrayList是怎么做的"></a>下面看看ArrayList是怎么做的</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException</span>&#123;</span><br><span class="line">    <span class="comment">// Write out element count, and any hidden stuff</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out size as capacity for behavioural compatibility with clone()</span></span><br><span class="line">    s.writeInt(size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">        s.writeObject(elementData[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为数组被设置不允许序列化，先默认序列化其他信息，然后单独处理数组里的内容，挨着写入元素。然后，对应读取方法也要改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    elementData = EMPTY_ELEMENTDATA;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in capacity</span></span><br><span class="line">    s.readInt(); <span class="comment">// ignored</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// be like clone(), allocate array based upon size not capacity</span></span><br><span class="line">        ensureCapacityInternal(size);</span><br><span class="line"></span><br><span class="line">        Object[] a = elementData;</span><br><span class="line">        <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">            a[i] = s.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么要这么做？因为数组元素有很多空余空间，对我们来说不需要序列化。通过这样自定义，把需要的元素序列化，可以节省空间。</p><h2 id="serialVersionUID为什么有的有，有的没有，什么时候用，意义是什么"><a href="#serialVersionUID为什么有的有，有的没有，什么时候用，意义是什么" class="headerlink" title="serialVersionUID为什么有的有，有的没有，什么时候用，意义是什么"></a>serialVersionUID为什么有的有，有的没有，什么时候用，意义是什么</h2><p>以下内容来自： <a href="https://www.cnblogs.com/ouym/p/6654798.html">https://www.cnblogs.com/ouym/p/6654798.html</a></p><h3 id="什么是serialVersionUID"><a href="#什么是serialVersionUID" class="headerlink" title="什么是serialVersionUID ?"></a>什么是serialVersionUID ?</h3><p>serialVersionUID表示：“串行化版本统一标识符”（serial version universal identifier），简称UID</p><p>serialVersionUID必须定义成下面这种形式：static final long serialVersionUID = xxxL;</p><p>serialVersionUID 用来表明类的不同版本间的兼容性。有两种生成方式： 一个是默认的1L；另一种是根据类名、接口名、成员方法及属性等来生成一个64位的哈希字段 。</p><h3 id="为什么要声明serialVersionUID"><a href="#为什么要声明serialVersionUID" class="headerlink" title="为什么要声明serialVersionUID"></a>为什么要声明serialVersionUID</h3><p>java.io.ObjectOutputStream代表对象输出流，它的writeObject(Object obj)方法可对参数指定的obj对象进行序列化，把得到的字节序列写到一个目标输出流中。 java.io.ObjectInputStream代表对象输入流，它的readObject()方法从一个源输入流中读取字节序列，再把它们反序列化为一个对象，并将其返回。 </p><p>只有实现了Serializable或Externalizable接口的类的对象才能被序列化。</p><p>Externalizable接口继承自Serializable接口，实现Externalizable接口的类完全由自身来控制序列化的行为，而仅实现Serializable接口的类可以采用默认的序列化方式 。 凡是实现Serializable接口的类都有一个表示序列化版本标识符的静态变量：<code>private static final long serialVersionUID;</code> </p><p>类的serialVersionUID的默认值完全依赖于Java编译器的实现，对于同一个类，用不同的Java编译器编译，有可能会导致不同的serialVersionUID。显式地定义serialVersionUID有两种用途： </p><ol><li>在某些场合，希望类的不同版本对序列化兼容，因此需要确保类的不同版本具有相同的serialVersionUID；在某些场合，不希望类的不同版本对序列化兼容，<br>因此需要确保类的不同版本具有不同的serialVersionUID。 </li><li>当你序列化了一个类实例后，希望更改一个字段或添加一个字段，不设置serialVersionUID，所做的任何更改都将导致无法反序化旧有实例，并在反序列化时抛出一个异常。<br>如果你添加了serialVersionUID，在反序列旧有实例时，新添加或更改的字段值将设为初始化值（对象为null，基本类型为相应的初始默认值），字段被删除将不设置。 </li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><p>序列化时，只对对象的状态进行保存，而不管对象的方法；</p></li><li><p>当一个父类实现序列化，子类自动实现序列化，不需要显式实现Serializable接口；</p></li><li><p>当一个对象的实例变量引用其他对象，序列化该对象时也把引用对象进行序列化；</p></li><li><p>并非所有的对象都可以序列化，,至于为什么不可以，有很多原因了,比如：</p><ol><li>安全方面的原因，比如一个对象拥有private，public等field，对于一个要传输的对象，比如写到文件，或者进行rmi传输等等，在序列化进行传输的过程中，这个对象的private等域是不受保护的。</li><li>资源分配方面的原因，比如socket，thread类，如果可以序列化，进行传输或者保存，也无法对他们进行重新的资源分  配，而且，也是没有必要这样实现。</li></ol></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://blog.csdn.net/dreamtdp/article/details/15378329">对Java Serializable（序列化）的理解和总结</a></li><li><a href="https://www.cnblogs.com/ouym/p/6654798.html">serialVersionUID的作用</a></li><li><a href="http://www.importnew.com/21517.html">Java transient关键字使用小记</a></li><li><a href="http://blog.csdn.net/zero__007/article/details/52166306">ArrayList中elementData为什么被transient修饰？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap原理概述</title>
      <link href="2018/02/27/hashmap/"/>
      <url>2018/02/27/hashmap/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>还是需要从头阅读下HashMap的源码。目标在于更好的理解HashMap的用法，学习更精炼的编码规范，以及应对面试。</p><blockquote><p>它根据键的hashCode值存储数据，大多数情况下可以直接定位到它的值，因而具有很快的访问速度，但遍历顺序却是不确定的。 HashMap最多只允许一条记录的键为null，允许多条记录的值为null。HashMap非线程安全，即任一时刻可以有多个线程同时写HashMap，可能会导致数据的不一致。如果需要满足线程安全，可以用 Collections的synchronizedMap方法使HashMap具有线程安全的能力，或者使用ConcurrentHashMap。</p></blockquote><a id="more"></a><h3 id="面试官-说说HashMap的原理"><a href="#面试官-说说HashMap的原理" class="headerlink" title="面试官: 说说HashMap的原理"></a>面试官: 说说HashMap的原理</h3><p>答: HashMap是通过哈希表的数组链表实现的。内部维护一个Node数组，</p><p>当put时，计算key hash后的值当做索引。如果数组中该位置为null，则放入value。然后判断是否需要扩容，返回null。</p><p>如果数组上已经有元素，判断hash和key是否相等，相等就表示找到node节点了，不相等则判断该元素是TreeNode还是普通Node。</p><p>如果是TreeNode，则按照TreeNode的put方法插入。</p><p>如果不是TreeNode, 遍历链表，对比hash和key，若都不相等，则插入队尾，如果链表长度大于等于8，将链表转换为TreeNode.</p><p>找到node之后，node不为null则赋值value。最后返回原来的value。</p><p>完毕。</p><p><img src="https://tech.meituan.com/img/java-hashmap/hashMap%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E5%9B%BE.png"><br><img src="https://tech.meituan.com/img/java-hashmap/hashMap%20put%E6%96%B9%E6%B3%95%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%9B%BE.png"></p><h3 id="面试官-如何扩容"><a href="#面试官-如何扩容" class="headerlink" title="面试官: 如何扩容"></a>面试官: 如何扩容</h3><p>答：(直接说1.8的内容，想要装逼体验深度就对比1.7. 比如1.7扩容会导致链表重排倒置，1.8不会，1.8不用再次计算hash等。当然，这样回答要准备好继续入坑，为什么，如何做到)</p><p>要说扩容，首先要知道原来的容量以及什么时候扩容。HashMap初始化的时候可以指定<code>initialCapacity</code>和<code>loadfactor</code>。<code>capacity</code>是2的指数倍，表示数组的长度。</p><p><code>loadfactor</code>表示达到容量的百分比后扩容。<code>threshold=capacity*loadfactor</code>就是HashMap对象中可以容纳的最大K-V键值对数量。</p><p>所以，当size(当前K-V键值对数量)超过<code>threshold</code>，则进行扩容。当然，如果capacity已经大于2^30，则直接将<code>threshold=Integer.MAX_VALUE</code>, 就不扩容了，碰撞吧。</p><p>扩容的时候先计算容量，扩大为原来的2倍，对应<code>threshold</code>也扩大为原来的2倍。</p><p>然后将原来数组上的元素复制到新的数组。对于冲突碰撞的结点，是TreeNode则按TreeNode插入，不是TreeNode则将链表的一半平分到其他新增的索引位置。</p><p>关于几个数字。<code>loadfactor=0.75; DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; MAXIMUM_CAPACITY = 1 &lt;&lt; 30; TREEIFY_THRESHOLD = 8</code>。也就是说，对于我们平时直接new 的HashMap对象，默认数组长度为16，最大容纳12个，超过12个则扩容；当发生碰撞的数量小于8个则维护链表，当数量大于8个则改造成TreeNode.</p><p><img src="https://tech.meituan.com/img/java-hashmap/jdk1.8%20hashMap%E6%89%A9%E5%AE%B9%E4%BE%8B%E5%9B%BE.png"></p><h3 id="面试官-说TreeNode是怎么put的"><a href="#面试官-说TreeNode是怎么put的" class="headerlink" title="面试官: 说TreeNode是怎么put的"></a>面试官: 说TreeNode是怎么put的</h3><p>红黑树啊，红黑树我不会写。</p><h3 id="面试官-如何get"><a href="#面试官-如何get" class="headerlink" title="面试官: 如何get"></a>面试官: 如何get</h3><p>答： 既然知道HashMap的存储原理，那个get也就呼之欲出了。 首先，计算hash索引，如果头结点不为null，如果头结点hash以及key都相等，则取出。</p><p>如果头结点不相等，并且next不为nul，判断next是否是TreeNode, 如果是TreeNode则TreeNode get.</p><p>如果不是TreeNode, 遍历链表，找到hash和key相等的取出value。</p><p>在这里，非常感谢美团技术博客中的《Java 8系列之重新认识HashMap》, 深入，透彻，易懂。</p><h3 id="面试官-HashMap是线程安全的吗"><a href="#面试官-HashMap是线程安全的吗" class="headerlink" title="面试官: HashMap是线程安全的吗"></a>面试官: HashMap是线程安全的吗</h3><p>答：不是，高并发中不仅会不安全，还有可能造成死循环(扩容的时候)。想要在并发中使用，请使用ConcurrentHashMap.</p><h2 id="初始化，构造函数"><a href="#初始化，构造函数" class="headerlink" title="初始化，构造函数"></a>初始化，构造函数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure><p>对应源码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the default initial capacity</span></span><br><span class="line"><span class="comment"> * (16) and the default load factor (0.75).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>构造一个空的HashMap，默认容量(capacity)为16，默认负载因子(load factor)是0.75.</p></blockquote><h2 id="Put"><a href="#Put" class="headerlink" title="Put"></a>Put</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Associates the specified value with the specified key in this map.</span></span><br><span class="line"><span class="comment"> * If the map previously contained a mapping for the key, the old</span></span><br><span class="line"><span class="comment"> * value is replaced.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key key with which the specified value is to be associated</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value value to be associated with the specified key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the previous value associated with &lt;tt&gt;key&lt;/tt&gt;, or</span></span><br><span class="line"><span class="comment"> *         &lt;tt&gt;null&lt;/tt&gt; if there was no mapping for &lt;tt&gt;key&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> *         (A &lt;tt&gt;null&lt;/tt&gt; return can also indicate that the map</span></span><br><span class="line"><span class="comment"> *         previously associated &lt;tt&gt;null&lt;/tt&gt; with &lt;tt&gt;key&lt;/tt&gt;.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>put的key需要计算hashcode</li><li>put的value可以是任何对象</li><li>如果key存在则替换并返回前一个对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Computes key.hashCode() and spreads (XORs) higher bits of hash</span></span><br><span class="line"><span class="comment"> * to lower.  Because the table uses power-of-two masking, sets of</span></span><br><span class="line"><span class="comment"> * hashes that vary only in bits above the current mask will</span></span><br><span class="line"><span class="comment"> * always collide. (Among known examples are sets of Float keys</span></span><br><span class="line"><span class="comment"> * holding consecutive whole numbers in small tables.)  So we</span></span><br><span class="line"><span class="comment"> * apply a transform that spreads the impact of higher bits</span></span><br><span class="line"><span class="comment"> * downward. There is a tradeoff between speed, utility, and</span></span><br><span class="line"><span class="comment"> * quality of bit-spreading. Because many common sets of hashes</span></span><br><span class="line"><span class="comment"> * are already reasonably distributed (so don&#x27;t benefit from</span></span><br><span class="line"><span class="comment"> * spreading), and because we use trees to handle large sets of</span></span><br><span class="line"><span class="comment"> * collisions in bins, we just XOR some shifted bits in the</span></span><br><span class="line"><span class="comment"> * cheapest possible way to reduce systematic lossage, as well as</span></span><br><span class="line"><span class="comment"> * to incorporate impact of the highest bits that would otherwise</span></span><br><span class="line"><span class="comment"> * never be used in index calculations because of table bounds.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新计算hash，但仍旧根据key的hashcode的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements Map.put and related methods</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the value to put</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onlyIfAbsent if true, don&#x27;t change existing value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> evict if false, the table is in creation mode.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>核心put方法，第一个参数是key的hash之后再hash. 这里，我开始有个疑问，就是发现所有调用putVal的地方的第一个参数的hash的计算方式都是一样的，觉得应该去掉第一个参数，直接在这个方法里<code>hash(Key)</code>就好了。事实上，确实可以这么做，但带来的问题是所有调用这个方法的地方都要用同样的hash方法。</li><li>第二个参数是key</li><li>第三个参数是value</li><li>第4个参数是区分<code>putIfAbsent(k,v)</code>的标志，true表示如果不存在则存储，已经存在则不存储;默认false，即覆盖。</li><li>第5个参数<code>evict</code>是逐出的意思，只在LinkedHashMap中有用，本处空调用。</li></ol><h2 id="存储原理概述"><a href="#存储原理概述" class="headerlink" title="存储原理概述"></a>存储原理概述</h2><p>首先，需要准备背景知识，关于数字二进制表示，左移右移等。参阅<a href="http://www.cnblogs.com/woshimrf/p/operation-bit.html%E3%80%82">http://www.cnblogs.com/woshimrf/p/operation-bit.html。</a></p><h3 id="PutVal"><a href="#PutVal" class="headerlink" title="PutVal()"></a>PutVal()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//内部数组</span></span><br><span class="line">    Node&lt;K,V&gt;[] tab; </span><br><span class="line">    <span class="comment">//指针</span></span><br><span class="line">    Node&lt;K,V&gt; p; </span><br><span class="line">    <span class="comment">//数组长度，索引</span></span><br><span class="line">    <span class="keyword">int</span> n, i;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//初始化数组，对于新建的对象，没有put的时候是没有创建数组的</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//计算索引，若当前结点为null，则直接直插入,完毕到返回。</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;  <span class="comment">//e找到的结点，</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果当前结点hash相同，key相同，则找到结点</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="comment">//如果是红黑树</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//遍历链表，p是指针，e为找到的结点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">//遍历到尾结点后直接插入尾部新结点，此时e==null, 不参与后面的value覆盖逻辑。</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st， 当链表长度大于8后转换为红黑树</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//找到结点后决定是否覆盖value</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ++modCount;<span class="comment">//统计数组上的结点数量</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)   <span class="comment">//当前K-V数量超过threshold后扩容</span></span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;  <span class="comment">//因为执行到此处的代码都是新插入的结点，所以返回空。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="resize"><a href="#resize" class="headerlink" title="resize()"></a>resize()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    <span class="comment">//保存旧的数组</span></span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 超过最大值就不再扩充了，就只好随你碰撞去吧</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 没超过最大值，就扩充为原来的2倍</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//出现了，threshold的计算公式</span></span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="comment">//用新的capacity来创建数组</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//开始迁移复制</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>) <span class="comment">//数组结点直接复制</span></span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)   <span class="comment">//红黑树结点</span></span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order 对于碰撞的链表，优化，取出一半的结点到新的数组结点</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="comment">// 原索引</span></span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                         <span class="comment">// 原索引+oldCap</span></span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 原索引放到bucket里</span></span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 原索引+oldCap放到bucket里</span></span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://tech.meituan.com/java-hashmap.html">https://tech.meituan.com/java-hashmap.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 博客支持PWA和压缩博文</title>
      <link href="2018/02/05/hexo-grup-pwa/"/>
      <url>2018/02/05/hexo-grup-pwa/</url>
      
        <content type="html"><![CDATA[<h2 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add hexo-offline</span><br></pre></td></tr></table></figure><p>然后在root config.yml里新增</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># offline config passed to sw-precache.</span><br><span class="line">service_worker:</span><br><span class="line">  maximumFileSizeToCacheInBytes: <span class="number">5242880</span></span><br><span class="line">  staticFileGlobs:</span><br><span class="line">  - <span class="comment">/**/*.&#123;js,html,css,png,jpg,gif,svg,eot,ttf,woff,woff2&#125;</span></span><br><span class="line"><span class="comment">  - /lib/**/</span>*.js</span><br><span class="line">  - <span class="regexp">/lib/</span>**<span class="comment">/*.css</span></span><br><span class="line"><span class="comment">  - /images/*</span></span><br><span class="line"><span class="comment">  - /js/src/**/</span>*.js</span><br><span class="line">  stripPrefix: public</span><br><span class="line">  verbose: <span class="literal">true</span></span><br><span class="line">  runtimeCaching:</span><br><span class="line">    - urlPattern: <span class="comment">/*</span></span><br><span class="line"><span class="comment">      handler: cacheFirst</span></span><br><span class="line"><span class="comment">      options:</span></span><br><span class="line"><span class="comment">        origin: cdn.bootcss.com</span></span><br></pre></td></tr></table></figure><p>然后添加manifest.json, 比如我使用了 <code>hexo-theme-next</code>的主题，在<code>layout/_custom/header.swig</code> 中引用了<code>manifest.json</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;link rel&#x3D;&quot;manifest&quot; href&#x3D;&quot;&#x2F;manifest.json&quot;&gt;</span><br></pre></td></tr></table></figure><p>manifest生成地址： <a href="https://app-manifest.firebaseapp.com/">https://app-manifest.firebaseapp.com/</a></p><p>比如，我的为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;风 - Ryan Miao&quot;</span>,</span><br><span class="line">    <span class="string">&quot;short_name&quot;</span>: <span class="string">&quot;风&quot;</span>,</span><br><span class="line">    <span class="string">&quot;theme_color&quot;</span>: <span class="string">&quot;#2196f3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;background_color&quot;</span>: <span class="string">&quot;#2196f3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;display&quot;</span>: <span class="string">&quot;browser&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scope&quot;</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;start_url&quot;</span>: <span class="string">&quot;/&quot;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>具体缓存策略还是看下官方文档，这里不求甚解缓存。重启博客，打开控制台，查看网络，会发现，所有的文件都是<code>(from ServiceWorker)</code> 或者<code>(from disk cache)</code>或者<code>(from memory cache)</code>。</p><p>当hexo g之后，会多出一个<code>service-worker.js</code>里面则是会缓存的内容。</p><p>对了，何时会刷新呢，毕竟都给缓存了。规范规定了强制刷新不给缓存，so，还有可以ctrl+f5，以及在chrome控制台上设置application的service worker属性。</p><h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><p>看了下计算，压缩大概可以节省一半空间。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gulp -g</span><br><span class="line">$ npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save</span><br><span class="line"></span><br><span class="line">或者使用yarn </span><br><span class="line"></span><br><span class="line">yarn <span class="built_in">global</span> add gulp</span><br><span class="line">yarn add gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp</span><br></pre></td></tr></table></figure><p>然后，在根目录新增 <code>gulpfile.js</code> :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">&#x27;gulp-minify-css&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlmin&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlclean&#x27;</span>);</span><br><span class="line"><span class="comment">// 压缩 public 目录 css</span></span><br><span class="line">gulp.task(<span class="string">&#x27;minify-css&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">&#x27;./public/**/*.css&#x27;</span>)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩 public 目录 html</span></span><br><span class="line">gulp.task(<span class="string">&#x27;minify-html&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">&#x27;./public/**/*.html&#x27;</span>)</span><br><span class="line">    .pipe(htmlclean())</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">         removeComments: <span class="literal">true</span>,</span><br><span class="line">         minifyJS: <span class="literal">true</span>,</span><br><span class="line">         minifyCSS: <span class="literal">true</span>,</span><br><span class="line">         minifyURLs: <span class="literal">true</span>,</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩 public/js 目录 js</span></span><br><span class="line">gulp.task(<span class="string">&#x27;minify-js&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">&#x27;./public/**/*.js&#x27;</span>)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></span><br><span class="line">gulp.task(<span class="string">&#x27;default&#x27;</span>, [</span><br><span class="line">    <span class="string">&#x27;minify-html&#x27;</span>,<span class="string">&#x27;minify-css&#x27;</span>,<span class="string">&#x27;minify-js&#x27;</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp;  hexo s</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.naaln.com/2017/09/hexo-with-pwa/">https://blog.naaln.com/2017/09/hexo-with-pwa/</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springmvc-download-file</title>
      <link href="2018/01/26/springmvc-download-file/"/>
      <url>2018/01/26/springmvc-download-file/</url>
      
        <content type="html"><![CDATA[<p><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1541216140,1845256960&fm=27&gp=0.jpg"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近严查security, 导致原来暴露出去的s3不能用了，不允许public的s3,暂时的折中方案是自己做跳转。于是需要在SpringMVC中实现文件下载功能。</p><h2 id="关于文件存储的设计"><a href="#关于文件存储的设计" class="headerlink" title="关于文件存储的设计"></a>关于文件存储的设计</h2><p>文件存储通常用作对象存储，业界标准就是AWS s3, 国内的七牛也差不多。不想自建的话，采用这种第三方存储是很方便的。但是，有写地方需要注意。</p><h3 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h3><p>就像这次整改遇到的，权限问题大概是对象存储必须具备的。s3的权限特别多和复杂，可以做到认证user访问； 指定ip访问； 指定IAM Role访问； 指定第三方登陆比如Facebook，google的认证，设置自己的认证，这里是指Cognito。</p><h3 id="地址路径的健壮性"><a href="#地址路径的健壮性" class="headerlink" title="地址路径的健壮性"></a>地址路径的健壮性</h3><p>review代码的时候发现了几个严重的问题，地址问题尤为重要，简直就是bug一样。首先，db存储的文件路径不应该包含域名前缀，像这次整改图片存储就导致以前db里的数据不能用了。<strong>db只能存储相对路径，即当指定改类型前缀后，变化的部分路径。</strong>。 然后就是 <strong>需要一个域名</strong>，对于公开的地址，需要一个域名来维护，而不是直接指定当前的文件服务器。比如一个公开的s3可能是这样的:<a href="https://mybucket.s3.amazonaws.com/keyprefix/key">https://mybucket.s3.amazonaws.com/keyprefix/key</a>. 如果我们变更了s3的bucket，那么这个地址就废弃了，这个很有可能发生的。因此，用一个我们自己的域名指向s3可以屏蔽这个细节。同理，如果写死了文件服务器的地址，当文件服务器变更的时候，公开的文件将全部失效。</p><h2 id="如何使用SpringMVC下载文件"><a href="#如何使用SpringMVC下载文件" class="headerlink" title="如何使用SpringMVC下载文件"></a>如何使用SpringMVC下载文件</h2><p>我们可以简单的在<code>HttpServletResponse</code>的OutputStream里写入我们的文件流，这样就可以实现文件下载。但这个做法感觉有点太直接了，推荐使用Spring的ResponseEntity来做。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/static/filename&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;InputStreamResource&gt;(HttpServletResponse response) &#123;</span><br><span class="line">    <span class="keyword">final</span> ObjectMetadata objectMetadata = s3Object.getObjectMetadata();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok()</span><br><span class="line">            .header(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>)</span><br><span class="line">            .cacheControl(CacheControl.maxAge(maxAge, TimeUnit.DAYS).cachePublic())</span><br><span class="line">            .allow(HttpMethod.GET, HttpMethod.OPTIONS)</span><br><span class="line">            .contentLength(objectMetadata.getContentLength())</span><br><span class="line">            .contentType(MediaType.valueOf(objectMetadata.getContentType()))</span><br><span class="line">            .body(<span class="keyword">new</span> InputStreamResource(s3Object.getObjectContent()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>问题核心在于返回<code>ResponseEntity&lt;InputStreamResource&gt;</code></li><li><code>ResponseEntity</code>是SpringMVC里统一封装的返回值response信息</li><li><code>InputStreamResource</code>则是接收一个输入流InputStream的结果集</li><li>然后可以设置浏览器缓存，这个对用户刷新页面挺重要的</li><li>对于图片和js等，需要设置contentType为png或者js等</li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lombok的基本使用教程</title>
      <link href="2018/01/18/lombok-example/"/>
      <url>2018/01/18/lombok-example/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>lombok是一个编译级别的插件，它可以在项目编译的时候生成一些代码。在很多工具类的项目中都有这个功能。比如dagger。</p><p>通俗的说，lombok可以通过注解来标示生成<code>getter</code> <code>settter</code>等代码。我们自然可以通过编译器比如IDEA的<code>Generate</code>生成，为啥要用这个？</p><p>在项目开发阶段，一个class的属性是一直变化的，今天可能增加一个字段，明天可能删除一个字段。每次变化都需要修改对应的模板代码。另外，有的class的字段超级多，多到一眼看不完。如果加上模板代码，更难一眼看出来。更有甚者，由于字段太多，想要使用builder来创建。手动创建builder和字段和原来的类夹杂在一起，看起来真的难受。lombok的<code>@Builder</code>即可解决这个问题。</p><a id="more"></a><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>引入就是加入<code>lombok</code>的jar包。</p><h3 id="在maven中"><a href="#在maven中" class="headerlink" title="在maven中"></a>在maven中</h3><p>直接加入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在gradle中"><a href="#在gradle中" class="headerlink" title="在gradle中"></a>在gradle中</h3><p>这里比较麻烦，需要添加一个编译时生成代码的插件。gradle里有几个这样的插件。但为了简化过程，lombok提供了新插件。</p><p>来源：<a href="https://projectlombok.org/setup/gradle">官网</a>， <a href="https://github.com/franzbecker/gradle-lombok">github</a></p><p>首先，添加一个plugin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &#39;io.franzbecker.gradle-lombok&#39; version &#39;1.11&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，就可以了。还可以配置lombok的版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lombok &#123; &#x2F;&#x2F; optional: values below are the defaults</span><br><span class="line">    version &#x3D; &quot;1.16.20&quot;</span><br><span class="line">    sha256 &#x3D; &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IntelIJ-IDEA-插件"><a href="#IntelIJ-IDEA-插件" class="headerlink" title="IntelIJ IDEA 插件"></a>IntelIJ IDEA 插件</h3><p>在IDEA里使用需要添加一个插件。在插件里搜索lombok，安装，重启。<br><img src="http://kriszhang.com/lombok/plugin.png"></p><p>IDEA里需要在设置中启用annotation processors。</p><p><img src="http://kriszhang.com/lombok/config.png"></p><p>如果升级了InteliJ IDEA, 可能出现lombok不能用了，右键更新lombok plugin，重启即可。</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="Geeter-Setter"><a href="#Geeter-Setter" class="headerlink" title="Geeter Setter"></a>Geeter Setter</h3><p>最简单的，最常用的，最直观的使用就是getter setter方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.lombok;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AccessLevel;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Ryan Miao on 1/18/18.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetterSetterExample</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Age of the person. Water is wet.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age New value for this person&#x27;s age. Sky is blue.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The current value of this person&#x27;s age. Circles are round.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> active;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span> Boolean none;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Name of the person.</span></span><br><span class="line"><span class="comment">     * -- SETTER --</span></span><br><span class="line"><span class="comment">     * Changes the name of this person.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name The new value.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Setter(AccessLevel.PROTECTED)</span> <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;%s (age: %d)&quot;</span>, name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GetterSetterExample example = <span class="keyword">new</span> GetterSetterExample();</span><br><span class="line">        example.setActive(<span class="keyword">true</span>);</span><br><span class="line">        example.setAge(<span class="number">123</span>);</span><br><span class="line">        example.setDate(<span class="keyword">new</span> Date());</span><br><span class="line">        example.setName(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        example.setNone(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        Date date = example.getDate();</span><br><span class="line">        Boolean none = example.getNone();</span><br><span class="line">        <span class="keyword">boolean</span> active = example.isActive();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>简单使用没有问题，深入一点可以看到有些特殊设定。比如javadoc.</p><ol><li><code>Getter</code>声明创建getter方法；</li><li><code>Setter</code>声明创建setter方法；</li><li><code>@Setter(AccessLevel.PROTECTED)</code>可以添加参数，指定权限为私有；</li><li>Attention！关于<code>boolean</code>的set前缀都是set，但getter不同，小写的<code>boolean</code>，即基本类型，前缀是<code>is</code>; <code>Boolean</code>，即包装类型，前缀是<code>get</code>；</li></ol><p>编译后的结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.test.lombok;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetterSetterExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> active;</span><br><span class="line">    <span class="keyword">private</span> Boolean none;</span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GetterSetterExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;%s (age: %d)&quot;</span>, <span class="keyword">this</span>.name, <span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GetterSetterExample example = <span class="keyword">new</span> GetterSetterExample();</span><br><span class="line">        example.setActive(<span class="keyword">true</span>);</span><br><span class="line">        example.setAge(<span class="number">123</span>);</span><br><span class="line">        example.setDate(<span class="keyword">new</span> Date());</span><br><span class="line">        example.setName(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        example.setNone(<span class="keyword">false</span>);</span><br><span class="line">        Date date = example.getDate();</span><br><span class="line">        Boolean none = example.getNone();</span><br><span class="line">        <span class="keyword">boolean</span> active = example.isActive();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isActive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.active;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setActive</span><span class="params">(<span class="keyword">boolean</span> active)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.active = active;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">getNone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNone</span><span class="params">(Boolean none)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.none = none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ToString"><a href="#ToString" class="headerlink" title="ToString"></a>ToString</h3><p>虽然ToString在生产环境貌似没什么卵用。但是，很多情况下，我们还是需要这个的。因为记log。不想每次看log的时候是一串@地址，那就好好把toString()加上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.lombok;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Ryan Miao on 1/18/18.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString(exclude=&quot;id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToStringExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATIC_VAR = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Shape shape = <span class="keyword">new</span> Square(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">private</span> String[] tags;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ToString(callSuper=true, includeFieldNames=true)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> width, height;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Square</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.width = width;</span><br><span class="line">            <span class="keyword">this</span>.height = height;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ToString</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> color;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ToStringExample example = <span class="keyword">new</span> ToStringExample();</span><br><span class="line">        example.setId(<span class="number">1</span>);</span><br><span class="line">        example.setName(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        example.setTags(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Shape shape = <span class="keyword">new</span> Square(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        example.setShape(shape);</span><br><span class="line"></span><br><span class="line">        System.out.println(example.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.<code>@ToString</code>最简单使用即可</p><p>打印结果如下：</p><blockquote><p>ToStringExample(name=abc, shape=ToStringExample.Square(super=ToStringExample.Shape(color=0), width=1, height=2), tags=[a, b, c])</p></blockquote><p>编译后的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.test.lombok;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToStringExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATIC_VAR = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> ToStringExample.Shape shape = <span class="keyword">new</span> ToStringExample.Square(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">private</span> String[] tags;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ToStringExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ToStringExample example = <span class="keyword">new</span> ToStringExample();</span><br><span class="line">        example.setId(<span class="number">1</span>);</span><br><span class="line">        example.setName(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        example.setTags(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;);</span><br><span class="line">        ToStringExample.Shape shape = <span class="keyword">new</span> ToStringExample.Square(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        example.setShape(shape);</span><br><span class="line">        System.out.println(example.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setShape</span><span class="params">(ToStringExample.Shape shape)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.shape = shape;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTags</span><span class="params">(String[] tags)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tags = tags;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ToStringExample(name=&quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot;, shape=&quot;</span> + <span class="keyword">this</span>.shape + <span class="string">&quot;, tags=&quot;</span> + Arrays.deepToString(<span class="keyword">this</span>.tags) + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> color;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Shape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;ToStringExample.Shape(color=&quot;</span> + <span class="keyword">this</span>.color + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">ToStringExample</span>.<span class="title">Shape</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> width;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> height;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Square</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.width = width;</span><br><span class="line">            <span class="keyword">this</span>.height = height;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;ToStringExample.Square(super=&quot;</span> + <span class="keyword">super</span>.toString() + <span class="string">&quot;, width=&quot;</span> + <span class="keyword">this</span>.width + <span class="string">&quot;, height=&quot;</span> + <span class="keyword">this</span>.height + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="EqualsAndHashCode"><a href="#EqualsAndHashCode" class="headerlink" title="@EqualsAndHashCode"></a>@EqualsAndHashCode</h3><p>equals()和hashCode()在Java中有着举足轻重的基地作用，虽然通常很少关注。但是，这个必须不可省。不知道有几个可以手写出来的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.lombok;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Ryan Miao on 1/18/18.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(exclude=&#123;&quot;id&quot;, &quot;shape&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EqualsAndHashCodeExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> transientVar = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">    <span class="keyword">private</span> ToStringExample.Shape shape = <span class="keyword">new</span> Square(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">private</span> String[] tags;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EqualsAndHashCode(callSuper=true)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">ToStringExample</span>.<span class="title">Shape</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> width, height;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Square</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.width = width;</span><br><span class="line">            <span class="keyword">this</span>.height = height;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EqualsAndHashCodeExample example = <span class="keyword">new</span> EqualsAndHashCodeExample();</span><br><span class="line">        EqualsAndHashCodeExample example1 = <span class="keyword">new</span> EqualsAndHashCodeExample();</span><br><span class="line">        <span class="keyword">boolean</span> equals = example.equals(example1);</span><br><span class="line">        <span class="keyword">boolean</span> b = example.canEqual(example);</span><br><span class="line">        <span class="keyword">int</span> i = example.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编译后的结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.test.lombok;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.test.lombok.ToStringExample.Shape;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EqualsAndHashCodeExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> transientVar = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">    <span class="keyword">private</span> Shape shape = <span class="keyword">new</span> EqualsAndHashCodeExample.Square(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">private</span> String[] tags;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EqualsAndHashCodeExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EqualsAndHashCodeExample example = <span class="keyword">new</span> EqualsAndHashCodeExample();</span><br><span class="line">        EqualsAndHashCodeExample example1 = <span class="keyword">new</span> EqualsAndHashCodeExample();</span><br><span class="line">        example.equals(example1);</span><br><span class="line">        <span class="keyword">boolean</span> b = example.canEqual(example);</span><br><span class="line">        <span class="keyword">int</span> i = example.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> EqualsAndHashCodeExample)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            EqualsAndHashCodeExample other = (EqualsAndHashCodeExample)o;</span><br><span class="line">            <span class="keyword">if</span> (!other.canEqual(<span class="keyword">this</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                label31: &#123;</span><br><span class="line">                    Object <span class="keyword">this</span>$name = <span class="keyword">this</span>.getName();</span><br><span class="line">                    Object other$name = other.getName();</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>$name == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (other$name == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">break</span> label31;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>$name.equals(other$name)) &#123;</span><br><span class="line">                        <span class="keyword">break</span> label31;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (Double.compare(<span class="keyword">this</span>.score, other.score) != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> Arrays.deepEquals(<span class="keyword">this</span>.tags, other.tags);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">canEqual</span><span class="params">(Object other)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> other <span class="keyword">instanceof</span> EqualsAndHashCodeExample;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> PRIME = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">        Object $name = <span class="keyword">this</span>.getName();</span><br><span class="line">        <span class="keyword">int</span> result = result * <span class="number">59</span> + ($name == <span class="keyword">null</span> ? <span class="number">43</span> : $name.hashCode());</span><br><span class="line">        <span class="keyword">long</span> $score = Double.doubleToLongBits(<span class="keyword">this</span>.score);</span><br><span class="line">        result = result * <span class="number">59</span> + (<span class="keyword">int</span>)($score &gt;&gt;&gt; <span class="number">32</span> ^ $score);</span><br><span class="line">        result = result * <span class="number">59</span> + Arrays.deepHashCode(<span class="keyword">this</span>.tags);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> width;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> height;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Square</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.width = width;</span><br><span class="line">            <span class="keyword">this</span>.height = height;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> EqualsAndHashCodeExample.Square)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                EqualsAndHashCodeExample.Square other = (EqualsAndHashCodeExample.Square)o;</span><br><span class="line">                <span class="keyword">if</span> (!other.canEqual(<span class="keyword">this</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">super</span>.equals(o)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.width != other.width) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.height == other.height;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">canEqual</span><span class="params">(Object other)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> other <span class="keyword">instanceof</span> EqualsAndHashCodeExample.Square;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> PRIME = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">int</span> result = <span class="keyword">super</span>.hashCode();</span><br><span class="line">            result = result * <span class="number">59</span> + <span class="keyword">this</span>.width;</span><br><span class="line">            result = result * <span class="number">59</span> + <span class="keyword">this</span>.height;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="构造函数-NoArgsConstructor-RequiredArgsConstructor-AllArgsConstructor"><a href="#构造函数-NoArgsConstructor-RequiredArgsConstructor-AllArgsConstructor" class="headerlink" title="构造函数@NoArgsConstructor, @RequiredArgsConstructor, @AllArgsConstructor"></a>构造函数@NoArgsConstructor, @RequiredArgsConstructor, @AllArgsConstructor</h3><p>Java中class的一切起源于构造器。大家最喜欢的还是构造函数创建对象。这里有一点比较坑的是无参构造函数。当你自己添加一个带有参数的构造函数后，无参构造函数则别隐藏。通常也没啥问题，但当你使用jackson反序列化对象的时候就被恶心到了。jackson通过无参构造函数创建对象。因此，当你考虑这个class会用来序列化为json的时候，即必须手动添加一个无参数构造函数。</p><h4 id="NoArgsConstructor"><a href="#NoArgsConstructor" class="headerlink" title="@NoArgsConstructor"></a>@NoArgsConstructor</h4><p>当你想要创建一个valueobject，DDD中的值对象，要求实现Immutable，那么无参数构造器就不合适了。<code>@NoArgsConstructor</code>会生成一个空的构造器。如果你设置了final field，那么编译会报错。如果你强制执行创建无参数构造器。即，<code>@NoArgsConstructor(force = true)</code>，那么final的field会初始化为<code>0</code>/<code>false</code>/<code>null</code>。通常适合与<code>@Data</code>集成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NoArgsExample</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NonNull</span> <span class="keyword">private</span> String field;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>NonNull</code>被忽略了</li></ul><p>最终生成代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NoArgsExample</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> String field;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NoArgsExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于final的字段，我认为我不会用空构造器来做这件事。所以，感觉这个参数<code>force=true</code>不要也罢，鸡肋。</p><h4 id="RequiredArgsConstructor"><a href="#RequiredArgsConstructor" class="headerlink" title="@RequiredArgsConstructor"></a>@RequiredArgsConstructor</h4><p>一个class可以有很多属性，但你可能只关心其中的几个字段，那么可以使用<code>@RequiredArgsConstructor</code>。<code>@NonNull</code>将标注这个字段不应为null，初始化的时候会检查是否为空，否则抛出<code>NullPointException</code>。在上面的无参构造函数中被忽略了。那么，对于关注的字段标注<code>@NonNull</code>, <code>@RequiredArgsConstructor</code>则会生成带有这些字段的构造器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequiredArgsExample</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NonNull</span> <span class="keyword">private</span> String field;</span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line">    <span class="keyword">private</span> Integer integer;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> b;</span><br><span class="line">    <span class="keyword">private</span> Boolean aBoolean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终生成结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequiredArgsExample</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> String field;</span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line">    <span class="keyword">private</span> Integer integer;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> b;</span><br><span class="line">    <span class="keyword">private</span> Boolean aBoolean;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequiredArgsExample</span><span class="params">(<span class="meta">@NonNull</span> String field)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (field == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;field&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.field = field;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只有<code>@NonNull</code>会生成构造器。其他默认，Java的class初始化默认为null.false,0.</p><p>lombok提供了另一种初始化做法，静态初始化。即私有构造器，使用静态方法创建对象。这种做法看起来简单，但通常用的不多。因为静态初始化的东西很难mock，对测试不够友好。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor(staticName = &quot;of&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RequiredArgsStaticExample</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NonNull</span> <span class="keyword">private</span> String field;</span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line">    <span class="keyword">private</span> Integer integer;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> b;</span><br><span class="line">    <span class="keyword">private</span> Boolean aBoolean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终生成代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructorExample</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> T description;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ConstructorExample</span><span class="params">(<span class="meta">@NonNull</span> T description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (description == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;description&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.description = description;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ConstructorExample&lt;T&gt; <span class="title">of</span><span class="params">(<span class="meta">@NonNull</span> T description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConstructorExample(description);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="AllArgsConstructor"><a href="#AllArgsConstructor" class="headerlink" title="@AllArgsConstructor"></a>@AllArgsConstructor</h4><p>想要初始化所有字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor(access = AccessLevel.PROTECTED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructorExample</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> T description;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终生成代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructorExample</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> T description;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">ConstructorExample</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="meta">@NonNull</span> T description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (description == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;description&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.x = x;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line">            <span class="keyword">this</span>.description = description;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="必用项-Data"><a href="#必用项-Data" class="headerlink" title="必用项@Data"></a>必用项@Data</h3><p><code>@Data</code>是一个集合体。包含<code>Getter</code>,<code>Setter</code>,<code>RequiredArgsConstructor</code>,<code>ToString</code>,<code>EqualsAndHashCode</code></p><h3 id="不可变对象valueobject-Value"><a href="#不可变对象valueobject-Value" class="headerlink" title="不可变对象valueobject @Value"></a>不可变对象valueobject @Value</h3><p>这个看起来很美好，就是可以帮忙生成一个不可变对象。对于所有的字段都将生成final的。但我感觉有点失控。注解的优势应该是所见即所得，可以通过字面量来传递消息。而<code>@Value</code>字段给字段加final会让人困惑，因为这更改了我们的定义。当我想声明一个Immutable对象的时候，我会显示的给字段加一个限定final。</p><p>同<code>@Data</code>， <code>@Value</code>是一个集合体。包含<code>Getter</code>,<code>AllArgsConstructor</code>,<code>ToString</code>,<code>EqualsAndHashCode</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Ryan Miao on 1/18/18.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Value</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Room</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> active;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Room</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> active;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Room</span><span class="params">(<span class="meta">@NonNull</span> String id, String name, <span class="keyword">boolean</span> active, Date createTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.active = active;</span><br><span class="line">            <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isActive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.active;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Room)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Room other = (Room)o;</span><br><span class="line">            Object <span class="keyword">this</span>$id = <span class="keyword">this</span>.getId();</span><br><span class="line">            Object other$id = other.getId();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>$id == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (other$id != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>$id.equals(other$id)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            label41: &#123;</span><br><span class="line">                Object <span class="keyword">this</span>$name = <span class="keyword">this</span>.getName();</span><br><span class="line">                Object other$name = other.getName();</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>$name == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (other$name == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span> label41;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>$name.equals(other$name)) &#123;</span><br><span class="line">                    <span class="keyword">break</span> label41;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.isActive() != other.isActive()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Object <span class="keyword">this</span>$createTime = <span class="keyword">this</span>.getCreateTime();</span><br><span class="line">                Object other$createTime = other.getCreateTime();</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>$createTime == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (other$createTime != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>$createTime.equals(other$createTime)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> PRIME = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">        Object $id = <span class="keyword">this</span>.getId();</span><br><span class="line">        <span class="keyword">int</span> result = result * <span class="number">59</span> + ($id == <span class="keyword">null</span> ? <span class="number">43</span> : $id.hashCode());</span><br><span class="line">        Object $name = <span class="keyword">this</span>.getName();</span><br><span class="line">        result = result * <span class="number">59</span> + ($name == <span class="keyword">null</span> ? <span class="number">43</span> : $name.hashCode());</span><br><span class="line">        result = result * <span class="number">59</span> + (<span class="keyword">this</span>.isActive() ? <span class="number">79</span> : <span class="number">97</span>);</span><br><span class="line">        Object $createTime = <span class="keyword">this</span>.getCreateTime();</span><br><span class="line">        result = result * <span class="number">59</span> + ($createTime == <span class="keyword">null</span> ? <span class="number">43</span> : $createTime.hashCode());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Room(id=&quot;</span> + <span class="keyword">this</span>.getId() + <span class="string">&quot;, name=&quot;</span> + <span class="keyword">this</span>.getName() + <span class="string">&quot;, active=&quot;</span> + <span class="keyword">this</span>.isActive() + <span class="string">&quot;, createTime=&quot;</span> + <span class="keyword">this</span>.getCreateTime() + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最喜欢的项-Builder"><a href="#最喜欢的项-Builder" class="headerlink" title="最喜欢的项 @Builder"></a>最喜欢的项 @Builder</h3><p>对于喜欢builder模式的人来说，声明式简化对象创建流程让一切看得美好。但是，手动复制字段，手动创建方法很让人不喜。<code>@Builder</code>解决了刚需。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Ryan Miao on 1/18/18.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder(toBuilder = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Room</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> active;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@Singular</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; occupations;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Room room = Room.builder().active(<span class="keyword">true</span>)</span><br><span class="line">                .name(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">                .id(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">                .createTime(<span class="keyword">new</span> Date())</span><br><span class="line">                .occupation(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">                .occupation(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        Assert.assertEquals(<span class="number">2</span>, room.getOccupations().size());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这才是我们想要的建造者。对应生成的代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.test.lombok;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> lombok.NonNull;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Room</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> active;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; occupations;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Room room = builder().active(<span class="keyword">true</span>).name(<span class="string">&quot;name&quot;</span>).id(<span class="string">&quot;id&quot;</span>).createTime(<span class="keyword">new</span> Date()).occupation(<span class="string">&quot;1&quot;</span>).occupation(<span class="string">&quot;2&quot;</span>).build();</span><br><span class="line">        Assert.assertEquals(<span class="number">2L</span>, (<span class="keyword">long</span>)room.getOccupations().size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Room(<span class="meta">@NonNull</span> String id, String name, <span class="keyword">boolean</span> active, Date createTime, Set&lt;String&gt; occupations) &#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.active = active;</span><br><span class="line">            <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">            <span class="keyword">this</span>.occupations = occupations;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Room.<span class="function">RoomBuilder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Room.RoomBuilder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Room.<span class="function">RoomBuilder <span class="title">toBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> Room.RoomBuilder()).id(<span class="keyword">this</span>.id).name(<span class="keyword">this</span>.name).active(<span class="keyword">this</span>.active).createTime(<span class="keyword">this</span>.createTime).occupations(<span class="keyword">this</span>.occupations);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isActive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.active;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getOccupations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.occupations;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="meta">@NonNull</span> String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setActive</span><span class="params">(<span class="keyword">boolean</span> active)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.active = active;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateTime</span><span class="params">(Date createTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOccupations</span><span class="params">(Set&lt;String&gt; occupations)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.occupations = occupations;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Room)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Room other = (Room)o;</span><br><span class="line">            <span class="keyword">if</span> (!other.canEqual(<span class="keyword">this</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                label63: &#123;</span><br><span class="line">                    Object <span class="keyword">this</span>$id = <span class="keyword">this</span>.getId();</span><br><span class="line">                    Object other$id = other.getId();</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>$id == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (other$id == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">break</span> label63;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>$id.equals(other$id)) &#123;</span><br><span class="line">                        <span class="keyword">break</span> label63;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Object <span class="keyword">this</span>$name = <span class="keyword">this</span>.getName();</span><br><span class="line">                Object other$name = other.getName();</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>$name == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (other$name != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>$name.equals(other$name)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.isActive() != other.isActive()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Object <span class="keyword">this</span>$createTime = <span class="keyword">this</span>.getCreateTime();</span><br><span class="line">                    Object other$createTime = other.getCreateTime();</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>$createTime == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (other$createTime != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>$createTime.equals(other$createTime)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    Object <span class="keyword">this</span>$occupations = <span class="keyword">this</span>.getOccupations();</span><br><span class="line">                    Object other$occupations = other.getOccupations();</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>$occupations == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (other$occupations != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>$occupations.equals(other$occupations)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">canEqual</span><span class="params">(Object other)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> other <span class="keyword">instanceof</span> Room;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> PRIME = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">        Object $id = <span class="keyword">this</span>.getId();</span><br><span class="line">        <span class="keyword">int</span> result = result * <span class="number">59</span> + ($id == <span class="keyword">null</span> ? <span class="number">43</span> : $id.hashCode());</span><br><span class="line">        Object $name = <span class="keyword">this</span>.getName();</span><br><span class="line">        result = result * <span class="number">59</span> + ($name == <span class="keyword">null</span> ? <span class="number">43</span> : $name.hashCode());</span><br><span class="line">        result = result * <span class="number">59</span> + (<span class="keyword">this</span>.isActive() ? <span class="number">79</span> : <span class="number">97</span>);</span><br><span class="line">        Object $createTime = <span class="keyword">this</span>.getCreateTime();</span><br><span class="line">        result = result * <span class="number">59</span> + ($createTime == <span class="keyword">null</span> ? <span class="number">43</span> : $createTime.hashCode());</span><br><span class="line">        Object $occupations = <span class="keyword">this</span>.getOccupations();</span><br><span class="line">        result = result * <span class="number">59</span> + ($occupations == <span class="keyword">null</span> ? <span class="number">43</span> : $occupations.hashCode());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Room(id=&quot;</span> + <span class="keyword">this</span>.getId() + <span class="string">&quot;, name=&quot;</span> + <span class="keyword">this</span>.getName() + <span class="string">&quot;, active=&quot;</span> + <span class="keyword">this</span>.isActive() + <span class="string">&quot;, createTime=&quot;</span> + <span class="keyword">this</span>.getCreateTime() + <span class="string">&quot;, occupations=&quot;</span> + <span class="keyword">this</span>.getOccupations() + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RoomBuilder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String id;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> active;</span><br><span class="line">        <span class="keyword">private</span> Date createTime;</span><br><span class="line">        <span class="keyword">private</span> ArrayList&lt;String&gt; occupations;</span><br><span class="line"></span><br><span class="line">        RoomBuilder() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Room.<span class="function">RoomBuilder <span class="title">id</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Room.<span class="function">RoomBuilder <span class="title">name</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Room.<span class="function">RoomBuilder <span class="title">active</span><span class="params">(<span class="keyword">boolean</span> active)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.active = active;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Room.<span class="function">RoomBuilder <span class="title">createTime</span><span class="params">(Date createTime)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Room.<span class="function">RoomBuilder <span class="title">occupation</span><span class="params">(String occupation)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.occupations == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.occupations = <span class="keyword">new</span> ArrayList();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.occupations.add(occupation);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Room.<span class="function">RoomBuilder <span class="title">occupations</span><span class="params">(Collection&lt;? extends String&gt; occupations)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.occupations == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.occupations = <span class="keyword">new</span> ArrayList();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.occupations.addAll(occupations);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Room.<span class="function">RoomBuilder <span class="title">clearOccupations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.occupations != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.occupations.clear();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Room <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Set occupations;</span><br><span class="line">            <span class="keyword">switch</span>(<span class="keyword">this</span>.occupations == <span class="keyword">null</span> ? <span class="number">0</span> : <span class="keyword">this</span>.occupations.size()) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                occupations = Collections.emptySet();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                occupations = Collections.singleton(<span class="keyword">this</span>.occupations.get(<span class="number">0</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                Set&lt;String&gt; occupations = <span class="keyword">new</span> LinkedHashSet(<span class="keyword">this</span>.occupations.size() &lt; <span class="number">1073741824</span> ? <span class="number">1</span> + <span class="keyword">this</span>.occupations.size() + (<span class="keyword">this</span>.occupations.size() - <span class="number">3</span>) / <span class="number">3</span> : <span class="number">2147483647</span>);</span><br><span class="line">                occupations.addAll(<span class="keyword">this</span>.occupations);</span><br><span class="line">                occupations = Collections.unmodifiableSet(occupations);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Room(<span class="keyword">this</span>.id, <span class="keyword">this</span>.name, <span class="keyword">this</span>.active, <span class="keyword">this</span>.createTime, occupations);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Room.RoomBuilder(id=&quot;</span> + <span class="keyword">this</span>.id + <span class="string">&quot;, name=&quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot;, active=&quot;</span> + <span class="keyword">this</span>.active + <span class="string">&quot;, createTime=&quot;</span> + <span class="keyword">this</span>.createTime + <span class="string">&quot;, occupations=&quot;</span> + <span class="keyword">this</span>.occupations + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>lombok还提供了其他几个注解，以及还有好多内置的参数没有讲解。但是，根据2-8原理，我们根本不需要。上面这几个足够了。更多的注解只会增加理解阅读难度。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://projectlombok.org/features/all">https://projectlombok.org/features/all</a></p><p><a href="http://kriszhang.com/lombok/">http://kriszhang.com/lombok/</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> lombok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IntelIj IDEA运行JUnit Test OutOfMemoryError</title>
      <link href="2018/01/18/idea-run-OutOfMemoryError/"/>
      <url>2018/01/18/idea-run-OutOfMemoryError/</url>
      
        <content type="html"><![CDATA[<p>好久没看到<code>OutOfMemoryError</code>这种错误了，今天跑测试的时候发现总是报错。针对IDEA需要修改几个配置。</p><p>JUnit Test在运行前，IDEA会build整个项目，这个是喜欢eclipse的人最讨厌的地方，因为即便是别的不相干的类没配置好，我的Test也不能跑。我的错误正好是build的时候出现内存不够的。</p><h2 id="修改build内存"><a href="#修改build内存" class="headerlink" title="修改build内存"></a>修改build内存</h2><p>位置<code>Settings -&gt; Compiler -&gt; Build process heap size (MB)</code>, 原来默认是800m，修改2048M后，错误消失。</p><h2 id="修改运行时内存"><a href="#修改运行时内存" class="headerlink" title="修改运行时内存"></a>修改运行时内存</h2><p>针对当前运行的Test，你需要配置运行内存。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Run -&gt; Edit Configurations...</span><br></pre></td></tr></table></figure><p>设置 <code>-XmxNNNm</code> to VM Options.</p><p>For example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-ea -Xmx1024m</span><br></pre></td></tr></table></figure><p>The “-ea” means “enable assertions”.</p><p>If your unit test(s) can’t run in a 1GB of memory then it’s possible that you have a memory leak.</p><h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p>stack overflow；</p><p><a href="https://stackoverflow.com/questions/24323628/java-outofmemoryerror-insufficient-memory-while-running-junits-in-idea">https://stackoverflow.com/questions/24323628/java-outofmemoryerror-insufficient-memory-while-running-junits-in-idea</a></p>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git pull fails “unable to resolve reference” “unable to update local ref”</title>
      <link href="2018/01/17/git-pull-fails-unable-to-resolve-reference-unable-to-update-local-ref/"/>
      <url>2018/01/17/git-pull-fails-unable-to-resolve-reference-unable-to-update-local-ref/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>由于有人rebase了分支，或者不知道怎么搞的。其他人拉取代码的时候，发现拉不下来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;git fetch</span><br><span class="line"></span><br><span class="line">error: cannot lock ref &#39;refs&#x2F;remotes&#x2F;origin&#x2F;xxx-branch&#39;: is at 8117caf7b1c88b2d5dfebd7581f6891d87b9abee but expected f38e8d35ae8ea7f177c537a98f4140dd76b8e2bd</span><br><span class="line">From xxxxxxx-git-url</span><br><span class="line"> ! f38e8d35..9d7b8e7a  xxx-branch -&gt; origin&#x2F;xxx-branch  (unable to update local ref)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>尝试clean本地git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git gc --prune&#x3D;now</span><br><span class="line">$ git remote prune origin</span><br></pre></td></tr></table></figure><p>man git-gc(1):</p><blockquote><p>git-gc - Cleanup unnecessary files and optimize the local repository</p><p>git gc [–aggressive] [–auto] [–quiet] [–prune=<date> | –no-prune]</p><pre><code>  Runs a number of housekeeping tasks within the current &gt;repository, such as compressing file revisions  (to reduce disk space and increase performance) and removing unreachable objects which may have been  created from prior invocations of git add.  Users are encouraged to run this task on a regular basis within each repository to maintain good disk  space utilization and good operating performance.</code></pre></blockquote><p>man git-remote(1):</p><blockquote><p>git-remote - manage set of tracked repositories</p><p>git remote prune [-n | –dry-run] <name></p><pre><code>      Deletes all stale remote-tracking branches under &lt;name&gt;. These stale branches have already been      removed from the remote repository referenced by &lt;name&gt;, but are still locally available in      &quot;remotes/&lt;name&gt;&quot;.            </code></pre></blockquote><h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p>Stack Overflow ，<br>原问题：<a href="https://stackoverflow.com/questions/2998832/git-pull-fails-unable-to-resolve-reference-unable-to-update-local-ref">https://stackoverflow.com/questions/2998832/git-pull-fails-unable-to-resolve-reference-unable-to-update-local-ref</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用ControllerAdvice注意事项，Ambiguous @ExceptionHandler method mapped for [class org.springframework.web.bind.MethodArgumentNotValidException]</title>
      <link href="2018/01/12/ambiguous-controlleradvice/"/>
      <url>2018/01/12/ambiguous-controlleradvice/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>ControllerAdvice</code>非常好用，可以把系统内部的异常统一处理。用起来也很简单。比如，<a href="http://www.cnblogs.com/woshimrf/p/spring-web-400.html">http://www.cnblogs.com/woshimrf/p/spring-web-400.html</a></p><p>而Spring提供了一个base类<code>ResponseEntityExceptionHandler</code>，可以使用这个来处理。但用的时候要注意，不要重复定义异常捕获，对于base里已经定义好的，只要overwrite就好，不要重复声明异常拦截。</p><a id="more"></a><p>以下来自<a href="https://stackoverflow.com/questions/38282298/ambiguous-exceptionhandler-method-mapped-for-class-org-springframework-web-bin">stackoverflow</a></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestResponseEntityExceptionHandler</span> <span class="keyword">extends</span> <span class="title">ResponseEntityExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger log = LoggerFactory.getLogger(RestResponseEntityExceptionHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123; ConstraintViolationException.class &#125;)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.BAD_REQUEST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ErrorWrapper <span class="title">handleConstraintViolationException</span><span class="params">(ConstraintViolationException e)</span> </span>&#123;</span><br><span class="line">        String fieldName = e.getConstraintName();</span><br><span class="line">        String message = getResourceMessage(fieldName + <span class="string">&quot;.alreadyExists&quot;</span>, <span class="string">&quot;Already Exists&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ErrorWrapper(fieldName + <span class="string">&quot;.error&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123; MethodArgumentNotValidException.class &#125;)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.BAD_REQUEST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ErrorWrapper <span class="title">handleMethodArgumentNotValidException</span><span class="params">(MethodArgumentNotValidException e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ErrorWrapper(<span class="string">&quot;.error&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getResourceMessage</span><span class="params">(String key, String defaultMessage)</span> </span>&#123;</span><br><span class="line">        String message = applicationContext.getMessage(key, <span class="keyword">null</span>, Locale.getDefault());</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(message)) &#123;</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> defaultMessage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将会得到以下异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0&#39;: Invocation of init method failed; nested exception is java.lang.IllegalStateException: Ambiguous @ExceptionHandler method mapped for [class org.springframework.web.bind.MethodArgumentNotValidException]: &#123;public com.ca.bean.ErrorWrapper com.ca.exceptionHandler.RestResponseEntityExceptionHandler.handleMethodArgumentNotValidException(org.springframework.web.bind.MethodArgumentNotValidException), public final org.springframework.http.ResponseEntity org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler.handleException(java.lang.Exception,org.springframework.web.context.request.WebRequest)&#125;</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1578) ~[spring-beans-4.3.0.RELEASE.jar:4.3.0.RELEASE]</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) ~[spring-beans-4.3.0.RELEASE.jar:4.3.0.RELEASE]</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.3.0.RELEASE.jar:4.3.0.RELEASE]</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.0.RELEASE.jar:4.3.0.RELEASE]</span><br><span class="line">    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.0.RELEASE.jar:4.3.0.RELEASE]</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.0.RELEASE.jar:4.3.0.RELEASE]</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.3.0.RELEASE.jar:4.3.0.RELEASE]</span><br><span class="line">    at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:775) ~[spring-beans-4.3.0.RELEASE.jar:4.3.0.RELEASE]</span><br><span class="line">    at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:861) ~[spring-context-4.3.0.RELEASE.jar:4.3.0.RELEASE]</span><br><span class="line">    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:541) ~[spring-context-4.3.0.RELEASE.jar:4.3.0.RELEASE]</span><br><span class="line">    at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444) ~[spring-web-4.3.0.RELEASE.jar:4.3.0.RELEASE]</span><br><span class="line">    at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326) ~[spring-web-4.3.0.RELEASE.jar:4.3.0.RELEASE]</span><br><span class="line">    at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107) [spring-web-4.3.0.RELEASE.jar:4.3.0.RELEASE]</span><br><span class="line">    at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:5099) [catalina.jar:7.0.70]</span><br><span class="line">    at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5615) [catalina.jar:7.0.70]</span><br><span class="line">    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:147) [catalina.jar:7.0.70]</span><br><span class="line">    at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1571) [catalina.jar:7.0.70]</span><br><span class="line">    at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1561) [catalina.jar:7.0.70]</span><br><span class="line">    at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_92]</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_92]</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_92]</span><br><span class="line">    at java.lang.Thread.run(Thread.java:745) [na:1.8.0_92]</span><br><span class="line">Caused by: java.lang.IllegalStateException: Ambiguous @ExceptionHandler method mapped for [class org.springframework.web.bind.MethodArgumentNotValidException]: &#123;public com.ca.bean.ErrorWrapper com.ca.exceptionHandler.RestResponseEntityExceptionHandler.handleMethodArgumentNotValidException(org.springframework.web.bind.MethodArgumentNotValidException), public final org.springframework.http.ResponseEntity org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler.handleException(java.lang.Exception,org.springframework.web.context.request.WebRequest)&#125;</span><br><span class="line">    at org.springframework.web.method.annotation.ExceptionHandlerMethodResolver.addExceptionMapping(ExceptionHandlerMethodResolver.java:109) ~[spring-web-4.3.0.RELEASE.jar:4.3.0.RELEASE]</span><br><span class="line">    at org.springframework.web.method.annotation.ExceptionHandlerMethodResolver.&lt;init&gt;(ExceptionHandlerMethodResolver.java:76) ~[spring-web-4.3.0.RELEASE.jar:4.3.0.RELEASE]</span><br><span class="line">    at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.initExceptionHandlerAdviceCache(ExceptionHandlerExceptionResolver.java:265) ~[spring-webmvc-4.3.0.RELEASE.jar:4.3.0.RELEASE]</span><br><span class="line">    at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.afterPropertiesSet(ExceptionHandlerExceptionResolver.java:241) ~[spring-webmvc-4.3.0.RELEASE.jar:4.3.0.RELEASE]</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1637) ~[spring-beans-4.3.0.RELEASE.jar:4.3.0.RELEASE]</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1574) ~[spring-beans-4.3.0.RELEASE.jar:4.3.0.RELEASE]</span><br><span class="line">    ... 21 common frames omitted</span><br></pre></td></tr></table></figure><p>异常堆栈标明，重复定义了异常拦截。那么如果继承了<code>ResponseEntityExceptionHandler</code>之后，想修改某些内容怎么办呢？</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><blockquote><p>只要重写父类方法即可。不要在重写的方法上声明拦截异常。</p></blockquote><p>对于<code>ResponseEntityExceptionHandler</code>已经定义好的异常，不需要重新定义，只要重写方法就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中Optional使用注意事项</title>
      <link href="2018/01/10/java-optional-usage-note/"/>
      <url>2018/01/10/java-optional-usage-note/</url>
      
        <content type="html"><![CDATA[<img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1515565857866&di=e334c4fe4639ee388de42a45b533ae09&imgtype=0&src=http%3A%2F%2Fpic3.zhongsou.com%2Fimage%2F38059093fa760e8f707.jpg" alt="i18n" style="width: 700px;margin:0 auto;display:block;"/><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前遇到过使用Optional之后带来的隐含bug，现在强调记录一下不好的用法，防止错用。</p><h2 id="Optional不能序列化，不能作为类的字段-field"><a href="#Optional不能序列化，不能作为类的字段-field" class="headerlink" title="Optional不能序列化，不能作为类的字段(field)"></a>Optional不能序列化，不能作为类的字段(field)</h2><p>这点尤为重要，即类要纯粹。如果是POJO就原始类型就可以了，如果是领域对象，则更不应该使用Optional作为field。</p><h2 id="Optional不适合作为方法参数"><a href="#Optional不适合作为方法参数" class="headerlink" title="Optional不适合作为方法参数"></a>Optional不适合作为方法参数</h2><p>另一种不太适合使用Optional的情况是将该类型作为方法或者构造函数的参数，这将导致不必要的代码复杂化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User(<span class="string">&quot;john@gmail.com&quot;</span>, <span class="string">&quot;1234&quot;</span>, Optional.empty());</span><br></pre></td></tr></table></figure><p>而且，内部如果忘记<code>isPresent</code>，会得到<code>NoSuchElementException</code>。所以</p><p>相反，使用方法重载(method overloading)来处理非强制性参数要方便得多。</p><h2 id="推荐Optional作为函数返回值"><a href="#推荐Optional作为函数返回值" class="headerlink" title="推荐Optional作为函数返回值"></a>推荐Optional作为函数返回值</h2><p>使用Optional作为返回值可以增强stream处理，构建流式API. 比如， <code>findFirst()</code>就是返回一个<code>Optional</code>对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenEmptyStream_thenReturnDefaultOptional</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    User user = users.stream().findFirst().orElse(<span class="keyword">new</span> User(<span class="string">&quot;default&quot;</span>, <span class="string">&quot;1234&quot;</span>));</span><br><span class="line">    </span><br><span class="line">    assertEquals(user.getEmail(), <span class="string">&quot;default&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Optional和steam组合更有益处"><a href="#Optional和steam组合更有益处" class="headerlink" title="Optional和steam组合更有益处"></a>Optional和steam组合更有益处</h2><p>级联调用是危险的，很容易产生空指针。比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String isocode = user.getAddress().getCountry().getIsocode().toUpperCase();</span><br></pre></td></tr></table></figure><p>在传统做法里，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</span><br><span class="line">    Address address = user.getAddress();</span><br><span class="line">    <span class="keyword">if</span> (address != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Country country = address.getCountry();</span><br><span class="line">        <span class="keyword">if</span> (country != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String isocode = country.getIsocode();</span><br><span class="line">            <span class="keyword">if</span> (isocode != <span class="keyword">null</span>) &#123;</span><br><span class="line">                isocode = isocode.toUpperCase();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用Optional可以精简代码，降低复杂度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String result = Optional.ofNullable(user)</span><br><span class="line">  .flatMap(User::getAddress)</span><br><span class="line">  .flatMap(Address::getCountry)</span><br><span class="line">  .map(Country::getIsocode)</span><br><span class="line">  .orElse(<span class="string">&quot;default&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Optional类对我们最有帮助的一个用例是同Stream或者其他方法组合使用，这些方法会返回一个可构建流畅API的Optional值。如果仅仅作为判空，那么不要使用Optional，直接判null就好。</p><p>比如，使用Stream 的Optional对象的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void whenGetStream_thenOk() &#123;</span><br><span class="line">    User user &#x3D; new User(&quot;john@gmail.com&quot;, &quot;1234&quot;);</span><br><span class="line">    List&lt;String&gt; emails &#x3D; Optional.ofNullable(user)</span><br><span class="line">      .stream()</span><br><span class="line">      .filter(u -&gt; u.getEmail() !&#x3D; null &amp;&amp; u.getEmail().contains(&quot;@&quot;))</span><br><span class="line">      .map( u -&gt; u.getEmail())</span><br><span class="line">      .collect(Collectors.toList());</span><br><span class="line">   </span><br><span class="line">    assertTrue(emails.size() &#x3D;&#x3D; 1);</span><br><span class="line">    assertEquals(emails.get(0), user.getEmail());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>原文链接：<a href="https://stackify.com/optional-java/">https://stackify.com/optional-java/</a></p><p>关于作者：</p><p>Eugen是一名软件工程师，对Spring、REST API、安全和教育拥有极大热情。同时，他还是Baeldung（推特账号@baeldung）的创始人。</p>]]></content>
      
      
      <categories>
          
          <category> Java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>how-to-enable-https-for-coding-page</title>
      <link href="2017/12/18/how-to-enable-https-for-coding-page/"/>
      <url>2017/12/18/how-to-enable-https-for-coding-page/</url>
      
        <content type="html"><![CDATA[<p><img src="https://upload.wikimedia.org/wikipedia/commons/e/e5/HTTPS_icon.png"></p><p>移除github page的指向，完全采用coding page，在设置中申请证书即可。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何面对博文被抓取</title>
      <link href="2017/12/14/how-to-deal-with-web-crawler/"/>
      <url>2017/12/14/how-to-deal-with-web-crawler/</url>
      
        <content type="html"><![CDATA[<div align=center><img width="800" height="400" src="https://images.techhive.com/images/article/2013/12/spider-100160327-large.jpg"/></div><p>昨天把hexo博客的url的日期去掉了，号称说3级以下的地址可以提高爬虫的rank。今天早上输入网址的时候，不小心多带了一个空格，导致变成了google搜索。然后就发现了文章被爬去的事情。打开发现爬去的文章掐头去尾，隐去了作者信息。有的给个原文连接，有的是啥也不给。</p><p>昨晚搞到1点多，才搞出来。然后轻轻松松被拿走，然后加广告。。。</p><p>所谓的CC by xxx 没有任何意义。看到有个爬虫专门把文章转换成繁体的(好几个)，有个更牛逼, 把标题和作者改成自己，图片添加了自己的水印(清屏网)。</p><p>所以，花样百出，防不胜防。</p><hr><h2 id="首先，应该如何看待这个问题？"><a href="#首先，应该如何看待这个问题？" class="headerlink" title="首先，应该如何看待这个问题？"></a>首先，应该如何看待这个问题？</h2><p>我认为既然选择了互联网，就拥抱这种现象吧。起点的作者总是在写文章时不时的加一句<code>看盗版的xxx</code>, 因为这关系到了作者的切身意义，都是钱啊。 而写博客的呢，这又是为了什么？ 是为了记录。那么，被爬去也是没啥坏处的，坏就坏在盗版小说会标注作者，盗版博客会去掉作者。</p><h2 id="怎么解决"><a href="#怎么解决" class="headerlink" title="怎么解决"></a>怎么解决</h2><p>全手工的盗版，是防不住的。关键是大量的爬虫盗版。这个可以有。爬虫通常掐头去尾，所以把作者写到博客里，把作者写到代码注释里，把作者写到demo里。如果对于盗图有意见，可以加防盗链，可以加水印，或者制作图片的时候就加上作者。</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>install-nginx-on-centos</title>
      <link href="2017/12/14/install-nginx-on-centos/"/>
      <url>2017/12/14/install-nginx-on-centos/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1513194622828&di=90acc1e7bf66cfae227b0f4ae7ffe101&imgtype=0&src=http://static.codeceo.com/images/2016/03/231629qzlzebd9e7xxpnfx.png"></p><a id="more"></a><h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc-c++</span><br><span class="line">yum -y install pcre pcre-devel</span><br><span class="line">yum -y install zlib zlib-devel</span><br><span class="line">yum -y install openssl openssl-devel libssl-dev</span><br></pre></td></tr></table></figure><h1 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.9.12.tar.gz</span><br><span class="line">tar -zxvf nginx-1.9.12.tar.gz</span><br></pre></td></tr></table></figure><h1 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure --sbin-path=/usr/local/nginx/nginx --conf-path=/usr/local/nginx/nginx.conf --pid-path=/usr/local/nginx/nginx.pid --with-http_ssl_module</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h1 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis nginx</span><br></pre></td></tr></table></figure><h1 id="防火墙放开"><a href="#防火墙放开" class="headerlink" title="防火墙放开"></a>防火墙放开</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;80&#x2F;tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx</span><br></pre></td></tr></table></figure><h1 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx -s stop</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.cnblogs.com/rwxwsblog/p/5281756.html">https://www.cnblogs.com/rwxwsblog/p/5281756.html</a></li><li><a href="https://www.cnblogs.com/gabrielchen/p/5066120.html">https://www.cnblogs.com/gabrielchen/p/5066120.html</a></li><li><a href="https://www.cnblogs.com/brucetang/p/6093075.html">https://www.cnblogs.com/brucetang/p/6093075.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用nginx代理跨域，使用nginx代理bing的每日一图</title>
      <link href="2017/12/14/nginx-proxy-bing-as-cors/"/>
      <url>2017/12/14/nginx-proxy-bing-as-cors/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1513194622828&di=90acc1e7bf66cfae227b0f4ae7ffe101&imgtype=0&src=http://static.codeceo.com/images/2016/03/231629qzlzebd9e7xxpnfx.png"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>自从搞清楚了跨域原理后一直自鸣得意，感觉跨域没啥问题了。而事实上对关于跨域的几个header的理解也有限，但那又如何，我能做到跨域就行了。今天想把博客背景图改成bing的每日一图，发现遇到跨域问题。首先想到的就是自己写一个web，请求bing，然后传出结果，把自己的接口允许跨域。确实做到了，但是。我找了一台阿里云服务器，我安装了java，我编写了一个基于dropwizard的webservice。我需要写脚本去部署，确保系统稳定，挂了自动重启。我要写一堆的java代码来完成这件事。忽然想到nginx，于是一发不可收拾。</p><a id="more"></a><h1 id="安装好Nginx"><a href="#安装好Nginx" class="headerlink" title="安装好Nginx"></a>安装好Nginx</h1><p>参阅<a href="http://blog.rmiao.top/install-nginx-on-centos/">http://blog.rmiao.top/install-nginx-on-centos/</a>   </p><p>找到配置文件<code>/usr/local/nginx/nginx.conf</code></p><h1 id="新增代理路由"><a href="#新增代理路由" class="headerlink" title="新增代理路由"></a>新增代理路由</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">location ^~&#x2F;proxy&#x2F;bing&#x2F; &#123;</span><br><span class="line">    add_header &#39;Access-Control-Allow-Origin&#39; &#39;http:&#x2F;&#x2F;localhost:8088&#39;;</span><br><span class="line">    add_header &#39;Cache-Control&#39; &#39;public, max-age&#x3D;604800&#39;;</span><br><span class="line"></span><br><span class="line">    add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;;</span><br><span class="line">    add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET, POST, OPTIONS&#39;;</span><br><span class="line"></span><br><span class="line">    rewrite ^&#x2F;proxy&#x2F;bing&#x2F;(.*)$ &#x2F;$1 break;</span><br><span class="line">    proxy_pass https:&#x2F;&#x2F;cn.bing.com&#x2F;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="浏览器访问自动代理"><a href="#浏览器访问自动代理" class="headerlink" title="浏览器访问自动代理"></a>浏览器访问自动代理</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;101.200.218.760&#x2F;proxy&#x2F;bing&#x2F;HPImageArchive.aspx?format&#x3D;js&amp;idx&#x3D;0&amp;n&#x3D;1</span><br><span class="line"></span><br><span class="line">代理对象为：</span><br><span class="line">https:&#x2F;&#x2F;cn.bing.com&#x2F;HPImageArchive.aspx?format&#x3D;js&amp;idx&#x3D;0&amp;n&#x3D;1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是最简单的实现方案，但缺点是只能指定一个域名跨域。</p><h1 id="如果我想增加多个origin怎么办"><a href="#如果我想增加多个origin怎么办" class="headerlink" title="如果我想增加多个origin怎么办"></a>如果我想增加多个origin怎么办</h1><p>不要想用逗号隔开，这个不行，浏览器不允许。那么只能自己判断比较后插入一个合适的值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ^~/proxy/bing/ &#123;</span><br><span class="line"></span><br><span class="line">        set $cors &quot;local&quot;;</span><br><span class="line"></span><br><span class="line">        if ( $http_referer ~* &quot;(https?://www\.cnblogs\.com/woshimrf[^\s]*)|(https?://api.rmiao.top[^\s]*)|(https?://blog.rmiao.top[^\s]*)|(http://localhost[^\s]*)&quot; ) &#123;</span><br><span class="line">            set $cors &quot;allow&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if ( $request_method = &quot;OPTIONS&quot; ) &#123;</span><br><span class="line">            set $cors &quot;$&#123;cors&#125;options&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if ( $cors = &quot;allowoptions&quot; ) &#123;</span><br><span class="line">            add_header &#x27;Access-Control-Allow-Origin&#x27; &quot;$http_origin&quot;;</span><br><span class="line">            add_header &#x27;Access-Control-Allow-Credentials&#x27; &quot;true&quot;;</span><br><span class="line">            add_header &#x27;Access-Control-Allow-Methods&#x27; &#x27;GET, POST, OPTIONS, DELETE&#x27;;</span><br><span class="line">            add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;reqid, nid, host, x-real-ip, x-forwarded-ip, event-type, event-id, accept, content-type&#x27;;</span><br><span class="line">            add_header &#x27;Access-Control-Max-Age&#x27; 2592000;</span><br><span class="line">            add_header &#x27;Content-Length&#x27; 0;</span><br><span class="line">            add_header &#x27;Content-Type&#x27; &#x27;text/plain, charset=utf-8&#x27;;</span><br><span class="line">            </span><br><span class="line">            # indicate successful return with no content</span><br><span class="line">            return 204;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        if ($cors = &quot;allow&quot;) &#123;</span><br><span class="line">            rewrite ^/proxy/bing/(.*)$ /pub_cors/$1 last;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if ($cors = &quot;local&quot;) &#123;</span><br><span class="line">            return 403;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ^~/pub_cors/ &#123;</span><br><span class="line">        internal;</span><br><span class="line">        # Tells the browser this origin may make cross-origin requests</span><br><span class="line">        add_header &#x27;Access-Control-Allow-Origin&#x27; &quot;$http_origin&quot;;</span><br><span class="line">        # in a preflight response, tells browser the subsequent actual request can include user credentials (e.g., cookies)</span><br><span class="line">        add_header &#x27;Access-Control-Allow-Credentials&#x27; &quot;true&quot;;</span><br><span class="line">        add_header &#x27;Access-Control-Allow-Methods&#x27; &#x27;GET, POST, OPTIONS, DELETE&#x27;;</span><br><span class="line">        add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;reqid, nid, host, x-real-ip, x-forwarded-ip, event-type, event-id, accept, content-type&#x27;;</span><br><span class="line">        add_header &#x27;Access-Control-Max-Age&#x27; 2592000;</span><br><span class="line">        add_header &#x27;Cache-Control&#x27; &quot;public, max-age=604800&quot;;</span><br><span class="line"></span><br><span class="line">        rewrite ^/pub_cors/(.*)$ /$1 break;</span><br><span class="line">        proxy_pass https://cn.bing.com/; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>语法要点就不推测了。后面有机会认真学习下。不过，这里还是可以有几个语法参考的。</p><ol><li>设置变量 <code> set $cors &quot;local&quot;;</code></li><li>正则表达式 <code>location ^~/proxy/bing/ &#123;</code></li><li>获取request的refer <code>$http_referer</code></li><li>获取request的method <code>$request_method</code></li><li>获取request的origin <code>$http_origin</code></li><li>变量的读取，包裹在引号里也可以， <code>add_header &#39;Access-Control-Allow-Origin&#39; &quot;$http_origin&quot;;</code></li><li>变量的读取，可以用大括号包裹， <code>set $cors &quot;$&#123;cors&#125;options&quot;;</code></li><li>if 里的判断可以用正则， <code>~*</code> 表示不区分大小写，匹配正则, 取反<code>!~*</code></li><li><code>~</code> 区分大小写，匹配正则， 取反 <code>!~</code></li><li>添加一个header， <code>add_header &#39;Access-Control-Max-Age&#39; 2592000;</code></li><li>设置option的预检请求为204</li><li>跳转， <code>rewrite ^/proxy/bing/(.*)$ /pub_cors/$1 last;</code>, 分3部分，第一部分是正则，是匹配当前location的url的正则。 第二部分是映射的值，在第二部分里可以使用<code>$1</code>来获得匹配第一个括号匹配的内容。</li><li>if 里的判断可以用等号, <code> if ($cors = &quot;allow&quot;) &#123;</code></li><li><code>internal;</code>是不是只能内部访问？</li><li>对于这种代理，尤其是bing这个，完全可以缓存掉。 <code>add_header &#39;Cache-Control&#39; &quot;public, max-age=604800&quot;;</code></li><li><code>proxy_pass https://cn.bing.com/;</code> 代理host，看样子下一步请求的host就是它，对于<code> rewrite ^/pub_cors/(.*)$ /$1 break;</code>则是把匹配的<code>$1</code>拼接到host之后。即，完成了转发操作。</li></ol><p>确实比自己写Java web来做转发的好。</p><h2 id="TODO-研究Nginx-配置文件的语法"><a href="#TODO-研究Nginx-配置文件的语法" class="headerlink" title="TODO 研究Nginx 配置文件的语法"></a>TODO 研究Nginx 配置文件的语法</h2><p>上面的编写过程都是猜测出来的，没有看官方文档。英语不好就是不愿意看官网。后面有机会再研究具体语法。不过短期应该不会，很少用到nginx。到用到的时候再说吧。</p><h2 id="TODO-正则表达式学习"><a href="#TODO-正则表达式学习" class="headerlink" title="TODO 正则表达式学习"></a>TODO 正则表达式学习</h2><p>虽然看了很多变正则表达式，但仅仅会写一个简单的基础模型。nginx里的配置让我看到了正则表达式的强大。什么时候深入学习一下呢？只能放到todo list里了，短期没时间规划。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>了解到怎么返回405：</p><ul><li><a href="https://stackoverflow.com/questions/18970620/nginx-reject-request-if-header-is-not-present-or-wrong">https://stackoverflow.com/questions/18970620/nginx-reject-request-if-header-is-not-present-or-wrong</a></li></ul><p>照抄写的跨域方案：   </p><ul><li><a href="http://blog.csdn.net/oyzl68/article/details/18741057">http://blog.csdn.net/oyzl68/article/details/18741057</a></li></ul><p>最先看到的解决方案，虽然不合适：  </p><ul><li><a href="https://www.cnblogs.com/gabrielchen/p/5066120.html">https://www.cnblogs.com/gabrielchen/p/5066120.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>upgrade-gradle-wrapper</title>
      <link href="2017/11/23/upgrade-gradle-wrapper/"/>
      <url>2017/11/23/upgrade-gradle-wrapper/</url>
      
        <content type="html"><![CDATA[<p>springboot 2.0需要gradle 1+, 而自动构建的都是3.+，手动升级如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;gradlew wrapper --gradle-version&#x3D;4.3.1 --distribution-type&#x3D;bin</span><br><span class="line">.&#x2F;gradlew tasks</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Gradle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用dropwizard(6)-国际化-easy-i18n</title>
      <link href="2017/11/23/dropwizard-i18n/"/>
      <url>2017/11/23/dropwizard-i18n/</url>
      
        <content type="html"><![CDATA[<img src="https://make.wordpress.org/polyglots/files/2016/01/i8n-v2.png" alt="i18n" style="width: 400px;"/><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Dropwizard官方文档并没有提供国际化的模块，所以只能自己加。Spring的MessageResource用的很顺手，所以copy过来。</p><a id="more"></a><h1 id="Easy-i18n"><a href="#Easy-i18n" class="headerlink" title="Easy i18n"></a>Easy i18n</h1><p>在整合Dropwizard的时候，多语言貌似只能通过jdk自带的ResourceBundle拿数据。其实也就够了，但在开发过程中发现需要缓存，需要解析占位符等。代码越写越多，显然不是仅仅一个调用就完事的。写的差不多的时候突然觉得和spring context里的message source结构类似。于是，放弃维护已经开始变的复杂的逻辑，直接使用spring。</p><p>但选取dropwizard的时候就是摒弃了spring，再拿过来也不好玩了。干脆，抽取Spring context项目的MessageResource相关代码，重写封装了一个library: <a href="https://github.com/Ryan-Miao/easy-i18n">https://github.com/Ryan-Miao/easy-i18n</a>, 欢迎star。</p><p><a href="https://github.com/Ryan-Miao/easy-i18n">easy-i18n</a>还是和在Spring项目中相同。</p><p>首先，引入依赖，由于github项目的library已经有仓库去维护了，就没费心思放到maven和jcenter了，直接从github上拉取。类库地址为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>jitpack.io<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://jitpack.io<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.Ryan-Miao<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easy-i18n<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><h3 id="情形一-只有一个Resource-Bundle"><a href="#情形一-只有一个Resource-Bundle" class="headerlink" title="#情形一 只有一个Resource Bundle"></a>#情形一 只有一个Resource Bundle</h3><p>在resources下新建<code>i18n/messages.properties</code>以及<code>i18n/messages_zh_CN.properties</code>. demo位置：<a href="https://github.com/Ryan-Miao/l4dropwizard/blob/master/src/main/resources/i18n/messages.properties">l4dropwizard</a></p><p>然后，调用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testI18n</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">    messageSource.addBasenames(<span class="string">&quot;i18n/messages&quot;</span>);</span><br><span class="line">    messageSource.setDefaultEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    String index = messageSource.getMessage(<span class="string">&quot;index&quot;</span>, <span class="keyword">null</span>, Locale.US);</span><br><span class="line">    System.out.println(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="情形二-我有多个Resource-Bundle"><a href="#情形二-我有多个Resource-Bundle" class="headerlink" title="#情形二 我有多个Resource Bundle"></a>#情形二 我有多个Resource Bundle</h3><p>实际项目中，由于产品分类，有时候需要创建多个Resource Bundle，这时候也简单，只要创建多个<code>ResourceBundleMessageSource</code>来读取翻译即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testI18n2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">    messageSource.addBasenames(<span class="string">&quot;i18n/messages&quot;</span>);</span><br><span class="line">    messageSource.setDefaultEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    String index = messageSource.getMessage(<span class="string">&quot;index&quot;</span>, <span class="keyword">null</span>, Locale.US);</span><br><span class="line">    System.out.println(index);</span><br><span class="line">    </span><br><span class="line">    ResourceBundleMessageSource messageSource2 = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">    messageSource2.addBasenames(<span class="string">&quot;i18n/messages2&quot;</span>);</span><br><span class="line">    messageSource2.setDefaultEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    String second = messageSource2.getMessage(<span class="string">&quot;second&quot;</span>, <span class="keyword">null</span>, Locale.US);</span><br><span class="line">    System.out.println(second);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="情形三-我有多个Resource-Bundle但读取翻译的时候我想一起"><a href="#情形三-我有多个Resource-Bundle但读取翻译的时候我想一起" class="headerlink" title="#情形三 我有多个Resource Bundle但读取翻译的时候我想一起"></a>#情形三 我有多个Resource Bundle但读取翻译的时候我想一起</h3><p>有时候，想要读取翻译，可能翻译文件在不同的Resource Bundle，但我指向用一个接口去调用。这时候，做法时候在这几个Resource Bundle的里面添加命名空间，即key要在这几个Resource Bundle里唯一，而不仅仅是本文件唯一。</p><p>然后，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testI18n2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">    messageSource.addBasenames(<span class="string">&quot;i18n/messages&quot;</span>, <span class="string">&quot;i18n/messages2&quot;</span>);</span><br><span class="line">    messageSource.setDefaultEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    String index = messageSource.getMessage(<span class="string">&quot;index&quot;</span>, <span class="keyword">null</span>, Locale.US);</span><br><span class="line">    System.out.println(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种做法，会一次从两个Resource Bundle里寻找翻译，找到即返回。因此，如果有相同的key，将导致只有第一个生效。</p><h3 id="情形4"><a href="#情形4" class="headerlink" title="#情形4"></a>#情形4</h3><p>没有了，你翻译要那么复杂吗。</p><p>更多用法，参考测试类：<a href="https://github.com/Ryan-Miao/easy-i18n/blob/master/src/test/java/com/miao/easyi18n/support/ResourceBundleMessageSourceTest.java">ResourceBundleMessageSourceTest</a></p><h1 id="Demo-source"><a href="#Demo-source" class="headerlink" title="Demo source"></a>Demo source</h1><p><a href="https://github.com/Ryan-Miao/l4dropwizard">https://github.com/Ryan-Miao/l4dropwizard</a></p><p>本文是基于<a href="http://www.cnblogs.com/woshimrf/tag/dropwizard/">dropwizard入门</a>之上的演进。</p><p>确保依赖都是最新的，或者自行解决版本冲突，比如jackson不同版本之间的类有所不同。</p><h2 id="引入easy-i18n"><a href="#引入easy-i18n" class="headerlink" title="引入easy-i18n"></a>引入easy-i18n</h2><p>repository url</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>jitpack.io<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://jitpack.io<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.Ryan-Miao<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easy-i18n<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="添加Resource-Bundle"><a href="#添加Resource-Bundle" class="headerlink" title="添加Resource Bundle"></a>添加Resource Bundle</h2><p>在<a href="https://github.com/Ryan-Miao/l4dropwizard/tree/master/src/main/resources">resources</a>下新增文件夹<code>i18n</code>, 依次添加几个Resource Bundle。具体做法是，在文件夹<code>i18n</code>右键 -&gt; <code>new</code> -&gt; <code>Resource Bundle</code>, 然后选择想要支持的语言。比如美国<code>en_US</code>，简体中文<code>zh_CN</code>。</p><h2 id="新建MessageService"><a href="#新建MessageService" class="headerlink" title="新建MessageService"></a>新建MessageService</h2><p>创建一个Util来处理翻译功能。<br>com.test.domain.service.IMessageService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.domain.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.MessageFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Message translation service</span></span><br><span class="line"><span class="comment"> * Created by Ryan Miao on 11/23/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMessageService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get translation by message key.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key The message key in the properties</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the translated message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">getMessage</span><span class="params">(String key, Locale locale)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get translation by message key and compose it with variables.</span></span><br><span class="line"><span class="comment">     * Note that the variable would be injected by &#123;<span class="doctag">@link</span> MessageFormat&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key The message key in the properties</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args The variables to inject into the message.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the translated message.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">getMessage</span><span class="params">(String key, List&lt;String&gt; args, Locale locale)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类<code>com.test.domain.service.impl.MessageService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.domain.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.miao.easyi18n.support.ResourceBundleMessageSource;</span><br><span class="line"><span class="keyword">import</span> com.test.domain.service.IMessageService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.inject.Inject;</span><br><span class="line"><span class="keyword">import</span> javax.inject.Singleton;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Ryan Miao on 11/23/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageService</span> <span class="keyword">implements</span> <span class="title">IMessageService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ResourceBundleMessageSource messageSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessageService</span><span class="params">(ResourceBundleMessageSource messageSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.messageSource = messageSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">(String key, Locale locale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> messageSource.getMessage(key, <span class="keyword">null</span>, locale);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">(String key, List&lt;String&gt; args, Locale locale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> messageSource.getMessage(key, args.toArray(), locale);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在IoC中提供ResourceBundleMessageSource"><a href="#在IoC中提供ResourceBundleMessageSource" class="headerlink" title="在IoC中提供ResourceBundleMessageSource"></a>在IoC中提供ResourceBundleMessageSource</h2><p>由于<code>ResourceBundleMessageSource</code>是公共组件，需要单独提取出来，并使用单例模式创建。关于IoC的配置，参阅<a href="http://www.cnblogs.com/woshimrf/p/dropwizard-with-dagger2-example.html">dropwizard中添加DI</a></p><p>在<code>ConfigurationModule</code>中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.domain.ioc.<span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.miao.easyi18n.support.ResourceBundleMessageSource;</span><br><span class="line"><span class="keyword">import</span> com.test.configuration.HelloWorldConfiguration;</span><br><span class="line"><span class="keyword">import</span> dagger.Module;</span><br><span class="line"><span class="keyword">import</span> dagger.Provides;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.inject.Singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Ryan Miao on 11/20/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigurationModule</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HelloWorldConfiguration configuration;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConfigurationModule</span><span class="params">(HelloWorldConfiguration configuration)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.configuration = configuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="function">HelloWorldConfiguration <span class="title">helloWorldConfiguration</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">ResourceBundleMessageSource <span class="title">resourceBundleMessageSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">        messageSource.addBasenames(<span class="string">&quot;i18n/messages&quot;</span>, <span class="string">&quot;i18n/messages2&quot;</span>, <span class="string">&quot;i18n/otherGroup&quot;</span>);</span><br><span class="line">        messageSource.setDefaultEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> messageSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，关于Resource Bundle的位置没有单独提出来，后面可以放到<code>HelloWorldConfiguration</code>，提到配置文件中。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在dagger中，接口和实现类的绑定只能通过手动声明。因此，绑定<code>IMessageService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="meta">@Provides</span></span><br><span class="line"><span class="function">IMessageService <span class="title">messageService</span><span class="params">(MessageService messageService)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> messageService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建测试Resource， <code>com.test.domain.resource.LocalResource</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.domain.resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.codahale.metrics.annotation.Timed;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.ImmutableMap;</span><br><span class="line"><span class="keyword">import</span> com.test.domain.entiry.GithubUser;</span><br><span class="line"><span class="keyword">import</span> com.test.domain.service.IMessageService;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiResponse;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiResponses;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.inject.Inject;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Pattern;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.GET;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.HeaderParam;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.Path;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.PathParam;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.Produces;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.core.MediaType;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Test localization</span></span><br><span class="line"><span class="comment"> * Created by Ryan Miao on 11/23/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Api(&quot;/local&quot;)</span></span><br><span class="line"><span class="meta">@Path(&quot;/local&quot;)</span></span><br><span class="line"><span class="meta">@Produces(MediaType.APPLICATION_JSON)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalResource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IMessageService messageService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LocalResource</span><span class="params">(IMessageService messageService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.messageService = messageService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET</span></span><br><span class="line">    <span class="meta">@Timed</span></span><br><span class="line">    <span class="meta">@Path(&quot;/&#123;key&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;Get github user profile.&quot;, notes = &quot;There should be the note.&quot;)</span></span><br><span class="line">    <span class="meta">@ApiResponses(&#123;</span></span><br><span class="line"><span class="meta">            @ApiResponse(code = 401, message = &quot;Valid credentials are required to access this resource.&quot;),</span></span><br><span class="line"><span class="meta">            @ApiResponse(code = 400, message = &quot;Params not valid.&quot;),</span></span><br><span class="line"><span class="meta">            @ApiResponse(code = 500, message = &quot;Something wrong from the server.&quot;),</span></span><br><span class="line"><span class="meta">            @ApiResponse(code = 200, message = &quot;Success.&quot;, response = GithubUser.class)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getIndex</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@PathParam(&quot;key&quot;)</span> <span class="keyword">final</span> String index,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@HeaderParam(&quot;Accept-Language&quot;)</span> <span class="meta">@Valid</span></span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@NotNull(message = &quot;cannot be null.&quot;)</span></span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@Pattern(regexp = &quot;([a-z]&#123;2&#125;-[A-Z]&#123;2&#125;)&quot;, message = &quot;pattern should like zh-CN, en-US.&quot;)</span></span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> String language</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Locale locale = Locale.forLanguageTag(language);</span><br><span class="line">        <span class="keyword">final</span> String message = messageService.getMessage(index, locale);</span><br><span class="line">        <span class="keyword">return</span> ImmutableMap.of(index, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果<br><img src="https://github.com/Ryan-Miao/l4dropwizard/blob/master/doc/local-cn.png?raw=true"><br><img src="https://github.com/Ryan-Miao/l4dropwizard/blob/master/doc/local-en-US.png?raw=true"></p>]]></content>
      
      
      <categories>
          
          <category> Dropwiard </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dropwizard </tag>
            
            <tag> i18n </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用dropwizard(5)--加入swagger</title>
      <link href="2017/11/21/dropwizard-with-swagger-example/"/>
      <url>2017/11/21/dropwizard-with-swagger-example/</url>
      
        <content type="html"><![CDATA[<p><img src="https://2434zd29misd3e4a4f1e73ki-wpengine.netdna-ssl.com/wp-content/uploads/2016/10/Swagger-logo-white.png"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Swagger已经成API service的规范了，本处在dropwizard中简单集成Swagger.</p><a id="more"></a><h1 id="Demo-source"><a href="#Demo-source" class="headerlink" title="Demo source"></a>Demo source</h1><p><a href="https://github.com/Ryan-Miao/l4dropwizard">https://github.com/Ryan-Miao/l4dropwizard</a></p><p>本文是基于<a href="http://www.cnblogs.com/woshimrf/tag/dropwizard/">dropwizard入门</a>之上的演进。</p><p>确保依赖都是最新的，或者自行解决版本冲突，比如jackson不同版本之间的类有所不同。</p><h1 id="添加swagger依赖"><a href="#添加swagger依赖" class="headerlink" title="添加swagger依赖"></a>添加swagger依赖</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.smoketurner&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;dropwizard-swagger&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.1.2-1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="在configuration中新增swagger的基础配置"><a href="#在configuration中新增swagger的基础配置" class="headerlink" title="在configuration中新增swagger的基础配置"></a>在configuration中新增swagger的基础配置</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonProperty(&quot;swagger&quot;)</span></span><br><span class="line"><span class="keyword">private</span> SwaggerBundleConfiguration swaggerBundleConfiguration;</span><br></pre></td></tr></table></figure><p>在配置文件中，新增</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">swagger:</span><br><span class="line">  resourcePackage: com.test.domain.resource</span><br><span class="line">  schemes:</span><br><span class="line">    - http</span><br></pre></td></tr></table></figure><h1 id="新增SwaggerBundle"><a href="#新增SwaggerBundle" class="headerlink" title="新增SwaggerBundle"></a>新增SwaggerBundle</h1><p>创建<code>com.test.bundles.SwitchableSwaggerBundle</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.bundles;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.test.configuration.HelloWorldConfiguration;</span><br><span class="line"><span class="keyword">import</span> io.dropwizard.setup.Environment;</span><br><span class="line"><span class="keyword">import</span> io.federecio.dropwizard.swagger.SwaggerBundle;</span><br><span class="line"><span class="keyword">import</span> io.federecio.dropwizard.swagger.SwaggerBundleConfiguration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchableSwaggerBundle</span> <span class="keyword">extends</span> <span class="title">SwaggerBundle</span>&lt;<span class="title">HelloWorldConfiguration</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SwaggerBundleConfiguration <span class="title">getSwaggerBundleConfiguration</span><span class="params">(HelloWorldConfiguration configuration)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configuration.getSwaggerBundleConfiguration();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(HelloWorldConfiguration configuration, Environment environment)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run(configuration, environment);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="引入SwaggerBundle"><a href="#引入SwaggerBundle" class="headerlink" title="引入SwaggerBundle"></a>引入SwaggerBundle</h2><p>在<code>com.test.HelloWorldApplication#initialize</code>新增</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bootstrap.addBundle(<span class="keyword">new</span> SwitchableSwaggerBundle());</span><br></pre></td></tr></table></figure><h1 id="修改Resource类"><a href="#修改Resource类" class="headerlink" title="修改Resource类"></a>修改Resource类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.domain.resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.codahale.metrics.annotation.Timed;</span><br><span class="line"><span class="keyword">import</span> com.test.domain.entiry.GithubUser;</span><br><span class="line"><span class="keyword">import</span> com.test.domain.service.IGithubService;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiResponse;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiResponses;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.inject.Inject;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.GET;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.Path;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.PathParam;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.Produces;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.core.MediaType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Ryan Miao on 9/14/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Api(&quot;/github&quot;)</span></span><br><span class="line"><span class="meta">@Path(&quot;/github&quot;)</span></span><br><span class="line"><span class="meta">@Produces(MediaType.APPLICATION_JSON)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GithubResource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IGithubService service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GithubResource</span><span class="params">(IGithubService service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET</span></span><br><span class="line">    <span class="meta">@Timed</span></span><br><span class="line">    <span class="meta">@Path(&quot;/users/&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;Get github user profile.&quot;, notes = &quot;There should be the note.&quot;)</span></span><br><span class="line">    <span class="meta">@ApiResponses(&#123;</span></span><br><span class="line"><span class="meta">            @ApiResponse(code = 401, message = &quot;Valid credentials are required to access this resource.&quot;),</span></span><br><span class="line"><span class="meta">            @ApiResponse(code = 400, message = &quot;Params not valid.&quot;),</span></span><br><span class="line"><span class="meta">            @ApiResponse(code = 500, message = &quot;Something wrong from the server.&quot;),</span></span><br><span class="line"><span class="meta">            @ApiResponse(code = 200, message = &quot;Success.&quot;, response = GithubUser.class)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GithubUser <span class="title">getUserProfile</span><span class="params">(<span class="meta">@PathParam(&quot;username&quot;)</span> <span class="keyword">final</span> String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> service.getUserProfile(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="install-amp-Run"><a href="#install-amp-Run" class="headerlink" title="install&amp;Run"></a>install&amp;Run</h1><p>浏览器访问<a href="http://localhost:8080/swagger">http://localhost:8080/swagger</a>,<br>结果如下：</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/dropwizard/swagger.png-f"></p>]]></content>
      
      
      <categories>
          
          <category> Dropwiard </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dropwizard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用dropwizard(4)-加入测试-jacoco代码覆盖率</title>
      <link href="2017/11/21/dropwizard-test-jacoco/"/>
      <url>2017/11/21/dropwizard-test-jacoco/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>dropwizard提供了一个简单的测试框架。这里简单集成并加入jacoco测试。</p><a id="more"></a><h1 id="Demo-source"><a href="#Demo-source" class="headerlink" title="Demo source"></a>Demo source</h1><p><a href="https://github.com/Ryan-Miao/l4dropwizard">https://github.com/Ryan-Miao/l4dropwizard</a></p><p>本文是基于<a href="http://www.cnblogs.com/woshimrf/tag/dropwizard/">dropwizard入门</a>之上的演进。</p><p>确保依赖都是最新的，或者自行解决版本冲突，比如jackson不同版本之间的类有所不同。</p><h1 id="加入dropwizard-testing"><a href="#加入dropwizard-testing" class="headerlink" title="加入dropwizard-testing"></a>加入dropwizard-testing</h1><p>在dependencies中增加依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.dropwizard&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;dropwizard-testing&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;dropwizard.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="新增Mockito"><a href="#新增Mockito" class="headerlink" title="新增Mockito"></a>新增Mockito</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.12&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mockito&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mockito-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.12.0&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="新增jacoco"><a href="#新增jacoco" class="headerlink" title="新增jacoco"></a>新增jacoco</h1><p>在properties下新增</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;jacoco.skip.instrument&gt;true&lt;&#x2F;jacoco.skip.instrument&gt;</span><br><span class="line">&lt;jacoco.percentage.instruction&gt;0.01&lt;&#x2F;jacoco.percentage.instruction&gt;</span><br><span class="line">&lt;jacoco.percentage.branch&gt;0&lt;&#x2F;jacoco.percentage.branch&gt;</span><br></pre></td></tr></table></figure><p>在plugin新增</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jacoco<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jacoco-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/ioc/**/*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/exceptions/**/*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/connector/*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/valueobject/**/*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/exception/**/*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/entity/**/*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/constant/*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*Test.*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/Dagger*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*Factory.*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*Module.*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>jacoco-initialize<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>prepare-agent<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>jacoco-check<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>test<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>check<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">rules</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">rule</span> <span class="attr">implementation</span>=<span class="string">&quot;org.jacoco.maven.RuleConfiguration&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">element</span>&gt;</span>BUNDLE<span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">limits</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">limit</span> <span class="attr">implementation</span>=<span class="string">&quot;org.jacoco.report.check.Limit&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">counter</span>&gt;</span>INSTRUCTION<span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">value</span>&gt;</span>COVEREDRATIO<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">minimum</span>&gt;</span>$&#123;jacoco.percentage.instruction&#125;<span class="tag">&lt;/<span class="name">minimum</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">limit</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">limit</span> <span class="attr">implementation</span>=<span class="string">&quot;org.jacoco.report.check.Limit&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">counter</span>&gt;</span>BRANCH<span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">value</span>&gt;</span>COVEREDRATIO<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">minimum</span>&gt;</span>$&#123;jacoco.percentage.branch&#125;<span class="tag">&lt;/<span class="name">minimum</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">limit</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">limits</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">rules</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>jacoco-report<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>test<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>report<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>jacoco-instrument<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>test<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>instrument<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">skip</span>&gt;</span>$&#123;jacoco.skip.instrument&#125;<span class="tag">&lt;/<span class="name">skip</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="编写测试"><a href="#编写测试" class="headerlink" title="编写测试"></a>编写测试</h1><p>首先，更新依赖，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install</span><br></pre></td></tr></table></figure><p>IDEA中刷新maven按钮。</p><p>然后，新建Resource测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.domain.resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.test.domain.entiry.GithubUser;</span><br><span class="line"><span class="keyword">import</span> com.test.domain.service.IGithubService;</span><br><span class="line"><span class="keyword">import</span> io.dropwizard.testing.junit.ResourceTestRule;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.ClassRule;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertEquals;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.ArgumentMatchers.anyString;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.mock;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.reset;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.verify;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.when;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Ryan Miao on 11/20/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GithubResourceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> IGithubService service = mock(IGithubService.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ClassRule</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ResourceTestRule resources = ResourceTestRule.builder()</span><br><span class="line">            .addResource(<span class="keyword">new</span> GithubResource(service))</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// we have to reset the mock after each test because of the</span></span><br><span class="line">        <span class="comment">// @ClassRule, or use a @Rule as mentioned below.</span></span><br><span class="line">        reset(service);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        GithubUser user = <span class="keyword">new</span> GithubUser();</span><br><span class="line">        String name = <span class="string">&quot;Ryan&quot;</span>;</span><br><span class="line">        user.setName(name);</span><br><span class="line">        when(service.getUserProfile(anyString())).thenReturn(user);</span><br><span class="line">        GithubUser githubUser = resources.target(<span class="string">&quot;/github/users/ryan-miao&quot;</span>).request().get(GithubUser.class);</span><br><span class="line">        assertEquals(name, githubUser.getName());</span><br><span class="line">        verify(service).getUserProfile(<span class="string">&quot;ryan-miao&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="验收，查看覆盖率"><a href="#验收，查看覆盖率" class="headerlink" title="验收，查看覆盖率"></a>验收，查看覆盖率</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install</span><br></pre></td></tr></table></figure><h2 id="查看jacoco覆盖率"><a href="#查看jacoco覆盖率" class="headerlink" title="查看jacoco覆盖率"></a>查看jacoco覆盖率</h2><p>report在<code>target/site/jacoco/index.html</code></p>]]></content>
      
      
      <categories>
          
          <category> Dropwiard </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dropwizard </tag>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用dropwizard(3)-加入DI-dagger2</title>
      <link href="2017/11/20/dropwizard-with-dagger2-example/"/>
      <url>2017/11/20/dropwizard-with-dagger2-example/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>习惯了Spring全家桶，对spring的容器爱不释手。使用dropwizard，看起来确实很轻，然而，真正使用的时候不得不面临一个问题。<strong>我们不可能一个resource就能把所有的业务逻辑囊括</strong>！那么，必然就要有负责处理逻辑的代码，有要提取的公共的代码，要做面向接口开发等等。按照简单的用法，Java Bean就自己new，只要通过Jersey提供的web能力发出去就好。这样写下来，到处都需要new，难以测试等等。目前我最care的是，每个request过来都要new一堆重复的对象，垃圾回收频繁。写个单例不就解决了？是的，当然要想到单例，然后发现几乎所有的类都是设计成单例的。然后，一堆单例的代码写的死。这就是样板代码。于是，想到提取工具类，算了，不如用Dagger好了。</p><a id="more"></a><h1 id="什么是Dagger"><a href="#什么是Dagger" class="headerlink" title="什么是Dagger"></a>什么是Dagger</h1><p>Dagger是Java里开源的DI框架中最火的之一，主要用在Android领域，很多特性也多针对Android开发的。因为Android开发对省电，性能之类的要求比较高，因此抛弃了反射，直接在编译级别生成工厂。详细学习测试：<a href="http://www.cnblogs.com/woshimrf/p/hello-dagger.html">Dagger2之helloworld原理探究</a></p><h1 id="Demo-Source"><a href="#Demo-Source" class="headerlink" title="Demo Source"></a>Demo Source</h1><p><a href="https://github.com/Ryan-Miao/l4dropwizard">https://github.com/Ryan-Miao/l4dropwizard</a></p><p>structure</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── pom.xml</span><br><span class="line">├── readme.md</span><br><span class="line">└── src</span><br><span class="line">    └── main</span><br><span class="line">        ├── java</span><br><span class="line">        │   └── com</span><br><span class="line">        │       └── test</span><br><span class="line">        │           ├── HelloWorldApplication.java</span><br><span class="line">        │           ├── bundles</span><br><span class="line">        │           │   └── ConnectivityBundle.java</span><br><span class="line">        │           ├── configuration</span><br><span class="line">        │           │   ├── HelloWorldConfiguration.java</span><br><span class="line">        │           │   └── modules</span><br><span class="line">        │           │       ├── ConnectAndReadConfig.java</span><br><span class="line">        │           │       └── GithubApiConfig.java</span><br><span class="line">        │           └── domain</span><br><span class="line">        │               ├── connect</span><br><span class="line">        │               │   ├── FeignClientBuilder.java</span><br><span class="line">        │               │   ├── GithubClient.java</span><br><span class="line">        │               │   └── GithubConnector.java</span><br><span class="line">        │               ├── entiry</span><br><span class="line">        │               │   ├── GithubUser.java</span><br><span class="line">        │               │   └── Saying.java</span><br><span class="line">        │               ├── exception</span><br><span class="line">        │               │   └── UpstreamException.java</span><br><span class="line">        │               ├── health</span><br><span class="line">        │               │   └── TemplateHealthCheck.java</span><br><span class="line">        │               ├── ioc</span><br><span class="line">        │               │   ├── component</span><br><span class="line">        │               │   │   └── GithubComponent.java</span><br><span class="line">        │               │   └── <span class="keyword">module</span></span><br><span class="line">        │               │       ├── ConfigurationModule.java</span><br><span class="line">        │               │       ├── ConnectorModule.java</span><br><span class="line">        │               │       └── ServiceModule.java</span><br><span class="line">        │               ├── resource</span><br><span class="line">        │               │   ├── GithubResource.java</span><br><span class="line">        │               │   └── HelloWorldResource.java</span><br><span class="line">        │               └── service</span><br><span class="line">        │                   ├── IGithubService.java</span><br><span class="line">        │                   └── impl</span><br><span class="line">        │                       └── GithubService.java</span><br><span class="line">        └── resources</span><br><span class="line">            └── config</span><br><span class="line">                └── dev.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>本文基于之前的<a href="http://www.cnblogs.com/woshimrf/tag/dropwizard/">dropwizard入门</a>演进.</p><h2 id="添加dagger依赖"><a href="#添加dagger依赖" class="headerlink" title="添加dagger依赖"></a>添加dagger依赖</h2><p>在<code>properties</code>结点下新增</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;dagger.verion&gt;2.12&lt;&#x2F;dagger.verion&gt;</span><br></pre></td></tr></table></figure><p>在dependencies下新增</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.dagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dagger<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dagger.verion&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>build.plugins</code>下新增<code>plugin</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.dagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dagger-compiler<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dagger.verion&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在IDEA设置中，找到<code>Build&gt;Compiler&gt;Annotation Processors</code>, 选择<code>Enable annotation processing</code>.</p><h2 id="创建一个Component"><a href="#创建一个Component" class="headerlink" title="创建一个Component"></a>创建一个Component</h2><p>下面创建Component，用来包容Resource类，对外提供Resource类。新建<code>com.test.domain.ioc.component.GithubComponent</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.domain.ioc.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.test.domain.ioc.<span class="keyword">module</span>.ServiceModule;</span><br><span class="line"><span class="keyword">import</span> com.test.domain.resource.GithubResource;</span><br><span class="line"><span class="keyword">import</span> dagger.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.inject.Singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Ryan Miao on 10/26/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="meta">@Component(modules = &#123;ServiceModule.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GithubComponent</span> </span>&#123;</span><br><span class="line">     <span class="function">GithubResource <span class="title">gitHubResource</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>显然，这个<code>GithubResource</code>需要注入一个service，于是声明一个<code>ServiceModule</code>, 创建<code>com.test.domain.ioc.module.ServiceModule</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.domain.ioc.<span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.test.domain.service.IGithubService;</span><br><span class="line"><span class="keyword">import</span> com.test.domain.service.impl.GithubService;</span><br><span class="line"><span class="keyword">import</span> dagger.Module;</span><br><span class="line"><span class="keyword">import</span> dagger.Provides;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.inject.Singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Ryan Miao on 10/26/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Module(includes = ConnectorModule.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IGithubService <span class="title">githubService</span><span class="params">(GithubService service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> service;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>ServiceModule</code>用来提供service注入，service接着依赖connector层，新建<code>com.test.domain.ioc.module.ConnectorModule</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.domain.ioc.<span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.test.domain.connect.FeignClientBuilder;</span><br><span class="line"><span class="keyword">import</span> dagger.Module;</span><br><span class="line"><span class="keyword">import</span> dagger.Provides;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.inject.Singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Ryan Miao on 10/26/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Module(includes = ConfigurationModule.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectorModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FeignClientBuilder <span class="title">feignClientBuilder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FeignClientBuilder();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>connecttor</code>层中，需要调用GlobalConfiguration的配置项，所以，单独把配置提出来，引入。新增<code>com.test.domain.ioc.module.ConfigurationModule</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.domain.ioc.<span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.test.configuration.HelloWorldConfiguration;</span><br><span class="line"><span class="keyword">import</span> dagger.Module;</span><br><span class="line"><span class="keyword">import</span> dagger.Provides;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.inject.Singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Ryan Miao on 11/20/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigurationModule</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HelloWorldConfiguration configuration;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConfigurationModule</span><span class="params">(HelloWorldConfiguration configuration)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.configuration = configuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloWorldConfiguration <span class="title">helloWorldConfiguration</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configuration;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是依赖的最底层，我们通过手动构造函数的方式注入configuration，这样可以在dropwizard启动时生成module，并且得到configuration。</p><h2 id="引入我们的Component"><a href="#引入我们的Component" class="headerlink" title="引入我们的Component"></a>引入我们的Component</h2><p>这时候，build一下，dagger就会自动生成我们的工厂。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install</span><br></pre></td></tr></table></figure><p>然后，在IDEA里的maven plugin里，右键，reimport。防止IDEA不认识dagger自动生成的类。dagger自动生成的类位于<code>target/generated-sources/annotations</code>. 点击刷新按钮，刷新下maven依赖。</p><p>然后，在<code>com.test.HelloWorldApplication</code>中,新增</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerResources</span><span class="params">(HelloWorldConfiguration configuration, Environment environment)</span> </span>&#123;</span><br><span class="line">    GithubComponent component = DaggerGithubComponent.builder()</span><br><span class="line">            .configurationModule(<span class="keyword">new</span> ConfigurationModule(configuration))</span><br><span class="line">            .build();</span><br><span class="line">    environment.jersey().register(component.gitHubResource());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>DaggerGithubComponent</code>要在maven install之后，dagger生成的。完整启动类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldApplication</span> <span class="keyword">extends</span> <span class="title">Application</span>&lt;<span class="title">HelloWorldConfiguration</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> HelloWorldApplication().run(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello-world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Bootstrap&lt;HelloWorldConfiguration&gt; bootstrap)</span> </span>&#123;</span><br><span class="line">        bootstrap.addBundle(<span class="keyword">new</span> ConnectivityBundle());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(HelloWorldConfiguration configuration, Environment environment)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> HelloWorldResource resource = <span class="keyword">new</span> HelloWorldResource(</span><br><span class="line">                configuration.getTemplate(),</span><br><span class="line">                configuration.getDefaultName()</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">final</span> TemplateHealthCheck healthCheck =</span><br><span class="line">                <span class="keyword">new</span> TemplateHealthCheck(configuration.getTemplate());</span><br><span class="line">        environment.healthChecks().register(<span class="string">&quot;template&quot;</span>, healthCheck);</span><br><span class="line">        environment.jersey().register(resource);</span><br><span class="line">        environment.jersey().register(healthCheck);</span><br><span class="line"></span><br><span class="line">        registerResources(configuration, environment);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerResources</span><span class="params">(HelloWorldConfiguration configuration, Environment environment)</span> </span>&#123;</span><br><span class="line">        GithubComponent component = DaggerGithubComponent.builder()</span><br><span class="line">                .configurationModule(<span class="keyword">new</span> ConfigurationModule(configuration))</span><br><span class="line">                .build();</span><br><span class="line">        environment.jersey().register(component.gitHubResource());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，我们的Resource也要改成Inject模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GithubResource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IGithubService service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GithubResource</span><span class="params">(IGithubService service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET</span></span><br><span class="line">    <span class="meta">@Timed</span></span><br><span class="line">    <span class="meta">@Path(&quot;/users/&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GithubUser <span class="title">getUserProfile</span><span class="params">(<span class="meta">@PathParam(&quot;username&quot;)</span> <span class="keyword">final</span> String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> service.getUserProfile(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动，运行。一切OK。以后就可以在需要注入的类的构造器上声明<code>@Inject</code>, 或者在module里<code>@Provide</code>，就可以实现构造解耦。测试不要太方便.</p>]]></content>
      
      
      <categories>
          
          <category> Dropwiard </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dropwizard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Dropwizard(2)-配置分类ConfiguredBundle</title>
      <link href="2017/11/20/dropwizard-configuration-bundle/"/>
      <url>2017/11/20/dropwizard-configuration-bundle/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>不可避免的要用dropwizard作为service框架。持续学习。上次<a href="http://www.cnblogs.com/woshimrf/p/dropwizard-feign.html">在dropwizard中使用feign,使用hystrix</a>， 算是基本入门了。接下来就是基于此的优化。</p><a id="more"></a><h1 id="把需要使用Configuration的逻辑从Application里分离出来"><a href="#把需要使用Configuration的逻辑从Application里分离出来" class="headerlink" title="把需要使用Configuration的逻辑从Application里分离出来"></a>把需要使用Configuration的逻辑从Application里分离出来</h1><p>在开始的demo中，由于不知道dropwizard怎么传播类，怎么注入, 把所有的初始化的东西都放到Application里去new出来。现在发现有办法可以分离部分配置逻辑。</p><p>现在把feign的基础配置抽离出来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectivityBundle</span> <span class="keyword">implements</span> <span class="title">ConfiguredBundle</span>&lt;<span class="title">HelloWorldConfiguration</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(HelloWorldConfiguration configuration, Environment environment)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//init hystrix config</span></span><br><span class="line">        Map&lt;String, Object&gt; hystrixConfig = configuration.getHystrixConfig();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> Map.Entry&lt;String, Object&gt; config : hystrixConfig.entrySet()) &#123;</span><br><span class="line">            ConfigurationManager.getConfigInstance().setProperty(config.getKey(), config.getValue());</span><br><span class="line">            System.out.println(config.getKey());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Bootstrap&lt;?&gt; bootstrap)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，在Application中添加就好了。<br>com.test.HelloWorldApplication</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Bootstrap&lt;HelloWorldConfiguration&gt; bootstrap)</span> </span>&#123;</span><br><span class="line">    bootstrap.addBundle(<span class="keyword">new</span> ConnectivityBundle());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dropwiard </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dropwizard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用visual studio code debug node js</title>
      <link href="2017/11/12/how-to-debug-nodejs-with-visualstudio-code/"/>
      <url>2017/11/12/how-to-debug-nodejs-with-visualstudio-code/</url>
      
        <content type="html"><![CDATA[<p><img src="https://code.visualstudio.com/assets/docs/editor/debugging/debugging_hero.png"></p><p>使用Visual Studio Code编写NodeJS, 首先要掌握如何debug。在visual studio code 里，只要按<code>F5</code>就可以了。更多详情，参考 <a href="https://code.visualstudio.com/docs/editor/debugging">https://code.visualstudio.com/docs/editor/debugging</a> 。</p>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Web基础入门</title>
      <link href="2017/11/12/Hello-Java-Web/"/>
      <url>2017/11/12/Hello-Java-Web/</url>
      
        <content type="html"><![CDATA[<img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1510489587800&di=367ad9e5c4515afa93b501d8db399296&imgtype=0&src=http%3A%2F%2Fa2.att.hudong.com%2F43%2F87%2F20300543669437145007874802107.jpg" alt="i18n" style="width: 400px;"/><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>语言都是相通的，只要搞清楚概念后就可以编写代码了。而概念是需要学习成本的。</p><a id="more"></a><h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><p>不用看《编程思想》,基础语法看 <a href="http://www.runoob.com/java/java-basic-syntax.html">http://www.runoob.com/java/java-basic-syntax.html</a> 就可以了，入门后想干啥干啥，如果感兴趣，如果有时间。</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><p>这里讲的web是指提供API(Application Programming Interface)的能力。那么什么是API? </p><p>API是指server端和client端进行资源交互的通道。Client可以通过API来获取和修改server端的资源(Resource). 实际上，API差不多就是URL的代称，现阶段，推荐采用RESTfull API.</p><h2 id="RESTfull-API"><a href="#RESTfull-API" class="headerlink" title="RESTfull API"></a>RESTfull API</h2><p>API表现方式就是URL(Uniform Resoure Locator)。RESTfull API是一个概念，规定了应该以什么样的结构去构建API，即应该如何拼接URL。先来看看URL是什么样子的。</p><p><img src="https://raw.githubusercontent.com/Ryan-Miao/MyDraw/master/API/url.png"></p><p><strong>资源（Resources）</strong><br>path中的<code>groups</code>和<code>users</code>都是资源的名称，通过参数来确定资源的位置。</p><p><strong>行为/操作(Method)</strong><br>我们通过约定的<code>Http Method</code>来表示对Resource的操作。</p><p>常用的HTTP动词有下面五个（括号里是对应的SQL命令）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET（SELECT）：从服务器取出资源（一项或多项）。</span><br><span class="line">POST（CREATE）：在服务器新建一个资源。</span><br><span class="line">PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</span><br><span class="line">PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</span><br><span class="line">DELETE（DELETE）：从服务器删除资源。</span><br></pre></td></tr></table></figure><p>还有两个不常用的HTTP动词。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HEAD：获取资源的元数据。</span><br><span class="line">OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。</span><br></pre></td></tr></table></figure><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;zoos：列出所有动物园</span><br><span class="line">POST &#x2F;zoos：新建一个动物园</span><br><span class="line">GET &#x2F;zoos&#x2F;ID：获取某个指定动物园的信息</span><br><span class="line">PUT &#x2F;zoos&#x2F;ID：更新某个指定动物园的信息（提供该动物园的全部信息）</span><br><span class="line">PATCH &#x2F;zoos&#x2F;ID：更新某个指定动物园的信息（提供该动物园的部分信息）</span><br><span class="line">DELETE &#x2F;zoos&#x2F;ID：删除某个动物园</span><br><span class="line">GET &#x2F;zoos&#x2F;ID&#x2F;animals：列出某个指定动物园的所有动物</span><br><span class="line">DELETE &#x2F;zoos&#x2F;ID&#x2F;animals&#x2F;ID：删除某个指定动物园的指定动物</span><br></pre></td></tr></table></figure><p>当path的组成仍旧无法准确定位资源的时候，可以通过queryParam来进一步缩小范围。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?limit&#x3D;10：指定返回记录的数量</span><br><span class="line">?offset&#x3D;10：指定返回记录的开始位置。</span><br><span class="line">?page&#x3D;2&amp;per_page&#x3D;100：指定第几页，以及每页的记录数。</span><br><span class="line">?sortby&#x3D;name&amp;order&#x3D;asc：指定返回结果按照哪个属性排序，以及排序顺序。</span><br><span class="line">?animal_type_id&#x3D;1：指定筛选条件</span><br></pre></td></tr></table></figure><p>更多关于构建RESTfull API的信息，参阅<a href="https://codeplanet.io/principles-good-restful-api-design/">https://codeplanet.io/principles-good-restful-api-design/</a></p><h2 id="ContentType"><a href="#ContentType" class="headerlink" title="ContentType"></a>ContentType</h2><p>现在的接口都是基于JSON传输的，什么是JSON(JavaScript Object Notation)?</p><p>一个基于JSON的API的response应该包含以下header</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Type:application&#x2F;json; charset&#x3D;utf-8</span><br></pre></td></tr></table></figure><h2 id="NodeJS-Web"><a href="#NodeJS-Web" class="headerlink" title="NodeJS Web"></a>NodeJS Web</h2><p>安装<a href="http://www.cnblogs.com/woshimrf/p/nodejs-enrionment-install.html">NodeJS</a></p><p>然后，创建app.js, <code>npm install express --save</code>, <code>node app.js</code>， 访问<code>localhost:3000/</code>，<code>localhost:3000/json</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这句的意思就是引入 `express` 模块，并将它赋予 `express` 这个变量等待使用。</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 调用 express 实例，它是一个函数，不带参数调用时，会返回一个 express 实例，将这个变量赋予 app 变量。</span></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// app 本身有很多方法，其中包括最常用的 get、post、put/patch、delete，在这里我们调用其中的 get 方法，为我们的 `/` 路径指定一个 handler 函数。</span></span><br><span class="line"><span class="comment">// 这个 handler 函数会接收 req 和 res 两个对象，他们分别是请求的 request 和 response。</span></span><br><span class="line"><span class="comment">// request 中包含了浏览器传来的各种信息，比如 query 啊，body 啊，headers 啊之类的，都可以通过 req 对象访问到。</span></span><br><span class="line"><span class="comment">// res 对象，我们一般不从里面取信息，而是通过它来定制我们向浏览器输出的信息，比如 header 信息，比如想要向浏览器输出的内容。这里我们调用了它的 #send 方法，向浏览器输出一个字符串。</span></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/json&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> rs = &#123;&#125;;</span><br><span class="line">  rs.id=<span class="number">1</span>;</span><br><span class="line">  rs.name = <span class="string">&quot;Ryan&quot;</span>;</span><br><span class="line">  </span><br><span class="line">  res.send(rs);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义好我们 app 的行为之后，让它监听本地的 3000 端口。这里的第二个函数是个回调函数，会在 listen 动作成功后执行，我们这里执行了一个命令行输出操作，告诉我们监听动作已完成。</span></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;app is listening at port 3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Java-Web"><a href="#Java-Web" class="headerlink" title="Java Web"></a>Java Web</h2><p>Java Web的开源框架中，目前最常用的是SpringBoot. SpringBoot可以提供API，可以渲染页面，是作为API Server的最佳选择。</p><p>写了无数遍hello world, 这次还是要从hello world开始。</p><h2 id="demo-source"><a href="#demo-source" class="headerlink" title="demo source"></a>demo source</h2><p><a href="https://github.com/Ryan-Miao/springboot-demo-gradle">https://github.com/Ryan-Miao/springboot-demo-gradle</a></p><p>Java Web的包管理工具有maven，gradle。这里将使用gradle作为依赖管理工具。</p><h2 id="Gradle是什么"><a href="#Gradle是什么" class="headerlink" title="Gradle是什么"></a>Gradle是什么</h2><p><a href="https://gradle.org/">gradle</a>是继maven之后，Java项目构建工具的集大成者。它管理依赖，为什么要管理依赖？我们的项目中将会使用很多其他的lib，这些lib有我们自己的，也有开源的，甚至大部分都是开源的。当引入这些lib的时候，引入哪个版本？去哪里下载？多个版本产生了冲突怎么办？以及最后我们项目开发完成后，怎么打包？甚至，想使用CI/CD自动化构建工具，如何集成？这就是gradle可以做的事情。</p><p>gradle要怎么学？</p><p>一般来说不用学，不用理会内置的逻辑，只需要用就好。就好比IDE，你不会深究IDE是c编写的还是Java编写的，但会使用IDE来编写代码。同样，gradle的用法很简单，可以满足我们开发中觉得部分需求。当然，当需要自定义功能的时候，可以使用<code>groovy</code>来编写gradle脚本。</p><h2 id="IntelIj-IDEA"><a href="#IntelIj-IDEA" class="headerlink" title="IntelIj IDEA"></a>IntelIj IDEA</h2><p>IDEA是目前构建Java Web项目最火IDE。用法和Eclipse还是有不少的区别，刚转过来的时候可能有点不习惯。但根据2-8原则，我们只需要掌握其中一部分用法就可以开发了，剩下的高级用法可以在开发中慢慢摸索。即，其实用法也很简单。</p><h2 id="新建一个gradle项目"><a href="#新建一个gradle项目" class="headerlink" title="新建一个gradle项目"></a>新建一个gradle项目</h2><p>点击<code>File</code>-&gt;<code>New</code>-&gt;<code>project</code>-&gt;<code>gradle</code>-&gt;勾选<code>Java</code><br><img src="https://github.com/Ryan-Miao/springboot-demo-gradle/blob/master/doc/new.png?raw=true"></p><p>如果发现没有JDK，那么new一个就好。</p><p>下一步，设置项目标签，group通常是公司名称倒写，比如<code>com.google</code>，<code>com.alibaba</code>等. ArtifactId就是我们的项目名称，比如这次demo为<code>springboot-demo</code><br><img src="https://github.com/Ryan-Miao/springboot-demo-gradle/blob/master/doc/group.png?raw=true"></p><p>然后一路next，完成后确定。IDEA会下载gradle，下载简单的依赖，完毕后，项目根目录下多出几个文件，目前不用care。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── build.gradle</span><br><span class="line">├── gradle</span><br><span class="line">│   └── wrapper</span><br><span class="line">│       ├── gradle-wrapper.jar</span><br><span class="line">│       └── gradle-wrapper.properties</span><br><span class="line">├── gradlew</span><br><span class="line">├── gradlew.bat</span><br><span class="line">├── settings.gradle</span><br><span class="line">└── src</span><br><span class="line">    ├── main</span><br><span class="line">    │   ├── java</span><br><span class="line">    │   └── resources</span><br><span class="line">    └── test</span><br><span class="line">        ├── java</span><br><span class="line">        └── resources</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来修改<code>build.gradle</code>，这个文件是依赖管理的核心文件</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url <span class="string">&quot;http://maven.aliyun.com/nexus/content/groups/public/&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath(<span class="string">&quot;org.springframework.boot:spring-boot-gradle-plugin:1.5.8.RELEASE&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;java&#x27;</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;eclipse&#x27;</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;idea&#x27;</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;org.springframework.boot&#x27;</span></span><br><span class="line"></span><br><span class="line">jar &#123;</span><br><span class="line">    baseName = <span class="string">&#x27;springboot-demo&#x27;</span></span><br><span class="line">    version =  <span class="string">&#x27;0.1.0&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    maven &#123;</span><br><span class="line">        url <span class="string">&quot;http://maven.aliyun.com/nexus/content/groups/public/&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sourceCompatibility = <span class="number">1.8</span></span><br><span class="line">targetCompatibility = <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile(<span class="string">&quot;org.springframework.boot:spring-boot-starter-web&quot;</span>)</span><br><span class="line">    testCompile(<span class="string">&#x27;org.springframework.boot:spring-boot-starter-test&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>maven是一个仓库，一些开源的第三方库lib都从这里下载，这里引用了aliyun镜像，因为maven在国内访问比较慢，如果在国外可以移除这个节点</li><li><code>buildscript</code>里就这么写，不用关心为什么，只需要知道这里这样写就可以引入springboot的版本</li><li><code>dependencies</code>是唯一会改变和增加内容的地方，当需要第三方库的时候添加，添加规则就是<code>groupId:artifactId:version</code>, 正好和我们创建项目的时候声明的标签一样</li></ul><p>修改<code>build.gradle</code>之后就要重新build，在IDEA中，点击右侧的工具栏，gradle，点击刷新按钮。就会自动下依赖，如果没有下载，点击gradle下Task里的<code>build</code>按钮。</p><p>另一个方式就是命令行：</p><p>细心可以发现项目根目录下有<code>gradlew</code>和<code>gradlew.bat</code>这个文件，这是分别为linux和windows准备的启动工具，在Linux系统中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;gradlew build</span><br><span class="line">or</span><br><span class="line">sh gradlew build</span><br></pre></td></tr></table></figure><p>在windows中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradlew build</span><br></pre></td></tr></table></figure><p>编译完成后，在左侧的项目目录下的<code>External Libraties</code>下可以看到我们引入的第三方库。为什么这么多？因为依赖是树状的，或者说网状的。lib也有他自己的依赖，gradle会负责把我们引入的lib的依赖也给下载下来。在没有maven和gradle这种构建工具之前，项目开发都是自己下载jar，自己丢进去classpath里，很容遗漏，也很容易造成冲突。gralde会负责下载依赖，还会解决冲突，比如不同版本等问题。</p><h2 id="开始编写服务端配置"><a href="#开始编写服务端配置" class="headerlink" title="开始编写服务端配置"></a>开始编写服务端配置</h2><p>Springboot的一个优点是约定大于配置，意思是我们都约定好怎么配置，我帮你配置好了，你直接用就好。因此，springmvc时代的大部分配置都可以自动化完成。我们的启动类也只有一行.</p><p>可以看到，<code>src/main/java</code>这个目录变成蓝色，在IDEA里是指sourceSet，也就是源文件，我们的Java代码就是放在这文件下的，这也是约定好的。</p><p>在该目录下新建<code>com.test.demo.Application.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Ryan on 2017/11/13/0013.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，我们的服务端就配置完毕了。运行main方法即可启动。</p><h2 id="编写第一个API"><a href="#编写第一个API" class="headerlink" title="编写第一个API"></a>编写第一个API</h2><p>虽然服务端配置好了，但并没有API. 新建<code>com.test.demo.controller.HelloController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Ryan on 2017/11/14/0014.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;\&quot;hello\&quot;:\&quot;world\&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，再次运行main方法，启动完毕后，访问 <a href="http://localhost:8080/hello">http://localhost:8080/hello</a>, 第一个API开发完毕。</p><ul><li><code>@Controller</code>这个注解标注这个类是一个controller，用来接收请求和响应response</li><li><code>@GetMapping(&quot;/hello&quot;)</code>标注这个方法是一个路由请求实现，括号里就是我们的路由</li><li><code>@ResponseBody</code>这个注解标注这个API的返回值是json，其实就是再response的header里塞入了contentType, 当然，在这里还涉及到class转json的问题。那么，回到开始的问题，json是什么东西？</li></ul><p>JSON在Java里没有这个数据结构，其实就是一个String，遵从JSON规则的String，我们的方法在返回这段String的时候，加上header里的contentType，浏览器就会当做JSON读取。在Javascript去读Ajax的结果就变成了一个JSON对象了。其他的，比如Android，读取出来的还是一个字符串，需要手动反序列化成我们想要的类。</p><p>说到序列化，我们不可能每个返回结构都这样拼接字符串吧。所以，<code>ResponseBody</code>标注的请求还会使用一个jackson的适配器，这些都是springboot内置的。暂时也不需要研究实现原理。jackson是什么鬼？</p><p>jackson是Java中使用最广泛的一个json解析lib，他可以将一个Java 类转变成一个json字符串，也同样可以把一个json字符串反序列化成一个java对象。Springboot是如何做到的？这就需要去研究源码了。</p><h2 id="启动和调试"><a href="#启动和调试" class="headerlink" title="启动和调试"></a>启动和调试</h2><p>最简单的是启动就是运行main方法，还可以命令行启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradlew bootRun</span><br></pre></td></tr></table></figure><p>debug，最简单的就是以debug启动main方法。当然也可以远程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradlew bootRun --debug-jvm</span><br></pre></td></tr></table></figure><p><img src="https://github.com/Ryan-Miao/springboot-demo-gradle/blob/master/doc/commandline-debug.png?raw=true"></p><p>然后，在IDEA中，点击Edit configurations<br><img src="https://github.com/Ryan-Miao/springboot-demo-gradle/blob/master/doc/edit-configurations.png?raw=true"></p><p>选择remote<br><img src="https://github.com/Ryan-Miao/springboot-demo-gradle/blob/master/doc/remote.png?raw=true"><br><img src="https://github.com/Ryan-Miao/springboot-demo-gradle/blob/master/doc/debug.png?raw=true"></p><p>然后，点击debug<br><img src="https://github.com/Ryan-Miao/springboot-demo-gradle/blob/master/doc/debug-start.png?raw=true"></p><p>如果想支持热加载，则需要添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile(&quot;org.springframework.boot:spring-boot-devtools&quot;)</span><br></pre></td></tr></table></figure><p>在IDEA里修改Java class后需要，重新build当前class才能生效。快捷键 <code>ctrl+shif+F9</code></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>spring boot默认配置了很多东西，但有时候我们想要修改默认值，比如不想用8080作为端口，因为端口被占用了。</p><p>在<code>resources</code>下，新建<code>application.properties</code>, 然后在里面输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port&#x3D;8081</span><br></pre></td></tr></table></figure><p>然后，重启项目，发现端口已经生效。</p><p>再配置一些common的自定义，比如日志。项目肯定要记录日志的，<code>System.out.println</code>远远达不到日志的要求。springboot默认采用<code>Logback</code>作为日志处理工具。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.output.ansi.enabled&#x3D;ALWAYS</span><br><span class="line">logging.file&#x3D;logs&#x2F;demo.log</span><br><span class="line">logging.level.root&#x3D;INFO</span><br></pre></td></tr></table></figure><p>接着，开发和生产环境的配置必然不同的，比如数据库的地址不同，那么可以分配置文件来区分环境。</p><p>在resources下新建<code>application-dev.properties</code>, <code>application-prod.properties</code>. spring默认通过后缀不同来识别不同的环境，不加后缀的是base配置。那么如何生效呢？</p><p>只要在base的配置文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.profiles.active&#x3D;dev</span><br></pre></td></tr></table></figure><p>比如，我们在dev环境中设置loglevel为debug</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logging.level.root&#x3D;debug</span><br></pre></td></tr></table></figure><p>这样，springboot会优先读取base文件，然后读取dev，当dev有相同的配置项时，dev会覆盖base。</p><p>这样，本地开发和生产环境隔离，部署也方便。事实上，springboot接收参数的优先级为<code>resources下的配置文件</code>&lt;<code>命令行参数</code>. 通常，我们部署项目的脚本会使用命令行参数来覆盖配置文件，这样就可以动态指定配置文件了。</p><h2 id="接收参数，响应JSON"><a href="#接收参数，响应JSON" class="headerlink" title="接收参数，响应JSON"></a>接收参数，响应JSON</h2><p>新建一个controller, com.test.demo.controller.ParamController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Ryan on 2017/11/16/0016.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ParamController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hotels/&#123;htid&#125;/rooms&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Long&gt; <span class="title">getRooms</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@PathVariable</span> String htid,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@RequestParam</span> String langId,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@RequestParam(value = &quot;limit&quot;, required = false, defaultValue = &quot;10&quot;)</span> <span class="keyword">int</span> limit,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@RequestParam(value = &quot;offset&quot;, required = false, defaultValue = &quot;1&quot;)</span> <span class="keyword">int</span> offset</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        params.put(<span class="string">&quot;hotelId&quot;</span>, htid);</span><br><span class="line">        params.put(<span class="string">&quot;langId&quot;</span>, langId);</span><br><span class="line">        params.put(<span class="string">&quot;limit&quot;</span>, limit);</span><br><span class="line">        params.put(<span class="string">&quot;offset&quot;</span>, offset);</span><br><span class="line"></span><br><span class="line">        LOGGER.info(<span class="string">&quot;The params is &#123;&#125;&quot;</span>, params);</span><br><span class="line"></span><br><span class="line">        List&lt;Long&gt; roomIds = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        roomIds.add(<span class="number">1L</span>);</span><br><span class="line">        roomIds.add(<span class="number">2L</span>);</span><br><span class="line">        roomIds.add(<span class="number">3L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> roomIds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>LOG: 采用Sl4J接口</li><li>参数： <code>@PathVariable</code> 可以接收url路径中的参数</li><li>参数： <code>@RequestParam</code> 可以接收<code>?</code>后的query参数</li><li>响应： <code>@RestController</code> == <code>@Controller+@ResponseBody</code>, 其实，<code>@ResponseBody</code>注解表明这个方法会返回json，会将Java类转换成JSON字符串，默认转换器为Jackason</li></ol><h3 id="参数为JSON"><a href="#参数为JSON" class="headerlink" title="参数为JSON"></a>参数为JSON</h3><p>新建class com.test.demo.entity.Room</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public class Room &#123;</span><br><span class="line">    private Integer roomId;</span><br><span class="line">    private String roomName;</span><br><span class="line">    private String comment;</span><br><span class="line"></span><br><span class="line">    public Integer getRoomId() &#123;</span><br><span class="line">        return roomId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setRoomId(Integer roomId) &#123;</span><br><span class="line">        this.roomId &#x3D; roomId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getRoomName() &#123;</span><br><span class="line">        return roomName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setRoomName(String roomName) &#123;</span><br><span class="line">        this.roomName &#x3D; roomName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getComment() &#123;</span><br><span class="line">        return comment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setComment(String comment) &#123;</span><br><span class="line">        this.comment &#x3D; comment;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设，我们需要保存一个Room信息，先来get一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/hotels/&#123;htid&#125;/rooms/&#123;roomId&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Room <span class="title">getRoomById</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@PathVariable</span> String htid,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@PathVariable</span> Integer roomId</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (htid.equals(<span class="string">&quot;6606&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">final</span> Room room = <span class="keyword">new</span> Room();</span><br><span class="line">        room.setComment(<span class="string">&quot;None&quot;</span>);</span><br><span class="line">        room.setRoomId(roomId);</span><br><span class="line">        room.setRoomName(<span class="string">&quot;豪华双人间&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> room;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后保存一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/hotels/&#123;htid&#125;/rooms&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">addRoom</span><span class="params">(<span class="meta">@RequestBody</span> Room room)</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> id = random.nextInt(<span class="number">10</span>);</span><br><span class="line">    room.setRoomId(id);</span><br><span class="line"></span><br><span class="line">    LOGGER.info(<span class="string">&quot;Add a room: &#123;&#125;&quot;</span>, room);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/Ryan-Miao/springboot-demo-gradle/blob/master/doc/save-room.png?raw=true"></p><h3 id="接收数组参数"><a href="#接收数组参数" class="headerlink" title="接收数组参数"></a>接收数组参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/hotels/&#123;htid&#125;/rooms/ids&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRoomsWithIds</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Integer&gt; ids)</span></span>&#123;</span><br><span class="line">    String s = ids.toString();</span><br><span class="line">    LOGGER.info(s);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器访问 <a href="http://localhost:8081/param//hotels/6606/rooms/ids?ids=1,2,3">http://localhost:8081/param//hotels/6606/rooms/ids?ids=1,2,3</a></p><h2 id="参数校验"><a href="#参数校验" class="headerlink" title="参数校验"></a>参数校验</h2><p>我们除了一个个的if去判断参数，还可以使用注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Room</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer roomId;</span><br><span class="line">    <span class="meta">@NotEmpty</span></span><br><span class="line">    <span class="meta">@Size(min = 3, max = 20, message = &quot;The size of room name should between 3 and 20&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String roomName;</span><br></pre></td></tr></table></figure><p>只要在参数前添加<code>javax.validation.Valid</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/hotels/&#123;htid&#125;/rooms&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">addRoom</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="meta">@Valid</span> <span class="meta">@RequestBody</span> Room room,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@RequestHeader(name = &quot;transactionId&quot;)</span> String transactionId</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>&#123;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/Ryan-Miao/springboot-demo-gradle/blob/master/doc/valid.png?raw=true"></p><h2 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h2><p>在springboot中，static content默认寻找规则是   </p><blockquote><p>By default Spring Boot will serve static content from a directory called <code>/static</code> (or <code>/public</code> or <code>/resources</code> or <code>/META-INF/resources</code>) in the classpath or from the root of the ServletContext.</p></blockquote><p>在<code>resources</code>下新建文件夹 <code>static</code>,<br>src\main\resources\static\content.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello static content<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/test.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Static Content<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Static content is the files that render directly, the file is the whole content. The different between template is that</span><br><span class="line">the template page will be resolved by server and then render out.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器访问： <a href="http://localhost:8081/content.html">http://localhost:8081/content.html</a></p><p>同理，放在static下的文件都可以通过如此映射访问。</p><h2 id="模板文件"><a href="#模板文件" class="headerlink" title="模板文件"></a>模板文件</h2><p>模板文件是指通过服务端生成的文件。比如Jsp，会经过servlet编译后，最终生成一个html页面。Springboot默认支持以下几种模板：</p><blockquote><p>FreeMarker<br>Groovy<br>Thymeleaf<br>Mustache</p></blockquote><p>JSP在jar文件中的表现有问题，除非部署为war。</p><p>官方推荐的模板为<code>Thymeleaf</code>， 在depenency中添加依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile(&quot;org.springframework.boot:spring-boot-starter-thymeleaf&quot;)</span><br></pre></td></tr></table></figure><p>rebuild.</p><p>SpringBoot默认模板文件读取位置为：<code>src\main\resources\templates</code>. 新建 <code>src\main\resources\templates\home.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Template content<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125; + &#x27; The current user is:&#x27; + $&#123;user.name&#125;&quot;</span>&gt;</span>Welcome!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>模板文件只能通过服务端路由渲染，也就是说不能像刚开始静态文件那样直接路由过去。</p><p>创建一个controller， <code>com.test.demo.controller.HomeController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Ryan on 2017/11/18/0018.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/home&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(Model model, String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Map&lt;String, Object&gt; user = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        user.put(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;home&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个和之前的API的接口有一点不同，首先是没有<code>@ResponseBody</code>注解，然后是方法的返回值是一个String，这个String不是value，而是指模板文件的位置，相对于<code>templates</code>的位置。</p><p>浏览器访问：<a href="http://localhost:8081/home?name=Ryan123">http://localhost:8081/home?name=Ryan123</a></p><p>方法参数的<code>Model</code>是模板文件的变量来源，模板文件从这个对象里读取变量，将这个类放到参数里，Spring会自动注入这个类，绑定到模板文件。这里，放入两个变量。</p><p>在模板端，就可以读取这个变量了。</p><p>为什么要这么做？既然有了静态文件，为什么还要模板文件？</p><p>首先，这是早期web开发的做法，之前是没有web 前端这个兵种的，页面从静态页面变成动态页面，代表就是jsp，php等。模板文件的有个好处是，服务端可以控制页面，比如从session中拿到用户信息，放入页面。这个在静态页面是做不到的。</p><p>然而，现在前后端的分离实践，使得模板文件的作用越来越小。目前主要用于基础数据传递，其他数据则通过客户端的异步请求获得。</p><p>当然，随着页面构建复杂，异步请求太多，首屏渲染时间越来越长，严重影响了用户体验，比如淘宝双11的宣传页。这时候，服务端渲染的优势又体现出来了，静态页面直接出数据，不需要多次的ajax请求。</p><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><blockquote><p>Cross-origin resource sharing (CORS) is a W3C specification implemented by most browsers that allows you to specify in a flexible way what kind of cross domain requests are authorized, instead of using some less secure and less powerful approaches like IFRAME or JSONP.</p></blockquote><p>CORS是浏览器的一种安全保护，隔离不同域名之间的可见度。比如，不允许把本域名下cookie发送给另一个域名，否则cookie被钓鱼后，黑客就可以模拟本人登陆了。更多细节参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">MDN</a></p><p>为什么浏览器要拒绝cors?<br>摘自<a href="">博客园</a></p><p><img src="http://pic002.cnblogs.com/img/hyddd/200904/2009040916453171.jpg"></p><p>cors执行过程摘自<a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing">自由的维基百科</a><br><img src="https://upload.wikimedia.org/wikipedia/commons/c/ca/Flowchart_showing_Simple_and_Preflight_XHR.svg"></p><p>首先，本地模拟跨域请求。</p><p>我们当前demo的域名为<code>localhost:8081</code>，现在新增一个本地域名, 在HOSTS文件中新增：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1   corshost</span><br></pre></td></tr></table></figure><p>然后，访问<a href="http://corshost:8081，即本demo。">http://corshost:8081，即本demo。</a></p><p>新增src\main\resources\static\cors.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test Cors<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn.staticfile.org/jquery/3.2.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $.ajax(&#123; <span class="attr">url</span>: <span class="string">&quot;http://localhost:8081/hello&quot;</span>, <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(data);</span></span><br><span class="line">    &#125;&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问之前创建的hello接口，可以看到访问失败，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to load http:&#x2F;&#x2F;localhost:8081&#x2F;hello: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource. Origin &#39;http:&#x2F;&#x2F;corshost:8081&#39; is therefore not allowed access.</span><br></pre></td></tr></table></figure><p>这是浏览器正常的行为。</p><p>但，由于前后端分离，甚至分开部署，域名肯定不会是同一个了，那么就需要支持跨域。Springboot支持跨域，解决方案如下：</p><p>在需要跨域的method上，添加一个<code>@CrossOrigin</code>注解即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@CrossOrigin(origins &#x3D; &#123;&quot;http:&#x2F;&#x2F;corshost:8081&quot;&#125;)</span><br><span class="line">@ResponseBody</span><br><span class="line">@GetMapping(&quot;&#x2F;hello&quot;)</span><br><span class="line">public String hello()&#123;</span><br><span class="line">    return &quot;&#123;\&quot;hello\&quot;:\&quot;world\&quot;&#125;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是全局配置允许跨域，新建<code>com.test.demo.config.CorsConfiguration</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package com.test.demo.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by Ryan on 2017&#x2F;11&#x2F;18&#x2F;0018.</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Configuration</span><br><span class="line">public class CorsConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public WebMvcConfigurer corsConfigurer() &#123;</span><br><span class="line">        return new WebMvcConfigurerAdapter() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void addCorsMappings(CorsRegistry registry) &#123;</span><br><span class="line">                registry.addMapping(&quot;&#x2F;api&#x2F;**&quot;)</span><br><span class="line">                        .allowedOrigins(&quot;http:&#x2F;&#x2F;domain2.com&quot;)</span><br><span class="line">                        .allowedMethods(&quot;PUT&quot;, &quot;DELETE&quot;)</span><br><span class="line">                        .allowedHeaders(&quot;header1&quot;, &quot;header2&quot;, &quot;header3&quot;)</span><br><span class="line">                        .exposedHeaders(&quot;header1&quot;, &quot;header2&quot;)</span><br><span class="line">                        .allowCredentials(false).maxAge(3600);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>刚开始看Springboot的时候看到推荐使用<code>fat jar</code>部署，于是<a href="http://www.cnblogs.com/woshimrf/p/springboot-jar.html">记录</a>下来。后面看到公司的生产环境中既有使用war也有使用jar的，为了方便，非不得已，还是使用jar来部署。</p><p>首先，打包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradlew clean build</span><br></pre></td></tr></table></figure><p>然后，可以看到，在build/libs下有两个jar，<code>springboot-demo-0.1.0.jar.original</code>和<code>springboot-demo-0.1.0.jar</code>。后面这个就是springboot插件打包好的<code>fat jar</code>，前一个是gradle打包的源jar。接着就可以直接运行这个jar，prod也是如此。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar build&#x2F;libs&#x2F;springboot-demo-0.1.0.jar --spring.profiles.active&#x3D;prod</span><br></pre></td></tr></table></figure><p>后面通过参数来指定配置文件的环境，这种命令行参数的优先级要高于配置在base里的，所以会覆盖变量，因此，最终采用的就是prod这个环境配置。</p><h2 id="引入MySQL-MariaDB"><a href="#引入MySQL-MariaDB" class="headerlink" title="引入MySQL/MariaDB"></a>引入MySQL/MariaDB</h2><p>MySQL被Oracle收走之后，他的father另外创建了新的社区分支<a href="https://downloads.mariadb.org/mariadb/10.2.10/">MariaDB</a>, 据说用法和MySQL一致。然后，各大Linux开源系统都预置了MariaDB。 当然，由于新出没多久，市场还不够开阔。根据[DB-Engines Ranking]发布的<a href="https://db-engines.com/en/ranking">2017年11月份排行</a>， MySQL几乎完全接近Oracle，排名第二。而MariaDB的上升之路还比较遥远。So，还是入手MySQL靠谱。因为开源技术的掌握能力和跳槽能力成正相关。</p><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><p>MAC安装参考<a href="http://ryan-miao.github.io/2017/06/28/mac-install-mysql/">Mac install MySQL</a>。 </p><p>Windows安装  </p><p>去<a href="https://dev.mysql.com/downloads/mysql/">官网</a>下载安装包(mysql-5.7.20-winx64.zip). 当然，需要先注册oracle账号。</p><p>解压当目录，然后将bin目录加入环境变量，同Java设置环境变量。这里再次演示下。复制bin目录地址，我的为<code>D:\data\mysql\mysql-5.7.20-winx64\bin</code>, 在<code>此电脑</code>右键，–&gt; 属性 –&gt; 高级系统设置 –&gt; 高级 –&gt; 环境变量 –&gt; 在系统环境变量中找到path –&gt; 新建 –&gt; 填入 –&gt; 确认。</p><p>然后，重新打开cmd。输入<code>mysqld --initialize --console</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Ryan</span><br><span class="line">λ mysqld --initialize --console</span><br><span class="line">mysqld: Could not create or access the registry key needed for the MySQL application</span><br><span class="line">to log to the Windows EventLog. Run the application with sufficient</span><br><span class="line">privileges once to create the key, add the key manually, or turn off</span><br><span class="line">logging for that application.</span><br><span class="line">2017-11-26T05:22:48.434089Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).</span><br><span class="line">2017-11-26T05:22:48.437096Z 0 [ERROR] Cannot open Windows EventLog; check privileges, or start server with --log_syslog&#x3D;0</span><br><span class="line">2017-11-26T05:22:49.148986Z 0 [Warning] InnoDB: New log files created, LSN&#x3D;45790</span><br><span class="line">2017-11-26T05:22:49.276866Z 0 [Warning] InnoDB: Creating foreign key constraint system tables.</span><br><span class="line">2017-11-26T05:22:49.370828Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: d7e6ac05-d269-11e7-a91e-9883891ed8e3.</span><br><span class="line">2017-11-26T05:22:49.383970Z 0 [Warning] Gtid table is not ready to be used. Table &#39;mysql.gtid_executed&#39; cannot be opened.</span><br><span class="line">2017-11-26T05:22:49.398975Z 1 [Note] A temporary password is generated for root@localhost: &#x2F;r.Vtktfl9FN</span><br></pre></td></tr></table></figure><p>复制我们的临时密码<code>/r.Vtktfl9FN</code>.</p><p>命令行启动MySQL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --console</span><br></pre></td></tr></table></figure><p>新开一个cmd，命令行输入账号密码<code>mysql -u root -p</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Ryan</span><br><span class="line">λ mysql -u root -p</span><br><span class="line">Enter password: ************</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 3</span><br><span class="line">Server version: 5.7.20</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2017, Oracle and&#x2F;or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and&#x2F;or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>然后就连接到MySQL了。第一个命令行就是启动mysql，第二个命令行就是client，连接MySQL。现在修改我们的<code>root</code>密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set password&#x3D;password(&#39;123456&#39;);</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>然后，关闭client，输入<code>exit</code>退出。 重新以新密码123456登陆(不要自己难为自己，设置密码为123456是最佳选择).</p><p>确认成功就安装完毕。账号为<code>root</code>, 密码为<code>123456</code>。</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>关于MySQL的基本语法，学习<a href="http://www.runoob.com/mysql/mysql-tutorial.html">http://www.runoob.com/mysql/mysql-tutorial.html</a> 即可。</p><p>这里简单记录几个简单的概念。</p><h3 id="database"><a href="#database" class="headerlink" title="database"></a>database</h3><p>MySQL以不同的database为单位存储数据。所以，开发数据库的时候，先要创建一个database。    </p><p>查看已有的database</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>创建我们的database</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database if not exists springboot_demo charset utf8 collate utf8_general_ci;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure><p>进入database：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use springboot_demo</span><br><span class="line">Database changed</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>查看当前database的所有表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use springboot_demo</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure><p>创建一个表<code>room</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table if not exists room (</span><br><span class="line">    -&gt;   id INT(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">    -&gt;   &#96;name&#96; VARCHAR(80) NOT NULL,</span><br><span class="line">    -&gt;   &#96;comment&#96; VARCHAR(200),</span><br><span class="line">    -&gt;   create_date DATETIME,</span><br><span class="line">    -&gt;   update_date DATETIME,</span><br><span class="line">    -&gt;   PRIMARY KEY(id)</span><br><span class="line">    -&gt; )ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line">Query OK, 0 rows affected (0.08 sec)</span><br></pre></td></tr></table></figure><ol><li><code>create table </code> 创建表</li><li><code>if not exists</code> 如果不存在则创建</li><li><code>room</code> 表名</li><li><code>id</code> 表字段，字段名为<code>id</code>, <code>NOT NULL</code>表示会给这个字段建立非空索引，当存入空时会报错。如果不写明<code>NOT NULL</code>，则默认该字段可以为空。</li><li><code>AUTO_INCREMENT</code>表示这个字段会自动增加，即当保存一条记录的时候，如果不传入<code>id</code>这个字段，则该字段会从系统序列中取出一个。该序列是一个递增序列。即实现了每次id都增加1</li><li><code>反引号</code>包裹字段名是为了防止与关键字冲突</li><li><code>INT</code> 是指数字类型，括号里的<code>11</code>是指MySQL里的显示宽度，和最大值取值范围无关，是指需要多少位来表示这个数字，不够长度的补齐。int最大值为<code>2147483647</code></li><li><code>VARCHAR</code>是变长字符串，即当存储1个字符，则占用空间就是1个字节，当存储2个字符，则占用空间为2个字符。与之对应的是<code>char</code>定长。括号里的是指字符的个数，即最大允许200个字符。</li><li><code>DATA</code>是日期类型，通常每条记录都需要记录创建时间和更新时间</li><li><code>PRIMARY KEY</code>表示这个字段是<code>主键</code>，即该记录的唯一标识符。</li></ol><h3 id="插入一条记录"><a href="#插入一条记录" class="headerlink" title="插入一条记录"></a>插入一条记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into room(&#96;name&#96;, &#96;comment&#96;, &#96;create_date&#96;, &#96;update_date&#96;) values (&quot;大床房&quot;, &quot;&quot;, &quot;2017-11-26&quot;,&quot;2017-11-26</span><br><span class="line">11:00:00&quot;);</span><br><span class="line">Query OK, 1 row affected, 1 warning (0.01 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt;insert into room(&#96;name&#96;, &#96;comment&#96;, &#96;create_date&#96;, &#96;update_date&#96;) values (&quot;双人床房&quot;, &quot;有窗户&quot;, &quot;2017-11-26&quot;,&quot;201</span><br><span class="line">7-11-26 11:00:00&quot;);</span><br><span class="line">Query OK, 1 row affected, 1 warning (0.01 sec)</span><br></pre></td></tr></table></figure><h3 id="查看所有记录"><a href="#查看所有记录" class="headerlink" title="查看所有记录"></a>查看所有记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from room;</span><br><span class="line">+----+----------+---------+-------------+-------------+</span><br><span class="line">| id | name     | comment | create_date | update_date |</span><br><span class="line">+----+----------+---------+-------------+-------------+</span><br><span class="line">|  1 | 大床房   |         | 2017-11-26  | 2017-11-26  |</span><br><span class="line">|  2 | 双人床房 | 有窗户  | 2017-11-26  | 2017-11-26  |</span><br><span class="line">+----+----------+---------+-------------+-------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="更新一条记录"><a href="#更新一条记录" class="headerlink" title="更新一条记录"></a>更新一条记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update room set comment&#x3D;&quot;无窗&quot; where id&#x3D;1;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from room;</span><br><span class="line">+----+----------+---------+-------------+-------------+</span><br><span class="line">| id | name     | comment | create_date | update_date |</span><br><span class="line">+----+----------+---------+-------------+-------------+</span><br><span class="line">|  1 | 大床房   | 无窗    | 2017-11-26  | 2017-11-26  |</span><br><span class="line">|  2 | 双人床房 | 有窗户  | 2017-11-26  | 2017-11-26  |</span><br><span class="line">+----+----------+---------+-------------+-------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="删除一条记录"><a href="#删除一条记录" class="headerlink" title="删除一条记录"></a>删除一条记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; delete from room where id &#x3D; 2;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from room;</span><br><span class="line">+----+--------+---------+-------------+-------------+</span><br><span class="line">| id | name   | comment | create_date | update_date |</span><br><span class="line">+----+--------+---------+-------------+-------------+</span><br><span class="line">|  1 | 大床房 | 无窗    | 2017-11-26  | 2017-11-26  |</span><br><span class="line">+----+--------+---------+-------------+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="什么是数据操纵语句"><a href="#什么是数据操纵语句" class="headerlink" title="什么是数据操纵语句"></a>什么是数据操纵语句</h3><p>以下来自<a href="https://www.cnblogs.com/study-s/p/5287529.html">博客园</a>。     </p><p>SQL语言共分为四大类：数据查询语言DQL，数据操纵语言DML，数据定义语言DDL，数据控制语言DCL。</p><p><strong>1. 数据查询语言DQL</strong>        </p><p>数据查询语言DQL基本结构是由SELECT子句，FROM子句，WHERE<br>子句组成的查询块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT &lt;字段名表&gt;</span><br><span class="line">FROM &lt;表或视图名&gt;</span><br><span class="line">WHERE &lt;查询条件&gt;</span><br></pre></td></tr></table></figure><p><strong>2 .数据操纵语言DML</strong>    </p><p>数据操纵语言DML主要有三种形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1) 插入：INSERT</span><br><span class="line">2) 更新：UPDATE</span><br><span class="line">3) 删除：DELETE</span><br></pre></td></tr></table></figure><p><strong>3. 数据定义语言DDL</strong>    </p><p>数据定义语言DDL用来创建数据库中的各种对象—–表、视图、<br>索引、同义词、聚簇等如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE&#x2F;VIEW&#x2F;INDEX&#x2F;SYN&#x2F;CLUSTER</span><br><span class="line"></span><br><span class="line">        表 &#x2F;视图&#x2F; 索引&#x2F; 同义词&#x2F; 簇</span><br></pre></td></tr></table></figure><p>DDL操作是隐性提交的！不能rollback.</p><p><strong>4. 数据控制语言DCL</strong>  </p><p>数据控制语言DCL用来授予或回收访问数据库的某种特权，并控制<br>数据库操纵事务发生的时间及效果，对数据库实行监视等。如：</p><p><strong>1) GRANT</strong>：授权。</p><p>**2) ROLLBACK [WORK] TO [SAVEPOINT]**：回退到某一点。<br>回滚—ROLLBACK<br>回滚命令使数据库状态回到上次最后提交的状态。其格式为：<br>SQL&gt;ROLLBACK;</p><p>**3) COMMIT [WORK]**：提交。</p><p>在数据库的插入、删除和修改操作时，只有当事务在提交到数据<br>库时才算完成。在事务提交前，只有操作数据库的这个人才能有权看<br>到所做的事情，别人只有在最后提交完成后才可以看到。<br>提交数据有三种类型：显式提交、隐式提交及自动提交。下面分<br>别说明这三种类型。</p><p><strong>(1) 显式提交</strong><br>用COMMIT命令直接完成的提交为显式提交。其格式为：<br><code>SQL&gt;COMMIT</code>；</p><p><strong>(2) 隐式提交</strong><br>用SQL命令间接完成的提交为隐式提交。这些命令是：<br><code>ALTER</code>，<code>AUDIT</code>，<code>COMMENT</code>，<code>CONNECT</code>，<code>CREATE</code>，<code>DISCONNECT</code>，<code>DROP</code>，<br><code>EXIT</code>，<code>GRANT</code>，<code>NOAUDIT</code>，<code>QUIT</code>，<code>REVOKE</code>，<code>RENAME</code>。</p><p><strong>(3) 自动提交</strong><br>若把AUTOCOMMIT设置为ON，则在插入、修改、删除语句执行后，<br>系统将自动进行提交，这就是自动提交。其格式为：<br><code>SQL&gt;SET AUTOCOMMIT ON</code>；</p><p>到此，增删改查语句复习完毕。开始引入项目。</p><h2 id="项目连接MySQL"><a href="#项目连接MySQL" class="headerlink" title="项目连接MySQL"></a>项目连接MySQL</h2><p>保持MySQL打开状态。</p><p>引入mysql驱动和spring-jdbc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compile(&quot;org.springframework.boot:spring-boot-starter-jdbc&quot;)</span><br><span class="line">compile group: &#39;mysql&#39;, name: &#39;mysql-connector-java&#39;, version: &#39;6.0.6&#39;</span><br></pre></td></tr></table></figure><p>修改配置文件，新增：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;springboot_demo?serverTimezone&#x3D;UTC&amp;characterEncoding&#x3D;utf-8</span><br><span class="line">spring.datasource.username&#x3D;root</span><br><span class="line">spring.datasource.password&#x3D;123456</span><br><span class="line">spring.datasource.driver-class-name&#x3D;com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure><p>新建com.test.demo.config.DBConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate</span><span class="params">(<span class="meta">@Qualifier(&quot;dataSource&quot;)</span> DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>@Configuration</code> 标注这个类是一个配置类，spring会自动扫描这个注解，将里面的配置运行。</li><li><code>@Bean</code> 标注声明一个Bean，由spring管理，在需要的地方注入。</li><li><code>@Qualifier(&quot;dataSource&quot;)</code> @Bean的参数列表中对象会从spring容器中查找bean，找到后注入参数。而<code>Qualifier</code>则声明要注入的bean的name或者id是什么，这在spring容器包含2个以上同类型的bean的时候有用。</li><li><code>DataSource</code> 这个对象是springboot自动创建的，通过扫描配置类里的配置，当检测到有配置datasource的时候会创建这个bean。于是，在这里就可以注入了，即我们配置的那几个属性。</li><li><code>JdbcTemplate</code> 一个封装了对DB操作的library, 通过它来对数据库操作。</li></ol><p>下面写一个测试来测试是否联通了。在src/test/java下，新建com.test.demo.config.DBConfigurationTest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.test.demo.Application;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Import(&#123;Application.class, DBConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBConfigurationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelect</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; maps = jdbcTemplate.queryForList(<span class="string">&quot;select * from room&quot;</span>);</span><br><span class="line">        System.out.println(maps);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台打印出刚才的数据库中的数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;id&#x3D;1, name&#x3D;大床房, comment&#x3D;无窗, create_date&#x3D;2017-11-26, update_date&#x3D;2017-11-26&#125;]</span><br></pre></td></tr></table></figure><ol><li><code>@RunWith(SpringRunner.class)</code>运行spring容器的测试</li><li><code>@SpringBootTest</code> springboot测试</li><li><code>@Import(&#123;Application.class, DBConfiguration.class&#125;)</code> 导入我们需要的配置</li><li><code>@Autowired</code>自动注入属性，刚才在Configuration中声明了一个Bean，在这里通过这个注解获取那个bean</li><li><code>@Test</code> 这是一个JUnit测试</li></ol><h2 id="JDBCTemplate"><a href="#JDBCTemplate" class="headerlink" title="JDBCTemplate"></a>JDBCTemplate</h2><p><code>Spring-JDBC</code>提供了简化版的数据库连接操作。对于简单的连接数据库来说，spring-jdbc已经足够提供orm能力。当然，现在国内流行的orm还是Mybatis。不过，随着微服务拆分的盛行，jpa的优势更加明显。不管用什么框架，原理都是差不多的，就是封装复杂的映射逻辑，简化操作。</p><p><strong>什么是JDBC</strong>?<br>JDBC即Java DataBase Connectivity，Java数据库连接，JDK自带了JDBC。</p><p><strong>什么是Mybatis</strong>？<br>以下来自<a href="https://baike.baidu.com/item/MyBatis">百度百科</a></p><blockquote><p>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。</p></blockquote><p><strong>什么是JPA</strong>?<br>JPA是Java Persistence API的简称，中文名Java持久层API.</p><p><strong>什么是ORM</strong>?</p><blockquote><p>对象关系映射（英语：(Object Relational Mapping，简称ORM，或O/RM，或O/R mapping），是一种程序技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换[1]  。从效果上说，它其实是创建了一个可在编程语言里使用的–“虚拟对象数据库”。</p></blockquote><blockquote><p>面向对象是从软件工程基本原则（如耦合、聚合、封装）的基础上发展起来的，而关系数据库则是从数学理论发展而来的，两套理论存在显著的区别。为了解决这个不匹配的现象，对象关系映射技术应运而生。</p></blockquote><blockquote><p>对象关系映射（Object-Relational Mapping）提供了概念性的、易于理解的模型化数据的方法。ORM方法论基于三个核心原则： </p><ol><li>简单：以最基本的形式建模数据。 </li><li>传达性：数据库结构被任何人都能理解的语言文档化。 </li><li>精确性：基于数据模型创建正确标准化的结构。<br>典型地，建模者通过收集来自那些熟悉应用程序但不熟练的数据建模者的人的信息开发信息模型。建模者必须能够用非技术企业专家可以理解的术语在概念层次上与数据结构进行通讯。建模者也必须能以简单的单元分析信息，对样本数据进行处理。ORM专门被设计为改进这种联系。<br>简单的说：ORM相当于中继数据, 即通过操作对象来完成sql语句，自动提供了对象和sql的映射。</li></ol></blockquote><p>为什么明明标题是JDBCTemplate, 却说了一堆别的？实际生产中，对关系型数据库的操作多是用Mybatis或Hibernate这样的ORM框架。而ORM框架的根源还是jdbc，因此，学习jdbc是学习其他ORM框架的第一步。</p><p>为什么不直接讲jdk自带的jdbc？当Java基础掌握好之后，jdbc也就是多一个library，学习jdbc也就是学习这个lib的用法而已。那么，既然有简化的spring-jdbc，自然可以先跳过原生。</p><p>下面开始简单使用spring-jdbc。</p><hr><h3 id="插入一条数据"><a href="#插入一条数据" class="headerlink" title="插入一条数据"></a>插入一条数据</h3><p>在上一步的新建的<code>com.test.demo.config.DBConfigurationTest</code>中继续开发。添加一个新的测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> RoomTable room = <span class="keyword">new</span> RoomTable(<span class="string">&quot;Doule Bed&quot;</span>, <span class="string">&quot;no&quot;</span>, <span class="keyword">new</span> Date(), <span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String sql = <span class="string">&quot;INSERT INTO room(`name`, `comment`, `create_date`, `update_date`) VALUES (?,?,?,?)&quot;</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> rs = jdbcTemplate.update(sql,</span><br><span class="line">            room.getName(), room.getComment(), room.getCreateDate(), room.getUpdateDate());</span><br><span class="line">    System.out.println(rs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>@Transactional</code>是spring提供的事物注解，标注这个在测试类中的含义是：每次运行完该测试类后，回滚(rollback).</li><li><code>jdbcTemplate.update(sql, 参数)</code> 提供了占位符的数据操纵语句的执行。为什么要使用占位符(PreparedStatement)而不是直接拼接字符串？防止sql注入。   </li><li><code>RoomTable</code>是一个新建Entity，关于什么是Entity后面分层架构中将讲到。</li><li><code>rs</code>是执行sql结束后，数据返回的一个数字，含义成功了多少行。</li></ol><p>新建com.test.demo.domain.entity.RoomTable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.demo.domain.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Ryan Miao on 12/2/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoomTable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String comment;</span><br><span class="line">    <span class="keyword">private</span> Date createDate;</span><br><span class="line">    <span class="keyword">private</span> Date updateDate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoomTable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoomTable</span><span class="params">(String name, String comment, Date createDate, Date updateDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.comment = comment;</span><br><span class="line">        <span class="keyword">this</span>.createDate = createDate;</span><br><span class="line">        <span class="keyword">this</span>.updateDate = updateDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoomTable</span><span class="params">(Integer id, String name, String comment, Date createDate, Date updateDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.comment = comment;</span><br><span class="line">        <span class="keyword">this</span>.createDate = createDate;</span><br><span class="line">        <span class="keyword">this</span>.updateDate = updateDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getComment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> comment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setComment</span><span class="params">(String comment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.comment = comment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreateDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateDate</span><span class="params">(Date createDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createDate = createDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getUpdateDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> updateDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdateDate</span><span class="params">(Date updateDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.updateDate = updateDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;RoomTable&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, comment=&#x27;&quot;</span> + comment + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, createDate=&quot;</span> + createDate +</span><br><span class="line">                <span class="string">&quot;, updateDate=&quot;</span> + updateDate +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RoomTable是一个Entity类，对应数据库的表。字段类型要一致。关于Java类型和SQL的数据库表映射规则，请查阅官网。</p><hr><h3 id="插入一条数据并返回主键"><a href="#插入一条数据并返回主键" class="headerlink" title="插入一条数据并返回主键"></a>插入一条数据并返回主键</h3><p>我们新建的表RoomTable是有ID的，我们创建了一个Room后要知道生成的id，来返回给前端。不然前端不知道id就无法进行修改之类的操作了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsertAndGetKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> RoomTable room = <span class="keyword">new</span> RoomTable(<span class="string">&quot;Doule Bed&quot;</span>, <span class="string">&quot;no&quot;</span>, <span class="keyword">new</span> Date(), <span class="keyword">new</span> Date());</span><br><span class="line">    <span class="keyword">final</span> KeyHolder keyHolder = <span class="keyword">new</span> GeneratedKeyHolder();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> update = jdbcTemplate.update((Connection con) -&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> String sql = <span class="string">&quot;INSERT INTO room(`name`, `comment`, `create_date`, `update_date`) VALUES (?,?,?,?)&quot;</span>;</span><br><span class="line">        PreparedStatement preparedStatement = con.prepareStatement(sql,</span><br><span class="line">                Statement.RETURN_GENERATED_KEYS);</span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>, room.getName());</span><br><span class="line">        preparedStatement.setString(<span class="number">2</span>, room.getComment());</span><br><span class="line">        preparedStatement.setObject(<span class="number">3</span>, <span class="keyword">new</span> Timestamp(room.getCreateDate().getTime()));</span><br><span class="line">        preparedStatement.setObject(<span class="number">4</span>, <span class="keyword">new</span> Timestamp(room.getUpdateDate().getTime()));</span><br><span class="line">        <span class="keyword">return</span> preparedStatement;</span><br><span class="line">    &#125;, keyHolder);</span><br><span class="line">    System.out.println(<span class="string">&quot;The number of success:&quot;</span>+update);</span><br><span class="line">    System.out.println(<span class="string">&quot;The primary key of insert row: &quot;</span>+keyHolder.getKey().intValue());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> List&lt;Map&lt;String, Object&gt;&gt; maps = jdbcTemplate.queryForList(<span class="string">&quot;SELECT * FROM room&quot;</span>);</span><br><span class="line">    System.out.println(maps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>KeyHolder</code>用来接收自动生成的主键.</li><li><code>PreparedStatement</code>用来创建一个占位符的sql语句.</li><li>需要注意日期类型的映射规则，需要将java.util.Date转换为java.sql.*</li><li><code>queryForList</code>可以查询当前数据中的内容</li></ol><hr><h3 id="查询–findById"><a href="#查询–findById" class="headerlink" title="查询–findById"></a>查询–findById</h3><p>首先，修改下Date类型为datetime, 因为需要直到修改的具体时间。因此，room的scheme修改如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> springboot_demo <span class="keyword">charset</span> utf8 <span class="keyword">collate</span> utf8_general_ci;</span><br><span class="line"><span class="keyword">use</span> springboot_demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for room</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`room`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`room`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">80</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`comment`</span> <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`create_date`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`update_date`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">4</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of room</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`room`</span> <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;大床房&#x27;</span>, <span class="string">&#x27;无窗&#x27;</span>, <span class="string">&#x27;2017-11-26 00:00:00&#x27;</span>, <span class="string">&#x27;2017-11-26 00:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`room`</span> <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;Double Bed&#x27;</span>, <span class="string">&#x27;no&#x27;</span>, <span class="string">&#x27;2017-12-06 00:00:00&#x27;</span>, <span class="string">&#x27;2017-12-06 00:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`room`</span> <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;Big Bed&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2017-12-06 00:00:00&#x27;</span>, <span class="string">&#x27;2017-12-06 10:00:00&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>默认添加3条记录。</p><p>在resources下新建schema.sql,填入上述内容。当springboot启动时，会自动加载这个sql。那么就会重新初始化数据库。</p><p>我们的测试类会真实启动springboot的，因此每个测试都会重新初始化数据库一遍。下面可以测试根据id查询内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String sql = <span class="string">&quot;select `id`,`name`,`comment`,`create_date`,`update_date` from room WHERE id=?&quot;</span>;</span><br><span class="line">    <span class="keyword">final</span> RoomTable roomTable = jdbcTemplate.queryForObject(sql, (rs, rowNum) -&gt; <span class="keyword">new</span> RoomTable(rs.getInt(<span class="string">&quot;id&quot;</span>),</span><br><span class="line">            rs.getString(<span class="string">&quot;name&quot;</span>),</span><br><span class="line">            rs.getString(<span class="string">&quot;comment&quot;</span>),</span><br><span class="line">            rs.getTimestamp(<span class="string">&quot;create_date&quot;</span>),</span><br><span class="line">            rs.getTimestamp(<span class="string">&quot;update_date&quot;</span>)), <span class="number">3</span>);</span><br><span class="line">    System.out.println(roomTable);</span><br><span class="line">    Assert.assertTrue(<span class="number">3</span>== roomTable.getId());</span><br><span class="line">    Assert.assertNotNull(roomTable.getCreateDate());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>注意要使用select 字段列表来获取想要的字段，不要用<code>*</code></li><li><code>varchar</code>的映射为String</li><li><code>int</code>的映射为Integer</li><li><code>datetime</code>的映射为time</li><li>此处的映射为一个lambda表达式，从结果集中选择想要的字段来创建我们的映射关系</li><li>最后一个参数是占位符的值，防止sql注入。</li></ol><p>然后，可以观察到控制台重新启动springboot，并且运行了schema.sql。接下来需要注意的地方到了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RoomTable&#123;id&#x3D;3, name&#x3D;&#39;Big Bed&#39;, comment&#x3D;&#39;&#39;, createDate&#x3D;08:00:00, updateDate&#x3D;18:00:00&#125;</span><br></pre></td></tr></table></figure><p>打印出查询的时间比我们插入的时间多了8h。很容易猜测到时区问题。因为我们是北京时间，<code>UTC+8</code>。所以，在从数据库中取出时间的时候，做了下时区转换。我们的项目把数据的时区当作是<code>UTC</code>了。事实上，在生产环境中确实应该把数据库的时区设置为<code>UTC</code>。因为我们是全球性的项目。当然，设置为<code>UTC+8</code>也是可以的。但为了防止困扰，设置为<code>UTC</code>是最佳选择。</p><p>然而，真正的问题还不是这个。我们数据库当前的timezone是多少？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  show variables like &#x27;%time_zone%&#x27;;</span><br><span class="line">+<span class="comment">------------------+--------+</span></span><br><span class="line">| Variable_name    | Value  |</span><br><span class="line">+<span class="comment">------------------+--------+</span></span><br><span class="line">| system_time_zone |        |</span><br><span class="line">| time_zone        | SYSTEM |</span><br><span class="line">+<span class="comment">------------------+--------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>系统时区，显然应该是北京时间，即<code>UTC+8</code>的。那么，我们为什么查询的时候会把数据库当作0时区呢？ </p><p>因为Java里的北京时间对应的时区为<code>Asia/Shanghai</code>,修改配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;springboot_demo?serverTimezone&#x3D;Asia&#x2F;Shanghai&amp;characterEncoding&#x3D;utf-8</span><br></pre></td></tr></table></figure><p>然后，重新运行测试。结果正常了。此时，我们的项目时区为系统时区，我们的数据时区为系统时区。我们连接的驱动转换也标记了数据库为北京时间。这样就不会出现时区问题。如果是生产环境，就要把数据库/服务器/驱动参数设置为<code>UTC</code>.</p><hr><h3 id="查询返回list"><a href="#查询返回list" class="headerlink" title="查询返回list"></a>查询返回list</h3><p>除了最常用的findbyId, 最常用的查询是返回一个list。因为我们的搜索是返回条件匹配的值，而匹配条件的item通常很多个，即list。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectList</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String sql = <span class="string">&quot;select `id`,`name`,`comment`,`create_date`,`update_date` from room WHERE id&gt;? LIMIT 0,2&quot;</span>;</span><br><span class="line">    <span class="keyword">final</span> List&lt;RoomTable&gt; roomTableList = jdbcTemplate.query(sql, (rs, rowNum) -&gt; <span class="keyword">new</span> RoomTable(rs.getInt(<span class="string">&quot;id&quot;</span>),</span><br><span class="line">            rs.getString(<span class="string">&quot;name&quot;</span>),</span><br><span class="line">            rs.getString(<span class="string">&quot;comment&quot;</span>),</span><br><span class="line">            rs.getTimestamp(<span class="string">&quot;create_date&quot;</span>),</span><br><span class="line">            rs.getTimestamp(<span class="string">&quot;update_date&quot;</span>)), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(roomTableList);</span><br><span class="line">    assertEquals(<span class="number">2</span>, roomTableList.size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>同样要做结果集映射</li><li>同样需要传入占位符value</li><li>返回值是一个list</li></ol><hr><h3 id="删除一条数据"><a href="#删除一条数据" class="headerlink" title="删除一条数据"></a>删除一条数据</h3><p>删除一条数据就是把这条记录给删除掉。<br>删除一条数据这个功能通常都有，但是，现在并不是把数据真正的删除。因为基于某种想恢复的可能或者某国法律要求，被删除的数据只是被隐藏，仍旧遗留在数据库中。在这里，先实现彻底删除一条记录：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String sql = <span class="string">&quot;DELETE FROM room WHERE `id`=?&quot;</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> update = jdbcTemplate.update(sql, <span class="number">1</span>);</span><br><span class="line">    Assert.assertEquals(<span class="number">1</span>, update);</span><br><span class="line"></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; maps = jdbcTemplate.queryForList(<span class="string">&quot;select id from room where `id`=?&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    Assert.assertTrue(maps.isEmpty());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> count = jdbcTemplate.queryForObject(<span class="string">&quot;select count(*) from room&quot;</span>, Integer.class);</span><br><span class="line">    Assert.assertEquals(<span class="number">2</span>, count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>使用update方法，第二个参数为占位符value</li><li>返回一个count表明生效的数量，这里删除了一条，应该返回1</li><li>为了验证我们是否删除成功了。首先，我们每次会初始化数据库，数据库中只有初始化的3条记录。现在删除id为1的记录。应该剩下2条记录。还有就是查询id为1的数据的结果集是null.</li></ol><p>另外，由于jdbcTemplate查询的结果集为nul时，会抛出异常<code>EmptyResultDataAccessException</code> , 根据<a href="https://stackoverflow.com/questions/18503607/best-practice-to-select-data-using-spring-jdbctemplate">stackoverflow</a>, 推荐捕获异常来确定结果集为null。于是，也可以这样判断数据是否被删除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    jdbcTemplate.queryForObject(<span class="string">&quot;select id from room where `id`=?&quot;</span>, Integer.class, <span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (EmptyResultDataAccessException e) &#123;</span><br><span class="line">    System.err.println(<span class="string">&quot;Get a null result, the data is not exist in the database.&quot;</span>+e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="更新一条数据"><a href="#更新一条数据" class="headerlink" title="更新一条数据"></a>更新一条数据</h3><p>更新一条数据是基于查询条件唯一确定一条记录，然后更新该记录的某个或者多个属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String sql = <span class="string">&quot;update room set `update_date`=?, `comment`=? where id=?&quot;</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> update = jdbcTemplate.update(sql, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> Date(), <span class="string">&quot;booked&quot;</span>, <span class="number">1</span>&#125;);</span><br><span class="line">    assertEquals(<span class="number">1</span>, update);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String getSql = <span class="string">&quot;select `id`,`name`,`comment`,`create_date`,`update_date` from room WHERE id=?&quot;</span>;</span><br><span class="line">    <span class="keyword">final</span> RoomTable roomTable = jdbcTemplate.queryForObject(getSql, (rs, rowNum) -&gt; <span class="keyword">new</span> RoomTable(rs.getInt(<span class="string">&quot;id&quot;</span>),</span><br><span class="line">            rs.getString(<span class="string">&quot;name&quot;</span>),</span><br><span class="line">            rs.getString(<span class="string">&quot;comment&quot;</span>),</span><br><span class="line">            rs.getTimestamp(<span class="string">&quot;create_date&quot;</span>),</span><br><span class="line">            rs.getTimestamp(<span class="string">&quot;update_date&quot;</span>)), <span class="number">1</span>);</span><br><span class="line">    System.out.println(roomTable);</span><br><span class="line">    assertEquals(<span class="string">&quot;booked&quot;</span>, roomTable.getComment());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到控制台打印的更新时间：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RoomTable&#123;id&#x3D;1, name&#x3D;&#39;大床房&#39;, comment&#x3D;&#39;booked&#39;, createDate&#x3D;00:00:00, updateDate&#x3D;22:23:18&#125;</span><br></pre></td></tr></table></figure><ol><li>注意update的sql语法，我之前就是把逗号写成了<code>and</code>总是报错。</li><li>注意占位符的匹配，按顺序填充value。</li><li>更新成功应该返回1</li></ol><p>之前提到，删除操作通常并非真实的删除一条记录。而是设置一个flag，通过判断flag来确定是否有效。</p><p>修改room的表，增加一个字段<code>active</code>.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table room add column `active` tinyint default 0 not null;            </span><br><span class="line">Query OK, 0 rows affected (0.16 sec)                                               </span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0                                             </span><br><span class="line">                                                                                   </span><br><span class="line">                      </span><br><span class="line">mysql&gt; desc room;                                                                  </span><br><span class="line">+<span class="comment">-------------+--------------+------+-----+---------+----------------+             </span></span><br><span class="line">| Field       | Type         | Null | Key | Default | Extra          |             </span><br><span class="line">+<span class="comment">-------------+--------------+------+-----+---------+----------------+             </span></span><br><span class="line">| id          | int(11)      | NO   | PRI | NULL    | auto_increment |             </span><br><span class="line">| name        | varchar(80)  | NO   |     | NULL    |                |             </span><br><span class="line">| <span class="keyword">comment</span>     | <span class="built_in">varchar</span>(<span class="number">200</span>) | YES  |     | <span class="literal">NULL</span>    |                |             </span><br><span class="line">| create_date | datetime     | <span class="keyword">NO</span>   |     | <span class="literal">NULL</span>    |                |             </span><br><span class="line">| update_date | datetime     | <span class="keyword">NO</span>   |     | <span class="literal">NULL</span>    |                |             </span><br><span class="line">| active      | <span class="built_in">tinyint</span>(<span class="number">4</span>)   | <span class="keyword">NO</span>   |     | <span class="number">0</span>       |                |             </span><br><span class="line">+<span class="comment">-------------+--------------+------+-----+---------+----------------+             </span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)                                                           </span><br><span class="line">                                                                                   </span><br><span class="line">mysql&gt; <span class="keyword">select</span> * <span class="keyword">from</span> room;                                                                           </span><br><span class="line">+<span class="comment">----+------------+---------+---------------------+---------------------+--------+ </span></span><br><span class="line">| id | name       | <span class="keyword">comment</span> | create_date         | update_date         | active | </span><br><span class="line">+<span class="comment">----+------------+---------+---------------------+---------------------+--------+ </span></span><br><span class="line">|  <span class="number">1</span> | 大床房     | 无窗    | <span class="number">2017</span><span class="number">-11</span><span class="number">-26</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> | <span class="number">2017</span><span class="number">-11</span><span class="number">-26</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> |      <span class="number">0</span> |      </span><br><span class="line">|  <span class="number">2</span> | <span class="keyword">Double</span> Bed | <span class="keyword">no</span>      | <span class="number">2017</span><span class="number">-12</span><span class="number">-06</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> | <span class="number">2017</span><span class="number">-12</span><span class="number">-06</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> |      <span class="number">0</span> | </span><br><span class="line">|  <span class="number">3</span> | <span class="keyword">Big</span> Bed    |         | <span class="number">2017</span><span class="number">-12</span><span class="number">-06</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> | <span class="number">2017</span><span class="number">-12</span><span class="number">-06</span> <span class="number">10</span>:<span class="number">00</span>:<span class="number">00</span> |      <span class="number">0</span> | </span><br><span class="line">+<span class="comment">----+------------+---------+---------------------+---------------------+--------+ </span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)                                                           </span><br><span class="line">                                                                                   </span><br></pre></td></tr></table></figure><ol><li><code>ALTER TABLE table_name ADD column_name datatype</code> 为修改表，并增加一个field。</li><li><code>ALTER TABLE table_name DROP COLUMN column_name</code> 为修改表，并删除一个field。</li><li><code>ALTER TABLE table_name ALTER COLUMN column_name datatype</code>为修改表，并更改一个field。</li><li><code>tinyint</code> 表示从 0 到 255 的整型数据。存储大小为 1 字节。</li><li><code>desc tableName</code>为查看表结构。</li><li>看可以看到表结构已经改变，并且给active设置了默认值0，那么当需要删除时，设置为1.</li></ol><p>下面，当接到一个删除的需求时，我们设置active为1. 需要注意，由于每次测试都会重新覆盖数据库，需要将修改的sql放入schama.sql.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateForDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String sql = <span class="string">&quot;update room set `update_date`=?, `active`=1 where id=?&quot;</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> update = jdbcTemplate.update(sql, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> Date(), <span class="number">1</span>&#125;);</span><br><span class="line">    Assert.assertEquals(<span class="number">1</span>, update);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String getSql = <span class="string">&quot;select `active` from room WHERE id=?&quot;</span>;</span><br><span class="line">    Integer active = jdbcTemplate.queryForObject(getSql, Integer.class, <span class="number">1</span>);</span><br><span class="line">    System.out.println(active);</span><br><span class="line">    Assert.assertTrue(active == <span class="number">1</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="批量添加-更新数据"><a href="#批量添加-更新数据" class="headerlink" title="批量添加/更新数据"></a>批量添加/更新数据</h3><p>有时候需要批量添加一些数据，比如导入数据。这时候每条都执行一次sql就会显得很慢。这里提供了batch方法，可以一次同时插入多条数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBatchInsert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;RoomTable&gt; rooms = Lists.newArrayList(</span><br><span class="line">            <span class="keyword">new</span> RoomTable(<span class="string">&quot;name1&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="keyword">new</span> Date(), <span class="keyword">new</span> Date()),</span><br><span class="line">            <span class="keyword">new</span> RoomTable(<span class="string">&quot;name2&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="keyword">new</span> Date(), <span class="keyword">new</span> Date()),</span><br><span class="line">            <span class="keyword">new</span> RoomTable(<span class="string">&quot;name3&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="keyword">new</span> Date(), <span class="keyword">new</span> Date())</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">final</span> String sql = <span class="string">&quot;INSERT INTO room(`name`, `comment`, `create_date`, `update_date`) VALUES (?,?,?,?)&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span>[] ints = jdbcTemplate.batchUpdate(sql, <span class="keyword">new</span> BatchPreparedStatementSetter() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValues</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> RoomTable roomTable = rooms.get(i);</span><br><span class="line">            ps.setString(<span class="number">1</span>, roomTable.getName());</span><br><span class="line">            ps.setString(<span class="number">2</span>, roomTable.getComment());</span><br><span class="line">            ps.setTimestamp(<span class="number">3</span>, <span class="keyword">new</span> java.sql.Timestamp(roomTable.getCreateDate().getTime()));</span><br><span class="line">            ps.setTimestamp(<span class="number">4</span>, <span class="keyword">new</span> java.sql.Timestamp(roomTable.getUpdateDate().getTime()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBatchSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> rooms.size();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints) &#123;</span><br><span class="line">        assertEquals(<span class="number">1</span>, anInt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> count = jdbcTemplate.queryForObject(<span class="string">&quot;select count(*) from room&quot;</span>, Integer.class);</span><br><span class="line">    assertEquals(<span class="number">6</span>, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>需要有一个list来存储批量数据</li><li>调用batchUpdate方法即可，注意占位符的顺序</li><li>注意batch 的size</li></ol><p>同时，提供了数组版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBatchInert2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String sql = <span class="string">&quot;INSERT INTO room(`name`, `comment`, `create_date`, `update_date`) VALUES (?,?,?,?)&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span>[] ints = jdbcTemplate.batchUpdate(sql,</span><br><span class="line">            Lists.newArrayList(</span><br><span class="line">                    <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;name1&quot;</span>, <span class="string">&quot;这是一条数据&quot;</span>, <span class="keyword">new</span> Date(), <span class="keyword">new</span> Date()&#125;,</span><br><span class="line">                    <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;name2&quot;</span>, <span class="string">&quot;这是另一条数据的value&quot;</span>, <span class="keyword">new</span> Date(), <span class="keyword">new</span> Date()&#125;));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints) &#123;</span><br><span class="line">        assertEquals(<span class="number">1</span>, anInt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>同样需要使用占位符</li><li>把需要批量的数据组成一个list，每个元素又是数组，数组的内容为一条数据的占位符value</li></ol><hr><h3 id="批量删除数据"><a href="#批量删除数据" class="headerlink" title="批量删除数据"></a>批量删除数据</h3><p>同理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBatchDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] ints = jdbcTemplate.batchUpdate(<span class="string">&quot;DELETE FROM room WHERE id=?&quot;</span>, Lists.newArrayList(<span class="keyword">new</span> Object[]&#123;<span class="number">1</span>&#125;, <span class="keyword">new</span> Object[]&#123;<span class="number">2</span>&#125;, <span class="keyword">new</span> Object[]&#123;<span class="number">3</span>&#125;));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints) &#123;</span><br><span class="line">        assertEquals(<span class="number">1</span>, anInt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> count = jdbcTemplate.queryForObject(<span class="string">&quot;select count(*) from room&quot;</span>, Integer.class);</span><br><span class="line">    assertEquals(<span class="number">0</span>, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分层架构"><a href="#分层架构" class="headerlink" title="分层架构"></a>分层架构</h2><p>代码的数量随着业务会越积越多，为了能够更容易开发，更容易维护，有许多规范需要遵守。最基本就是分层架构。</p><p>Domain Driven Design的主旨是模块化，模块内聚，模块间低耦合。只有分的开，互不相干，才能更好的维护，编写代码才能更轻松。DDD里的分层如下：<br><img src="https://images2017.cnblogs.com/blog/686418/201712/686418-20171218221518865-254833322.png"></p><p>这是一个整体的层次划分，落实到我们的代码上，则通常分为3层： controller， service， dao。</p><p><img src="https://images2017.cnblogs.com/blog/686418/201712/686418-20171218223806178-819790245.jpg"></p><p>controller调用service，service调用dao。</p><p>controller负责路由分发。</p><p>service负责业务逻辑处理。</p><p>dao曾则是持久化层，服务对象和数据的持久化存储。通常是存入数据库。</p><h3 id="实体entity"><a href="#实体entity" class="headerlink" title="实体entity"></a>实体entity</h3><p>在DDD里，重要的就是领域模型，上述的分层架构只是为了能让模型间的交互更加清晰，那么模型该如何定义？ 侠义的理解，我们可以把一个Java bean当作一个model，当作一个领域模型。再具体的讲，和数据库表做映射的类，可以当作是领域对象。领域对象即entity，所以，在我们的架构里会有个<br>entity的packag，用来存放领域对象。领域对象也给显著的特征是 <strong>有唯一性id</strong> ， 通过唯一性id可以区分不同entity。</p><h3 id="值对象valueobject"><a href="#值对象valueobject" class="headerlink" title="值对象valueobject"></a>值对象valueobject</h3><p>与entity相关的是值对象，即valueobject。值对象，即存储值的对象。DTO可以说是一种值对象，值对象是在数据传输过程中使用的对象。因为数据传输过程中<br>可能会执行对象的方法，调用对象的属性，甚至只需要领域对象的部分数据。所以不能直接讲领域对象entity传输出来，而要使用值对象。值对象的一个显著特征<br>是 <strong>不可变</strong>，构造的值对象最好要设置为不可变更的。值对象对id没有要求。</p><h3 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h3><p>Java中的接口可以通过子类向上转型来代理实现类。interface只需要顶以好行为，然后就可以被调用。调用者只需要直到接口入参和返回值以及目的就可以了，完全<br>不用甚至不应该理会接口内部的实现，如此可以将业务逻辑隔离开来，降低耦合性。所以， <strong>分层调用必须使用面向接口变成</strong>。</p><p>对应到我们的具体代码上，则应该<code>controller</code>调用<code>IService</code>, <code>IService</code>调用<code>IDao</code>。而<code>serviceimpl</code>之类的实现类不应和调用者产生联系。</p><h3 id="一个简单的demo"><a href="#一个简单的demo" class="headerlink" title="一个简单的demo"></a>一个简单的demo</h3><p>清楚上述的几个概念后，就可以理解接下来的做法了。我们从下往上，依次建立我们需要的类。</p><p>首先，是DAO层。我们需要一个用户表来存储用户信息，新建一个user表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> springboot_demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span>(</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">VARCHAR</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">12</span>),</span><br><span class="line">  <span class="string">`create_date`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`update_date`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">4</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><ol><li>id是必须的，简单设置为自增，主键。</li><li>username是用户的账号，用户登录账号要唯一，所以设置为<code>UNIQUE</code>，同时必然可以为null。</li><li>name长度设置为12个字符以内。</li><li>创建时间和更新时间必须。</li></ol><p>然后，创建dao层。dao层需要和数据库交互，则必须要一个entity来存储数据，于是需要先新建一个entity。新建<code>com.test.demo.domain.entity.UserTable</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.demo.domain.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Ryan Miao(http://www.cnblogs.com/woshimrf/)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Date createDate;</span><br><span class="line">    <span class="keyword">private</span> Date updateDate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserTable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserTable</span><span class="params">(String username, String name, Date createDate, Date updateDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.createDate = createDate;</span><br><span class="line">        <span class="keyword">this</span>.updateDate = updateDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreateDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateDate</span><span class="params">(Date createDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createDate = createDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getUpdateDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> updateDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdateDate</span><span class="params">(Date updateDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.updateDate = updateDate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后，创建我们的Dao， <code>com.test.demo.domain.dao.IUserDao</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.demo.domain.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.test.demo.domain.entity.UserTable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Ryan Miao(http://www.cnblogs.com/woshimrf/)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个用户。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userTable user信息，id将被忽略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> id。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Integer <span class="title">insert</span><span class="params">(UserTable userTable)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户by id。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">UserTable <span class="title">getById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实现类先暂停，继续上一层，service层。新建``, 目标依旧是创建和获取用户。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.demo.domain.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.test.demo.domain.entity.UserTable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Ryan Miao(http://www.cnblogs.com/woshimrf/)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个用户。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userTable user信息，id将被忽略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> id。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Integer <span class="title">insert</span><span class="params">(UserTable userTable)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户by id。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">UserTable <span class="title">getById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>到这里，你会发现，这两个接口明明一模一样，除了名字。是的，在一定程度来说，这两个抽象的接口的行为很相似，但从分层的理念上看，含义是不同的。我也是过了很久才体会到这种分层的好处的。分层可以把业务逻辑和数据处理隔离开来，这个demo里业务简单，所以看着相似，但事实上，service层要处理更多的业务逻辑，即实现层是不同的。service层也不仅仅是一个转发。</p><p>有了service层，那么可以在controller里调用了。新建<code>com.test.demo.controller.UserController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.test.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.test.demo.domain.entity.UserTable;</span><br><span class="line"><span class="keyword">import</span> com.test.demo.domain.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/v1/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserTable <span class="title">getUserById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">insertUser</span><span class="params">(<span class="meta">@RequestBody</span> UserTable userTable)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.insert(userTable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><code>@RestController</code>仍旧当作一个rest接口，即只是API，返回json数据。</li><li><code>@RequestMapping(&quot;/api/v1/users&quot;)</code> 定义我们的资源前缀和版本号</li><li><code>@Autowired private IUserService userService;</code> 获取我们的User service， <code>@Autowired</code>是spring容器里自动注入的注解，作用是帮忙生成一定对象，并赋值给它。这里即获得一个<code>IUserService</code>对象。但是，在IDEA里，你会看到编译器报警，红色的波浪线，<code>Could not autowired</code>。 是指我们要注入一个<code>IUserService</code>实例，但我们并没有提供给它，它也就没办法找到并帮忙注入了。也就是说，我们的代码还不能用。还需要一个实例。一种做法是，像我们之前声明<code>JdbcTemplate</code>一样，声明一个出来。但前提是我们有这个class可以new，目前是我们只有接口，所以还需要创建它的实现类。</li></ol><p>&lt;未完待续！&gt;</p><p>新建，``</p><h2 id="JPA"><a href="#JPA" class="headerlink" title="JPA"></a>JPA</h2><p>JPA是Java Persistence API的简称。</p><p>相比jdbcTemplate, 需要写sql，需要做映射。JPA提供了一个规范，即通常这样写，我给封装好，你就这样调用即可。</p><p>以下参考官方文档以及<a href="https://www.cnblogs.com/ityouknow/p/5891443.html%E3%80%82">https://www.cnblogs.com/ityouknow/p/5891443.html。</a></p><h3 id="引入JPA"><a href="#引入JPA" class="headerlink" title="引入JPA"></a>引入JPA</h3><p>添加依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compile(&quot;org.springframework.boot:spring-boot-starter-data-jpa&quot;)</span><br><span class="line">testCompile group: &#39;com.h2database&#39;, name: &#39;h2&#39;, version: &#39;1.4.196&#39;</span><br></pre></td></tr></table></figure><ol><li>这个jpa会包含所有需要引用的依赖，注意，之前已经引入了MySQL，因此还是需要引入MySQL驱动的，不然无法自动检测究竟使用的是哪个数据库</li><li>这个h2是用来搞测试的。之前的测试全都是针对真实数据库的。在后面我们会引入自动化测试，自动化测试会跑无数遍，肯定不能用真实的数据库来测试代码逻辑的准确。因此，引入h2. h2是一个内存数据库，Java编写的。可以兼容MySQL。后面，我们跑测试用例的时候，就会使用h2作为数据库，而不是真实的MySQL。</li></ol><h3 id="修改和标注我们的实体类"><a href="#修改和标注我们的实体类" class="headerlink" title="修改和标注我们的实体类"></a>修改和标注我们的实体类</h3><p>这里的JPA是基于注解来实现的。因此，我们需要标注实体类。</p><h2 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h2><h2 id="面向接口编程-1"><a href="#面向接口编程-1" class="headerlink" title="面向接口编程"></a>面向接口编程</h2><h2 id="编写测试"><a href="#编写测试" class="headerlink" title="编写测试"></a>编写测试</h2><h2 id="集成CI"><a href="#集成CI" class="headerlink" title="集成CI"></a>集成CI</h2><h2 id="登陆拦截"><a href="#登陆拦截" class="headerlink" title="登陆拦截"></a>登陆拦截</h2><h2 id="OAuth2-0"><a href="#OAuth2-0" class="headerlink" title="OAuth2.0"></a>OAuth2.0</h2><h2 id="事物"><a href="#事物" class="headerlink" title="事物"></a>事物</h2><h2 id="JPA-1"><a href="#JPA-1" class="headerlink" title="JPA"></a>JPA</h2><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h2 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h2><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://codeplanet.io/principles-good-restful-api-design/">https://codeplanet.io/principles-good-restful-api-design/</a></li><li><a href="https://github.com/aisuhua/restful-api-design-references">https://github.com/aisuhua/restful-api-design-references</a></li><li><a href="http://www.jianshu.com/p/5659e6e16115">http://www.jianshu.com/p/5659e6e16115</a></li><li><a href="https://www.zhihu.com/question/28557115">https://www.zhihu.com/question/28557115</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dagger2 入门解析</title>
      <link href="2017/10/24/hello-dagger/"/>
      <url>2017/10/24/hello-dagger/</url>
      
        <content type="html"><![CDATA[<p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/dagger/demo-uml.svg"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在为dropwizard选择DI框架的时候考虑了很久。Guice比较成熟，Dagger2主要用于Android。虽然都是google维护的，但Dagger2远比guice更新的频率高。再一个是，Dagger2不同于guice的运行时注入，编译时生成代码的做法很好。提前发现问题，更高的效率。</p><a id="more"></a><p>还是那句话，百度到的dagger2资料看着一大堆，大都表层，而且和Android集成很深。很少有单独讲Dagger2的。不得已，去看官方文档。</p><h1 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h1><p>官方的example是基于maven的，由于maven天然结构的约定，compile的插件生成可以和maven集成的很好。而我更喜欢gradle，gradle随意很多，结果就是编译结构需要自己指定。</p><p>demo source： <a href="https://github.com/Ryan-Miao/l4dagger2">https://github.com/Ryan-Miao/l4dagger2</a></p><p>结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── build.gradle</span><br><span class="line">├── gradle</span><br><span class="line">│   └── wrapper</span><br><span class="line">│       ├── gradle-wrapper.jar</span><br><span class="line">│       └── gradle-wrapper.properties</span><br><span class="line">├── gradlew</span><br><span class="line">├── gradlew.bat</span><br><span class="line">├── readme.md</span><br><span class="line">├── settings.gradle</span><br><span class="line">└── src</span><br><span class="line">    └── main</span><br><span class="line">        ├── java</span><br><span class="line">        │   └── com</span><br><span class="line">        │       └── test</span><br><span class="line">        │           └── l4dagger2</span><br><span class="line">        │               └── hello</span><br><span class="line">        │                   ├── CoffeeApp.java</span><br><span class="line">        │                   ├── CoffeeMaker.java</span><br><span class="line">        │                   ├── DripCoffeeModule.java</span><br><span class="line">        │                   ├── ElectricHeater.java</span><br><span class="line">        │                   ├── Heater.java</span><br><span class="line">        │                   ├── Pump.java</span><br><span class="line">        │                   ├── PumpModule.java</span><br><span class="line">        │                   └── Thermosiphon.java</span><br><span class="line">        ├── resources</span><br><span class="line">        └── webapp</span><br><span class="line"></span><br><span class="line">11 directories, 15 files</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="加载依赖"><a href="#加载依赖" class="headerlink" title="加载依赖"></a>加载依赖</h1><p>build.gradle</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&quot;net.ltgt.apt&quot;</span> version <span class="string">&quot;0.12&quot;</span></span><br><span class="line">    id <span class="string">&quot;net.ltgt.apt-idea&quot;</span> version <span class="string">&quot;0.12&quot;</span></span><br><span class="line">    id <span class="string">&quot;net.ltgt.apt-eclipse&quot;</span> version <span class="string">&quot;0.12&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenLocal()</span><br><span class="line">    maven &#123;</span><br><span class="line">        url <span class="string">&quot;http://maven.aliyun.com/nexus/content/groups/public/&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group <span class="string">&#x27;com.test&#x27;</span></span><br><span class="line">version <span class="string">&#x27;1.0-SNAPSHOT&#x27;</span></span><br><span class="line"></span><br><span class="line">apply plugin: <span class="string">&#x27;java&#x27;</span></span><br><span class="line">apply plugin: <span class="string">&#x27;war&#x27;</span></span><br><span class="line">apply plugin: <span class="string">&#x27;idea&#x27;</span></span><br><span class="line"></span><br><span class="line">sourceCompatibility = <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">&#x27;com.google.dagger:dagger:2.12&#x27;</span></span><br><span class="line">    apt <span class="string">&#x27;com.google.dagger:dagger-compiler:2.12&#x27;</span></span><br><span class="line"></span><br><span class="line">    testCompile group: <span class="string">&#x27;junit&#x27;</span>, name: <span class="string">&#x27;junit&#x27;</span>, version: <span class="string">&#x27;4.12&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Note that</strong>：</p><ul><li><code>plugins</code>插件需要放到最开头。然后，由于设计编译时生成sourceSet类，针对IDE需要添加对应的插件。</li><li><code>dagger2</code>生成的类放在<code>build/generated/source/apt/main</code></li></ul><h1 id="Coding-Time"><a href="#Coding-Time" class="headerlink" title="Coding Time"></a>Coding Time</h1><p>接下来的内容就和官方的demo一样了。</p><p>com.test.l4dagger2.hello.CoffeeApp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeApp</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="meta">@Component(modules = &#123; DripCoffeeModule.class &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CoffeeShop</span> </span>&#123;</span><br><span class="line">        <span class="function">CoffeeMaker <span class="title">maker</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CoffeeShop coffeeShop = DaggerCoffeeApp_CoffeeShop.builder().build();</span><br><span class="line">        coffeeShop.maker().brew();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>com.test.l4dagger2.hello.DripCoffeeModule</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module(includes = PumpModule.class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DripCoffeeModule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="function">Heater <span class="title">provideHeater</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ElectricHeater();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>com.test.l4dagger2.hello.PumpModule</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PumpModule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Binds</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> Pump <span class="title">providePump</span><span class="params">(Thermosiphon pump)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>com.test.l4dagger2.hello.Pump</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Pump</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pump</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>com.test.l4dagger2.hello.Thermosiphon</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thermosiphon</span> <span class="keyword">implements</span> <span class="title">Pump</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Heater heater;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Thermosiphon(Heater heater) &#123;</span><br><span class="line">        <span class="keyword">this</span>.heater = heater;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pump</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (heater.isHot()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;=&gt; =&gt; pumping =&gt; =&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>com.test.l4dagger2.hello.Heater</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Heater</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isHot</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>com.test.l4dagger2.hello.ElectricHeater</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricHeater</span> <span class="keyword">implements</span> <span class="title">Heater</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> heating;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;~ ~ ~ heating ~ ~ ~&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.heating = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.heating = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> heating;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>com.test.l4dagger2.hello.CoffeeMaker</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CoffeeMaker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lazy&lt;Heater&gt; heater; <span class="comment">// Create a possibly costly heater only when we use it.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Pump pump;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    CoffeeMaker(Lazy&lt;Heater&gt; heater, Pump pump) &#123;</span><br><span class="line">        <span class="keyword">this</span>.heater = heater;</span><br><span class="line">        <span class="keyword">this</span>.pump = pump;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        heater.get().on();</span><br><span class="line">        pump.pump();</span><br><span class="line">        System.out.println(<span class="string">&quot; [_]P coffee! [_]P &quot;</span>);</span><br><span class="line">        heater.get().off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对<code>DaggerCoffeeApp_CoffeeShop</code>不识别问题，运行编译后就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh gradlew build</span><br></pre></td></tr></table></figure><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>Run main method</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~ ~ ~ heating ~ ~ ~</span><br><span class="line">&#x3D;&gt; &#x3D;&gt; pumping &#x3D;&gt; &#x3D;&gt;</span><br><span class="line"> [_]P coffee! [_]P </span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="用法分析"><a href="#用法分析" class="headerlink" title="用法分析"></a>用法分析</h1><p>Dagger暴露的最外层为component，而Component的注入来自module。Component之间不能互相注入，module之间可以互相注入。<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/dagger/dagger%E8%B0%83%E7%94%A8%E5%B1%82%E6%AC%A1.svg"></p><h2 id="注入原理"><a href="#注入原理" class="headerlink" title="注入原理"></a>注入原理</h2><p>编译时扫描注解，生成对应的builder和factory。这点和spring不同，spring是运行时通过反射生成instance。另一个问题就是由于是静态工厂，那么就不能动态绑定了。不过可以通过其他的手段弥补。</p><p>以下来自<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0519/2892.html">详解Dagger2</a></p><ul><li>@Inject: 通常在需要依赖的地方使用这个注解。换句话说，你用它告诉Dagger这个类或者字段需要依赖注入。这样，Dagger就会构造一个这个类的实例并满足他们的依赖。</li><li>@Module: Modules类里面的方法专门提供依赖，所以我们定义一个类，用@Module注解，这样Dagger在构造类的实例的时候，就知道从哪里去找到需要的 依赖。modules的一个重要特征是它们设计为分区并组合在一起（比如说，在我们的app中可以有多个组成在一起的modules）。</li><li>@Provide: 在modules中，我们定义的方法是用这个注解，以此来告诉Dagger我们想要构造对象并提供这些依赖。<br>@Component: Components从根本上来说就是一个注入器，也可以说是@Inject和@Module的桥梁，它的主要作用就是连接这两个部分。 </li><li>Components可以提供所有定义了的类型的实例，比如：我们必须用@Component注解一个接口然后列出所有的@Modules组成该组件，如 果缺失了任何一块都会在编译的时候报错。所有的组件都可以通过它的modules知道依赖的范围。</li><li>@Scope: Scopes可是非常的有用，Dagger2可以通过自定义注解限定注解作用域。后面会演示一个例子，这是一个非常强大的特点，因为就如前面说的一样，没 必要让每个对象都去了解如何管理他们的实例。在scope的例子中，我们用自定义的@PerActivity注解一个类，所以这个对象存活时间就和 activity的一样。简单来说就是我们可以定义所有范围的粒度(@PerFragment, @PerUser, 等等)。</li><li>Qualifier: 当类的类型不足以鉴别一个依赖的时候，我们就可以使用这个注解标示。例如：在Android中，我们会需要不同类型的context，所以我们就可以定义 qualifier注解“@ForApplication”和“@ForActivity”，这样当注入一个context的时候，我们就可以告诉 Dagger我们想要哪种类型的context。</li></ul><h2 id="1-入口"><a href="#1-入口" class="headerlink" title="1. 入口"></a>1. 入口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="meta">@Component(modules = &#123; DripCoffeeModule.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CoffeeShop</span> </span>&#123;</span><br><span class="line">    <span class="function">CoffeeMaker <span class="title">maker</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dagger中Component就是最顶级的入口，dagger为之生成了工厂类<code>DaggerCoffeeApp_CoffeeShop</code>, 目标是构建<code>CoffeeMaker</code>， 在<code>CoffeeMaker</code>中使用了<code>Injection</code>，那么依赖要由工厂类来提供。工厂类是根据<code>modules</code>的参数来找依赖绑定的。</p><p>本例中，指向了<code>DripCoffeeModule</code>，意思是<code>CoffeeMaker</code>的依赖要从这个module里找。</p><p><strong>工厂名称生成规则</strong>   </p><ul><li>如果Component是接口, 则生成<code>Dagger</code>+接口名</li><li>如果Component是内部接口，比如本例，则生成<code>Dagger</code>+类名+ <code>_</code>+ 接口名</li></ul><h2 id="2-依赖管理"><a href="#2-依赖管理" class="headerlink" title="2. 依赖管理"></a>2. 依赖管理</h2><p>module看起来似乎和spring里的configuration有点相似，负责声明bean。<strong>而且同样支持继承，子module拥有父亲的元素</strong>。 这点和spring的context也很像，子context可以从父context里获取instance。对应的Java里的继承也同样，子类可以使用父类的属性和方法。</p><p>这里可以把<code>DripCoffeeModule</code>当做父类，而<code>PumpModule</code>为子类。<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/dagger/module-extend.svg"></p><p>但是， <strong>引用注入的时候却和spring相反，module之间</strong> ！</p><p>在spring里，子context拥有所有的bean，所以在子context里可以注入任何bean。而父context只能注入自己声明的bean。</p><p>而在dagger2的这个module里，module可以看做是一个打包。最外层的包显然包含了所有的bean。因此，在<code>CoffeeShop</code>中引入的是父module <code>DripCoffeeModule</code>。在子module <code>PumpModule</code>中的<code>Thermosiphon</code>可以注入声明在<code>DripCoffeeModule</code>里的<code>Heater</code>实例。</p><p>当然，造成这个问题的原因是生成的时候的顺序有关。调整下顺序，把<code>PumpModule</code>引入Component里，然后，把<code>DripCoffeeModule</code> include到<code>PumpModule</code>里。此时一样没啥问题，只是掉了个。不同的是，父子对调导致Pump变成了父亲的元素，Heater成了子类的元素。然而，一样可以将heater注入到Pump。为啥？等看了源码再了解，这里先搞定用法scop。<em>猜测会不会是在创建Pump的时候发现缺少Heater，然后压栈，去子module里找声明，找到后，弹出栈</em>。</p><p>Anyway，demo的注入就是这么简单。module起到定义bean的范围的作用, <strong>module之间只要连接就是互通的，可以相互注入</strong>, 但打包bean还是要靠最外层的module。</p><h2 id="3-具体实现方式"><a href="#3-具体实现方式" class="headerlink" title="3. 具体实现方式"></a>3. 具体实现方式</h2><p>简单的说，就是一个工厂模式，由Dagger负责创建工厂，帮忙生产instance。遵从Java规范<a href="https://jcp.org/en/jsr/detail?id=330">JSR 330</a>，可以使用这些注解。现在不研究Dagger2是如何根据注解去生成工厂的，先来看看工厂是什么东西，理解为什么可以实现了DI(Dependency Injection)，如何创建IoC(Inverse of Control)容器。</p><p>从入口出发。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CoffeeApp.CoffeeShop coffeeShop = DaggerCoffeeApp_CoffeeShop.builder().build();</span><br><span class="line">CoffeeMaker maker = coffeeShop.maker();</span><br></pre></td></tr></table></figure><p><code>DaggerCoffeeApp_CoffeeShop</code> 是生成的工厂类，实现了我们定义<code>Component</code>的接口<code>CoffeeShop</code>.<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/dagger/DaggerCoffeeApp_CoffeeShop.svg"></p><p>针对Component上的注解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Singleton</span><br><span class="line">@Component(modules &#x3D; &#123; DripCoffeeModule.class &#125;)</span><br></pre></td></tr></table></figure><p>首先观察<code>DripCoffeeModule</code>，里面目前声明了一个<code>Provider&lt;Heater&gt;</code>, 并且<code>include</code>了<code>PumpModule</code>。显然，我们的Component就是由这两个东西决定的。因此，<code>DripCoffeeModule</code>把这两个当做成员变量，这样就有了操纵这两个东西来生成instance的可能。</p><p>下一步，就是<code>build()</code>方法了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> CoffeeApp.<span class="function">CoffeeShop <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dripCoffeeModule == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.dripCoffeeModule = <span class="keyword">new</span> DripCoffeeModule();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pumpModule == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.pumpModule = <span class="keyword">new</span> PumpModule();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DaggerCoffeeApp_CoffeeShop(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里显然就是初始化这两个成员变量。然后创建我们的工厂<code>DaggerCoffeeApp_CoffeeShop</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(<span class="keyword">final</span> Builder builder)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.provideHeaterProvider =</span><br><span class="line">    DoubleCheck.provider(</span><br><span class="line">        DripCoffeeModule_ProvideHeaterFactory.create(builder.dripCoffeeModule));</span><br><span class="line"><span class="keyword">this</span>.pumpModule = builder.pumpModule;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里才开始核心的依赖管理。</p><h3 id="initialize分析"><a href="#initialize分析" class="headerlink" title="initialize分析"></a>initialize分析</h3><p>先看第一部分，这是关于<code>Heater</code>的。由于Heater声明了<code>Singleton</code>，Dagger通过经典的<code>double-check</code>来实现单例。面试必备。来看看dagger是怎么用的。这里有两种<code>Provider</code><br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/dagger/DripCoffeeModule_ProvideHeaterFactory.svg"><br>其中，<code>Factory</code>是正宗的工厂。为毛还要专门继承出来一个接口？可以学习下这种抽象方法，虽然Factory和Provider几乎一模一样，但分出来是为了标记。或者说归类。比如，区别于<code>DoubleCheck</code>。看名字都能才出来，<code>DoubleCheck</code>是一个代理类。</p><p>虽然简单，但还是有好多可以学习的编程要点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Returns a &#123;<span class="doctag">@link</span> Provider&#125; that caches the value from the given delegate provider. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Provider&lt;T&gt; <span class="title">provider</span><span class="params">(Provider&lt;T&gt; delegate)</span> </span>&#123;</span><br><span class="line">    checkNotNull(delegate);</span><br><span class="line">    <span class="keyword">if</span> (delegate <span class="keyword">instanceof</span> DoubleCheck) &#123;</span><br><span class="line">        <span class="comment">/* This should be a rare case, but if we have a scoped @Binds that delegates to a scoped</span></span><br><span class="line"><span class="comment">        * binding, we shouldn&#x27;t cache the value again. */</span></span><br><span class="line">        <span class="keyword">return</span> delegate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DoubleCheck&lt;T&gt;(delegate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看看，同样是创建一个新对象，比我们平时多了两步。一是检查Null，我表示遇到最多的生产事故是由<code>NullPointException</code>造成的，然后检查是否需要代理，如果本来就是代理类则直接返回，这里就实现了方法的幂等性，重复调用的结果一致。</p><p>接下来看我们的工厂<code>DripCoffeeModule_ProvideHeaterFactory</code>, 真就是一个工厂。但也不能不看，因为这是和我们代码关联最紧密的一步。工厂是如何根据我们的注解生产instance的呢？后面再看。学习源码真心提高抽象思维。</p><p>至此，initialize 方法结束。下一步就是生成我们的Component了。</p><h3 id="Make-instance"><a href="#Make-instance" class="headerlink" title="Make instance"></a>Make instance</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> CoffeeMaker <span class="title">maker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CoffeeMaker(</span><br><span class="line">        DoubleCheck.lazy(provideHeaterProvider),</span><br><span class="line">        Preconditions.checkNotNull(</span><br><span class="line">            pumpModule.providePump(<span class="keyword">new</span> Thermosiphon(provideHeaterProvider.get())),</span><br><span class="line">            <span class="string">&quot;Cannot return null from a non-@Nullable @Provides method&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>果然就是直接用构造函数new了一个，因此，不要以为在Component上标记了Singleton就会生产出同一个Component了，每次生产的最外一层的instance，即Component，就是new了一个。但他的依赖就不同了。看看两个依赖的不同生命周期就能明白。</p><p><strong>Heater</strong><br>Heater做了两个处理，一个是Singleton，一个是Lazy， 即懒汉式。Singleton和Lazy是两种设计模式。<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/dagger/DoubleCheck.svg"><br>DoubleCheck实现了Provider和Lazy的接口，而Provider和Lazy除了名字不同以为，一模一样。都是提供一个Get方法。再次体现了接口抽象的命名标记法。   </p><p>而我们的Heater自然也是集Lazy和Singleton为一体的。这里的CoffeeMaker直接就是一个Lazy，一个代理，暂时不做任何操作。进下一步。</p><p><strong>PumpModule</strong><br>直接调用方法生产数据，因为没有声明为Singleton，则直接new一个就好。其实就是我们平时写的工厂模式的get，不过我们写的时候直接返回一个new值，人家这里帮忙new了，丢进来。没啥大问题。真正的问题又回到了Heater，由于是单例的，必然不能直接new，需要去找持有单例的工厂类拿。而<code>provideHeaterProvider</code>就是前面的<code>DoubleCheck</code>代理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object UNINITIALIZED = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> Provider&lt;T&gt; provider;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> Object instance = UNINITIALIZED;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">DoubleCheck</span><span class="params">(Provider&lt;T&gt; provider)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> provider != <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.provider = provider;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span> <span class="comment">// cast only happens when result comes from the provider</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Object result = instance;</span><br><span class="line">    <span class="keyword">if</span> (result == UNINITIALIZED) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        result = instance;</span><br><span class="line">        <span class="keyword">if</span> (result == UNINITIALIZED) &#123;</span><br><span class="line">          result = provider.get();</span><br><span class="line">          <span class="comment">/* Get the current instance and test to see if the call to provider.get() has resulted</span></span><br><span class="line"><span class="comment">           * in a recursive call.  If it returns the same instance, we&#x27;ll allow it, but if the</span></span><br><span class="line"><span class="comment">           * instances differ, throw. */</span></span><br><span class="line">          Object currentInstance = instance;</span><br><span class="line">          <span class="keyword">if</span> (currentInstance != UNINITIALIZED &amp;&amp; currentInstance != result) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Scoped provider was invoked recursively returning &quot;</span></span><br><span class="line">                + <span class="string">&quot;different results: &quot;</span> + currentInstance + <span class="string">&quot; &amp; &quot;</span> + result + <span class="string">&quot;. This is likely &quot;</span></span><br><span class="line">                + <span class="string">&quot;due to a circular dependency.&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          instance = result;</span><br><span class="line">          <span class="comment">/* Null out the reference to the provider. We are never going to need it again, so we</span></span><br><span class="line"><span class="comment">           * can make it eligible for GC. */</span></span><br><span class="line">          provider = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (T) result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经典的双重检查实现了懒汉单例模式。值得学习的是，这里并没有将null当做初始值，而是给了一个Object。然后把真正的生产数据的功能抽象，提出来称为Provider。这个Provider就是前面提到的真正干事情的工厂<code>DripCoffeeModule_ProvideHeaterFactory</code>。负责new一个instance出来。然后，值得学习的地方来了。因为单例模式已经不再需要工厂了，那么这个工厂类可以回收了。我们自己的编程习惯是扔着不管，请保姆(垃圾收集器)来干活。这里直接设置为null，值得注意，虽然大家都懂但不一定都会这样写。</p><p>至此，全部分析结束。生成的代码不复杂，但抽象度极高，虽然看的容易，但想象出并设计成这样就很难了。百度里一堆自己实现一个DI啥的，说起来简单，DI就是一个工厂模式。但你设计的DI有考虑这么多东西吗。如果没有这么高度的抽象，你如何才能少量的代码实现如此众多高效的功能？是时候学习源码了。</p><h2 id="Lazy-and-Singleton"><a href="#Lazy-and-Singleton" class="headerlink" title="Lazy and Singleton"></a>Lazy and Singleton</h2><p>上面的例子，使用DoubleCheck实现了单例模式的懒汉式。同时，又是懒加载Lazy。让人以为，Lazy和Singleton是一回事。但并不是这样。Lazy的javac注释中有：   </p><blockquote><p>Note that each injected {@code Lazy} is independent, and remembers its value in isolation of other {@code Lazy} instances.     </p></blockquote><p>Lazy是一种延迟加载手段，其实就是在真实instance外面增加了一层包裹，只有当需要调用的时候才会启用<code>get</code>方法创建一个instance。而DoubleCheck同时继承了Provider和Lazy，因此看着像是单例和延迟加载同体了。</p><h2 id="4-SubComponent"><a href="#4-SubComponent" class="headerlink" title="4. SubComponent"></a>4. SubComponent</h2><p>事实上，到这里dagger的用法对于服务端来说已经足够了。通过module的连接特性可以定义IoC容器范围，再结合dropwizard，就和springboot一样了。然而，毕竟dagger2是为了Android而打造的，为了适应其复杂的继承体系和生命周期的限制，dagger提供了SubComponent模型。也就是子组件。</p><p>刚看到这里会好奇，module已经可以把bean提供出来注入了，为啥还需要子组件？</p><p>我并没有真实的在生产环境中使用过dagger，全部认知也就来自对官方文档里的理解。对于Subcomponent的作用，大概有两点: 1)继承扩展功能并绑定生命周期，2）封装。</p><p>继承体现在subcomponent可以使用parent的module，共享其生命周期。</p><p>封装则是因为但其他人都不可以使用subcomponent的依赖，只能使用subcomponent本身。也就是parent里的Component不能调用subcomponent里的module。</p><p>暂时没能理解subcomponent和scope的使用，感觉有些复杂。将在项目中简单使用Module，因为期待得到的DI是最小侵入性的提供inject功能，而考虑这些层次关系以及作用范围，会导致耦合性增强，偏离了最初引入DI的意愿。目前掌握：我需要一个instance，dagger给一个instance给我injec。不需要考虑任何其他问题。</p><h1 id="用法总结"><a href="#用法总结" class="headerlink" title="用法总结"></a>用法总结</h1><ul><li><code>@Component</code>用来标注Component，最外层，the bean could only be exposed</li><li><code>@Module</code>负责管理依赖</li><li>使用<code>@Provides</code>可以提供instance，当无法自动绑定的时候，比如接口和实现类</li><li>使用<code>@Inject</code>可以让IoC容器负责生成instance，如果没有这个注解，dagger将不认识，当做普通类，无法代理</li><li>在使用<code>@Component</code>的时候必须要提供scope范围，标准范围是<code>@Singleton</code></li><li><code>@Component</code>在使用<code>@Module</code>的时候必须匹配相同的scope</li><li>通过<code>@Component.modules</code>或者<code>@Module.includes</code> 可以把依赖连接成一个图，可以互相inject</li><li>能使用Singleton的时候，要注意标注，否则默认多例</li></ul><h1 id="命名规约"><a href="#命名规约" class="headerlink" title="命名规约"></a>命名规约</h1><ul><li>@Provides方法用provide前缀命名</li><li>@Module 用Module后缀命名</li><li>@Component 以Component作为后缀</li></ul><p>此文为官方文档读后感，至于生产环境的应用问题，将在后面使用后补充。<br>&lt;未完待续&gt;</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0519/2892.html">http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0519/2892.html</a></li><li><a href="http://www.cnblogs.com/tiantianbyconan/p/5095426.html">http://www.cnblogs.com/tiantianbyconan/p/5095426.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> DI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术开发中一些名词解释</title>
      <link href="2017/10/22/english-mark/"/>
      <url>2017/10/22/english-mark/</url>
      
        <content type="html"><![CDATA[<p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/tech/mark.png"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>现在还记得第一次面试的时候，被问HTML全称是什么，这才意识到记住全称并不是无理取闹，而是个人对这项技术的理解程度还没到。当你去了解一个技术的时候，名词是首先要掌握的，除非你只是皮毛。</p><a id="more"></a><h1 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h1><table><thead><tr><th>英文</th><th>全称</th><th>desc</th></tr></thead><tbody><tr><td>HTTP</td><td>HyperText Transfer Protocol</td><td>超文本传输协议</td></tr><tr><td>HTML</td><td>HyperTextMark-upLanguage</td><td>超文本标记语言</td></tr><tr><td>API</td><td>Application Programming Interface</td><td>接口</td></tr><tr><td>SQL</td><td>Structured Query Language</td><td>结构化查询语言</td></tr><tr><td>NoSQL</td><td>Not only SQL</td><td>不仅仅是sql</td></tr><tr><td>GUI</td><td>Graphical User Interface</td><td>图形用户界面</td></tr><tr><td>IDE</td><td>Integrated Development Environment</td><td>集成开发环境</td></tr><tr><td>URL</td><td>Uniform Resoure Locator</td><td>统一资源定位符</td></tr></tbody></table><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><table><thead><tr><th>英文</th><th>全称</th><th>desc</th></tr></thead><tbody><tr><td>JDK</td><td>Java Development Kit</td><td>Java开发工具</td></tr><tr><td>JVM</td><td>Java virtual machine</td><td>Java 虚拟机</td></tr><tr><td>GC</td><td>Garbage collection</td><td>垃圾回收</td></tr><tr><td>OO</td><td>Object-oriented</td><td>面向对象</td></tr><tr><td>OOP</td><td>Object-oriented programming</td><td>面向对象编程</td></tr><tr><td>JDBC</td><td>Java database  connectivity</td><td>Java 数据库连接</td></tr><tr><td>JSP</td><td>Java server page</td><td>Java服务端页面</td></tr><tr><td>JIT</td><td>Just in time</td><td>即时编译</td></tr><tr><td>AOP</td><td>Aspect-Oriented Programming</td><td>面向切面编程</td></tr><tr><td>IoC</td><td>Inversion of Control</td><td>控制反转，同DI</td></tr><tr><td>DI</td><td>Dependency Injection</td><td>依赖注入</td></tr><tr><td>POJO</td><td>plain ordinary java object</td><td>简单无规则java对象</td></tr><tr><td>PO</td><td>persistant object</td><td>持久对象</td></tr><tr><td>VO</td><td>value object</td><td>值对象</td></tr><tr><td>DAO</td><td>data access object</td><td>数据访问对象</td></tr><tr><td>DTO</td><td>Data Transfer Object</td><td>数据传输对象</td></tr><tr><td>SOA</td><td>Service Oriented Architecture</td><td>面向服务的设计</td></tr><tr><td>EJB</td><td>Enterprise JavaBean</td><td>企业级Java Bean</td></tr><tr><td>J2EE</td><td>Java 2 Enterprise Edition</td><td>Java2 企业版， 现在称为JEE</td></tr><tr><td>REST</td><td>Resource Representational State Transfer</td><td>资源状态转移,一般不翻译</td></tr></tbody></table><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p><a href="https://wordart.com/create">https://wordart.com/create</a></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 工作流</title>
      <link href="2017/10/18/git-workflow/"/>
      <url>2017/10/18/git-workflow/</url>
      
        <content type="html"><![CDATA[<p><img src="https://camo.githubusercontent.com/c74535a35ba195450eabbfa44a95bc1cc8e89182/68747470733a2f2f7777772e61746c61737369616e2e636f6d2f6769742f696d616765732f7475746f7269616c732f636f6c6c61626f726174696e672f636f6d706172696e672d776f726b666c6f77732f676974666c6f772d776f726b666c6f772f30342e737667"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一直在使用git做版本控制，也一直工作很顺利，直到和别人发生冲突的时候。这才注意到git 工作流并不是那么简单。比如，之前遇到的<a href="http://www.cnblogs.com/woshimrf/p/git-rebase.html">清理历史</a>。百度到的资料很多，重复性也很多，但实践性操作很少，我很难直接理解其所表达的含义。直接望文生义经常得到错误的结论，只能用时间去检验真理了，不然看到的结果都是似懂非懂，最后还是一团糟。</p><a id="more"></a><h1 id="学习git工作流"><a href="#学习git工作流" class="headerlink" title="学习git工作流"></a>学习git工作流</h1><h1 id="1-最简单的使用，不推荐"><a href="#1-最简单的使用，不推荐" class="headerlink" title="1. 最简单的使用，不推荐"></a>1. 最简单的使用，不推荐</h1><h2 id="1-1-创建仓库"><a href="#1-1-创建仓库" class="headerlink" title="1.1.创建仓库"></a>1.1.创建仓库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">&#x2F;home&#x2F;ryan&#x2F;workspace&#x2F;l4git-workflow</span><br><span class="line">$ touch readme.md</span><br><span class="line">$ ls</span><br><span class="line">readme.md</span><br><span class="line">$ touch .gitignore</span><br><span class="line">$ git init</span><br><span class="line">初始化空的 Git 仓库于 &#x2F;home&#x2F;ryan&#x2F;workspace&#x2F;l4git-workflow&#x2F;.git&#x2F;</span><br><span class="line">$ touch test.txt</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;init&quot;</span><br><span class="line">[master （根提交） dae77d6] init</span><br><span class="line"> 3 files changed, 12 insertions(+)</span><br><span class="line"> create mode 100644 .gitignore</span><br><span class="line"> create mode 100644 readme.md</span><br><span class="line"> create mode 100644 test.txt</span><br><span class="line">$ git remote add origin git@github.com:Ryan-Miao&#x2F;l4git-workflow.git</span><br><span class="line">$ git push -u origin master</span><br><span class="line">对象计数中: 5, 完成.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">压缩对象中: 100% (3&#x2F;3), 完成.</span><br><span class="line">写入对象中: 100% (5&#x2F;5), 388 bytes | 0 bytes&#x2F;s, 完成.</span><br><span class="line">Total 5 (delta 0), reused 0 (delta 0)</span><br><span class="line">To git@github.com:Ryan-Miao&#x2F;l4git-workflow.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line">分支 master 设置为跟踪来自 origin 的远程分支 master。</span><br></pre></td></tr></table></figure><p><img src="https://camo.githubusercontent.com/80e8ec5e80b76f403fb19f5d601302655d2f8f6c/68747470733a2f2f7777772e61746c61737369616e2e636f6d2f6769742f696d616765732f7475746f7269616c732f636f6c6c61626f726174696e672f636f6d706172696e672d776f726b666c6f77732f63656e7472616c697a65642d776f726b666c6f772f30312e737667"></p><h2 id="1-2-模拟用户A"><a href="#1-2-模拟用户A" class="headerlink" title="1.2. 模拟用户A"></a>1.2. 模拟用户A</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:Ryan-Miao&#x2F;l4git-workflow.git</span><br><span class="line">git checkout a</span><br><span class="line">touch a.txt</span><br><span class="line">&#x2F;&#x2F;write one</span><br><span class="line">&#x2F;&#x2F;....</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;one&quot;</span><br><span class="line">[a 53ff45e] one</span><br><span class="line"> 2 files changed, 34 insertions(+), 2 deletions(-)</span><br><span class="line"> create mode 100644 a.txt</span><br></pre></td></tr></table></figure><p>此时，a还没有提交到<code>origin</code>。 git log 如下：</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/git/a-one.png"></p><h2 id="1-3-模拟用户B"><a href="#1-3-模拟用户B" class="headerlink" title="1.3. 模拟用户B"></a>1.3. 模拟用户B</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:Ryan-Miao&#x2F;l4git-workflow.git</span><br><span class="line">git checkout b</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch b.txt</span><br></pre></td></tr></table></figure><p>//write something<br>//…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;b write one&quot;</span><br><span class="line">[b 847078e] b write one</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 b.txt</span><br></pre></td></tr></table></figure><p>//write something<br>//….<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;b write two&quot;</span><br><span class="line">[b 3f30f41] b write two</span><br><span class="line"> 1 file changed, 2 insertions(+), 1 deletion(-)</span><br></pre></td></tr></table></figure></p><p>此时，git log如下<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/git/b-two.png"></p><h2 id="1-4-模拟用户A"><a href="#1-4-模拟用户A" class="headerlink" title="1.4. 模拟用户A"></a>1.4. 模拟用户A</h2><p>A和B分别是在本地开发，所以这种顺序是未知的，也许A比B先commit一次，也许B先commit一次。这里的先后是指commit的时间戳。但都是在本地提交的代码。<br>write something</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;a write two&quot;</span><br></pre></td></tr></table></figure><p>wirte something</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;write three&quot;</span><br></pre></td></tr></table></figure><p>A push to server branch <code>a</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin a:a</span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">To git@github.com:Ryan-Miao&#x2F;l4git-workflow.git</span><br><span class="line"> * [new branch]      a -&gt; a</span><br></pre></td></tr></table></figure><p>A created a Pull Request</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/git/a-push.png"><br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/git/a-pr.png"></p><h2 id="1-5-模拟用户C"><a href="#1-5-模拟用户C" class="headerlink" title="1.5. 模拟用户C"></a>1.5. 模拟用户C</h2><p>C review the PR and then merged it.</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/git/c-merge.png"><br>此时，github的历史如下：<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/git/github-a.png"><br>可以看出，merge的时候多了一次commit，message默认为 <code>Merge pull request #1 from Ryan-Miao/a...</code><br>现在看起来，只有a一个人的历史记录，还算清楚，a做了3次提交。</p><h2 id="1-6-模拟用户B"><a href="#1-6-模拟用户B" class="headerlink" title="1.6. 模拟用户B"></a>1.6. 模拟用户B</h2><p>用户B提交前先pull master，更新最新的代码到本地，防止冲突。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br><span class="line">git merge origin&#x2F;master</span><br></pre></td></tr></table></figure><p>此时log看起来有点乱。如下：<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/git/b-merge-master.png"><br>让人感到混乱的是b原来的历史只有自己的提交，更新了master到本地之后，历史记录被插入了master中的历史。于是，发现原来自己干净的历史被中间插入多次commit。甚至两次merge master的日志显得又长又碍眼。但不管怎么说，B还是要提交的。</p><p>于是，B提交到远程分支b：<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/git/b-push.png"></p><h2 id="1-7-模拟用户C"><a href="#1-7-模拟用户C" class="headerlink" title="1.7. 模拟用户C"></a>1.7. 模拟用户C</h2><p>这时候，A完成了feature a，然后提了PR，然后找他人C merge了。而后，B也完成了feature b，提了PR，需要review and merge。 C review之后，approved， 然后D review， D merge。</p><p>此时，项目基本走上正规。feature一个一个添加进去，重复之前的工作流程： fetch -》 work -》 commit -》 push -》 PR -》 merged。<br>然后，项目历史就变成了这样：</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/git/github-log2.png"></p><p>一眼大概看起来还好，每次都能看到提交历史，只要不是message写的特别少，差不多可以理解最近提交的内容。然而，仔细一看，顺序好像不对。目前一共两个feature，但历史却远远超过2个。没关系，保证细粒度更容易体现开发进度。然而，这些历史并不是按照feature的发布顺序，那么，当我想要找到feature a的时候就很难串联起来。如果commit足够多，时间跨度足够大，甚至根本看不出来feature a到底做了哪些修改。</p><p>这时候想要使用图形化git 历史工具来帮助理解历史：<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/git/tu.png"></p><p>这里，还好，还勉强能看出走向。但当10个上百个人同时开发的话，线简直不能看了，时间跨度足够大的话，线也看不完。</p><p>因此，这种模式，正是我们自己当前采用的模式。差评。这还不算完，后面更大的困难来了。最先发布的feature a出了问题，必须回滚。怎么做到。关于<a href="http://www.cnblogs.com/woshimrf/p/5702696.html">回滚</a>，就是另一个话题了。 但我们应该知道使用<code>revert</code>而不是<code>reset</code>. 但revert只能回滚指定的commit，或者连续的commit，而且revert不能revert merge操作。这样，想回滚feature a, 我们就要找到a的几次提交的版本号，然后由于不是连续的，分别revert。这会造成复杂到不想处理了。好在github给了方便的东西，PR提供了revert的机会。找到以前的PR。</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/git/revert.png"></p><p>但是，这绝对不是个好操作！</p><hr><h1 id="2-推荐的工作流程"><a href="#2-推荐的工作流程" class="headerlink" title="2. 推荐的工作流程"></a>2. 推荐的工作流程</h1><p>造成上述现象的原因是因为各自异步编程决定的。因为每个人都可以随时间提交，最后合并起来的时候以提交时间戳来作为序列的依据，就会变成这样。因此，当需要提交的远程服务器的时候，如果能重写下commit的时间为当前时间，然后push到服务端，历史就会序列到最后了。</p><h2 id="2-1-模拟用户C"><a href="#2-1-模拟用户C" class="headerlink" title="2.1 模拟用户C"></a>2.1 模拟用户C</h2><p>C用户新下载代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@github.com:Ryan-Miao&#x2F;l4git-workflow.git c正克隆到 &#39;c&#39;...</span><br><span class="line">remote: Counting objects: 28, done.</span><br><span class="line">remote: Compressing objects: 100% (17&#x2F;17), done.</span><br><span class="line">remote: Total 28 (delta 8), reused 22 (delta 4), pack-reused 0</span><br><span class="line">接收对象中: 100% (28&#x2F;28), 5.90 KiB | 0 bytes&#x2F;s, 完成.</span><br><span class="line">处理 delta 中: 100% (8&#x2F;8), 完成.</span><br><span class="line">检查连接... 完成。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后编辑，提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ cd c</span><br><span class="line">$ git config user.name &quot;C&quot;</span><br><span class="line">$ ls</span><br><span class="line">a.txt  b.txt  readme.md  test.txt</span><br><span class="line">$ vim c.txt</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;C write one&quot;</span><br><span class="line">[master cf3f757] C write one</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 c.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-2-模拟用户D"><a href="#2-2-模拟用户D" class="headerlink" title="2.2 模拟用户D"></a>2.2 模拟用户D</h2><p>同时，D也需要开发新feature</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@github.com:Ryan-Miao&#x2F;l4git-workflow.git d正克隆到 &#39;d&#39;...</span><br><span class="line">remote: Counting objects: 28, done.</span><br><span class="line">remote: Compressing objects: 100% (17&#x2F;17), done.</span><br><span class="line">remote: Total 28 (delta 8), reused 22 (delta 4), pack-reused 0</span><br><span class="line">接收对象中: 100% (28&#x2F;28), 5.90 KiB | 0 bytes&#x2F;s, 完成.</span><br><span class="line">处理 delta 中: 100% (8&#x2F;8), 完成.</span><br><span class="line">检查连接... 完成。</span><br><span class="line">$ cd d</span><br><span class="line">&#x2F;d$ git config user.name &quot;D&quot;</span><br><span class="line">&#x2F;d$ vim d.txt</span><br><span class="line">&#x2F;d$ git add .</span><br><span class="line">&#x2F;d$ git commit -m &quot;d write one&quot;</span><br><span class="line">[master db7a6e9] d write one</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 d.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-3-C继续开发"><a href="#2-3-C继续开发" class="headerlink" title="2.3 C继续开发"></a>2.3 C继续开发</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vim c.txt</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;c write two&quot;</span><br><span class="line">[master 01b1210] c write two</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-4-D继续开发"><a href="#2-4-D继续开发" class="headerlink" title="2.4 D继续开发"></a>2.4 D继续开发</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;d$ vim d.txt</span><br><span class="line">&#x2F;d$ git add .</span><br><span class="line">&#x2F;d$ git commit -m &quot;d write two&quot;</span><br><span class="line">[master a1371e4] d write two</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-5-C-提交"><a href="#2-5-C-提交" class="headerlink" title="2.5 C 提交"></a>2.5 C 提交</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vim c.txt </span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;c write three&quot;</span><br><span class="line">[master 13b7dde] c write three</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>C开发结束，提交到远程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">位于分支 master</span><br><span class="line">您的分支领先 &#39;origin&#x2F;master&#39; 共 3 个提交。</span><br><span class="line">  （使用 &quot;git push&quot; 来发布您的本地提交）</span><br><span class="line">无文件要提交，干净的工作区</span><br><span class="line">$ git push origin master:C</span><br><span class="line">对象计数中: 9, 完成.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">压缩对象中: 100% (6&#x2F;6), 完成.</span><br><span class="line">写入对象中: 100% (9&#x2F;9), 750 bytes | 0 bytes&#x2F;s, 完成.</span><br><span class="line">Total 9 (delta 3), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (3&#x2F;3), completed with 1 local object.</span><br><span class="line">To git@github.com:Ryan-Miao&#x2F;l4git-workflow.git</span><br><span class="line"> * [new branch]      master -&gt; C</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-6-C-提PR"><a href="#2-6-C-提PR" class="headerlink" title="2.6 C 提PR"></a>2.6 C 提PR</h2><p>然后，create a Pull Request.<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/git/c-pr.png"></p><h2 id="2-7-C修改再push"><a href="#2-7-C修改再push" class="headerlink" title="2.7 C修改再push"></a>2.7 C修改再push</h2><p>然后，发现还有个bug要修复，再次修改提交到远程C</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ vim c.txt </span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;C finish something else&quot;</span><br><span class="line">[master 2c5ff94] C finish something else</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line">$ git push origin master:C</span><br><span class="line">对象计数中: 3, 完成.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">压缩对象中: 100% (3&#x2F;3), 完成.</span><br><span class="line">写入对象中: 100% (3&#x2F;3), 301 bytes | 0 bytes&#x2F;s, 完成.</span><br><span class="line">Total 3 (delta 1), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (1&#x2F;1), completed with 1 local object.</span><br><span class="line">To git@github.com:Ryan-Miao&#x2F;l4git-workflow.git</span><br><span class="line">   13b7dde..2c5ff94  master -&gt; C</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-8-C发现提交次数过多，历史太乱，合并部分历史"><a href="#2-8-C发现提交次数过多，历史太乱，合并部分历史" class="headerlink" title="2.8 C发现提交次数过多，历史太乱，合并部分历史"></a>2.8 C发现提交次数过多，历史太乱，合并部分历史</h2><p>这时，发现一个问题，由于C在开发过程中提交了多次，而这几次提交的message其实没有多大意思，只是因为C可能为了保存代码，也可能是暂存。总之，C的前3次提交的message的含义其实是一样的，都是创建C文件，都是一个主题，那么为了维护历史的干净。最好把这3条信息合并成一条<code>C create file c.txt</code>。</p><p>参考<a href="http://www.cnblogs.com/woshimrf/p/git-rebase.html">git 合并历史</a>，我们需要将3次历史合并成显示为一次。</p><p>查看git历史，找到需要合并的起始区间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ git log --oneline</span><br><span class="line">2c5ff94 C finish something else</span><br><span class="line">13b7dde c write three</span><br><span class="line">01b1210 c write two</span><br><span class="line">cf3f757 C write one</span><br><span class="line">7151f4c 记录操作。</span><br><span class="line">0bfe562 Merge pull request #2 from Ryan-Miao&#x2F;b_remote</span><br><span class="line">d81ce20 Merge remote-tracking branch &#39;origin&#x2F;master&#39; into b</span><br><span class="line">2d74cfb Merge pull request #1 from Ryan-Miao&#x2F;a</span><br><span class="line">b90a3dd write three</span><br><span class="line">4b1629e a write two</span><br><span class="line">3f30f41 b write two</span><br><span class="line">847078e b write one</span><br><span class="line">53ff45e one</span><br><span class="line">dae77d6 init</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>显然，是要合并<code>cf3f757</code>到<code>13b7dde</code>。那么找到前一个的版本号为<code>7151f4c</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase - i 7151f4c</span><br></pre></td></tr></table></figure><p>然后进入交互界面，因为我们想要把第3次和第2次以及第1次提交信息合并。将第3次的类型修改为<code>squash</code>, 意思是和第2次合并。然后将第2次的类型修改为<code>squash</code>, 同样是指合并的前一个commit。<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/git/c-rebase-i.png"><br>不同git的交互略有不同，之前在windows上的git bash是完全按照vim的命令修改的。本次测试基于Ubuntu，发现存档命令为<code>ctel + X</code>。确认后进入下一个界面，合并3次提交后需要一个message</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/git/c-rebase-i-2.png"></p><p>删除或者anyway you like， 更改message。存档。完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase -i 7151f4c</span><br><span class="line">[分离头指针 e3764c5] c create  file c.txt</span><br><span class="line"> Date: Fri Oct 20 22:06:24 2017 +0800</span><br><span class="line"> 1 file changed, 4 insertions(+)</span><br><span class="line"> create mode 100644 c.txt</span><br><span class="line">Successfully rebased and updated refs&#x2F;heads&#x2F;master.</span><br></pre></td></tr></table></figure><p><strong>Tips</strong><br>当在rebase过程中出现了失误，可以使用<code>git rebase --abort</code>返回初始状态。如果发现冲突，则可以解决冲突，然后<code>git  rebase --continue</code> . </p><blockquote><p>好像已有 rebase-merge 目录，我怀疑您正处于另外一个变基操作<br>过程中。 如果是这样，请执行<br>   git rebase (–continue | –abort | –skip)<br>如果不是这样，请执行<br>   rm -fr “/home/ryan/temp/c/.git/rebase-merge”<br>然后再重新执行变基操作。 为避免丢失重要数据，我已经停止当前操作。</p></blockquote><p>此时，查看log， 显然，C的那三次提交已经合并了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ git log --oneline</span><br><span class="line">50b9fe9 C finish something else</span><br><span class="line">e3764c5 c create  file c.txt</span><br><span class="line">7151f4c 记录操作。</span><br><span class="line">0bfe562 Merge pull request #2 from Ryan-Miao&#x2F;b_remote</span><br><span class="line">d81ce20 Merge remote-tracking branch &#39;origin&#x2F;master&#39; into b</span><br><span class="line">2d74cfb Merge pull request #1 from Ryan-Miao&#x2F;a</span><br><span class="line">b90a3dd write three</span><br><span class="line">4b1629e a write two</span><br><span class="line">3f30f41 b write two</span><br><span class="line">847078e b write one</span><br><span class="line">53ff45e one</span><br><span class="line">dae77d6 init</span><br></pre></td></tr></table></figure><h2 id="2-9-C再次push"><a href="#2-9-C再次push" class="headerlink" title="2.9 C再次push"></a>2.9 C再次push</h2><p>之前的push已经不能用了。需要开新分之推送过去。因为××rebase 只能在本地分支做。不去修改公共分支××。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master:C</span><br><span class="line">To git@github.com:Ryan-Miao&#x2F;l4git-workflow.git</span><br><span class="line"> ! [rejected]        master -&gt; C (non-fast-forward)</span><br><span class="line">error: 无法推送一些引用到 &#39;git@github.com:Ryan-Miao&#x2F;l4git-workflow.git&#39;</span><br><span class="line">提示：更新被拒绝，因为推送的一个分支的最新提交落后于其对应的远程分支。</span><br><span class="line">提示：检出该分支并整合远程变更（如 &#39;git pull ...&#39;），然后再推送。详见</span><br><span class="line">提示：&#39;git push --help&#39; 中的 &#39;Note about fast-forwards&#39; 小节。</span><br></pre></td></tr></table></figure><p>选择推送的新分支C2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master:C2</span><br><span class="line">对象计数中: 6, 完成.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">压缩对象中: 100% (5&#x2F;5), 完成.</span><br><span class="line">写入对象中: 100% (6&#x2F;6), 569 bytes | 0 bytes&#x2F;s, 完成.</span><br><span class="line">Total 6 (delta 2), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (2&#x2F;2), completed with 1 local object.</span><br><span class="line">To git@github.com:Ryan-Miao&#x2F;l4git-workflow.git</span><br><span class="line"> * [new branch]      master -&gt; C2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建新的PR<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/git/c-new.png"></p><h2 id="2-10-新的merge方式：-rebase"><a href="#2-10-新的merge方式：-rebase" class="headerlink" title="2.10 新的merge方式： rebase"></a>2.10 新的merge方式： rebase</h2><p>通过开始的普通流程发现，每次merge的时候，都会多出一条新的提交信息，这让历史看起来很奇怪。那么，可以选择rebase到master，变基，就是重新以master为基本，把当前的提交直接移动到master的后面。不会因为提交时间的离散导致多次commit的message被拆散。 选择 <code>rebase and merge</code><br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/git/c-merge-rebase.png"></p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/git/c-rebase-merge.png"></p><p>这时候，可以看到C提交的两次信息都是最新的，没有发生交叉。而且也没有产生多余的merge信息。<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/git/c-log-clean.png"></p><p>有人会问，那么岂不是看不到PR的地址了。点开C的历史。可以看到message下方是有PR的编号的：<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/git/c-detail.png"></p><p>对了，刚开始的PR要记得close<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/git/c-pr-close.png"></p><h3 id="2-11-这时候D也完成了"><a href="#2-11-这时候D也完成了" class="headerlink" title="2.11 这时候D也完成了"></a>2.11 这时候D也完成了</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;d$ git push origin master:D</span><br><span class="line">对象计数中: 10, 完成.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">压缩对象中: 100% (7&#x2F;7), 完成.</span><br><span class="line">写入对象中: 100% (10&#x2F;10), 4.49 KiB | 0 bytes&#x2F;s, 完成.</span><br><span class="line">Total 10 (delta 2), reused 4 (delta 1)</span><br><span class="line">remote: Resolving deltas: 100% (2&#x2F;2), completed with 1 local object.</span><br><span class="line">To git@github.com:Ryan-Miao&#x2F;l4git-workflow.git</span><br><span class="line"> * [new branch]      master -&gt; D</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>提PR， 这时候，如果采用merge：<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/git/d-merge.png"></p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/git/d-log.png"></p><p>结果必然发现，1） d提交message被按照时间分散插入历史了(被插入到c的历史之前)， 2）多了一次 <code>Merge pull request #5 from Ryan-Miao/D..</code>的提交信息。同开头所述一样，历史开始变得混乱了。那么，这种问题怎么办呢？</p><h3 id="2-12-提交前rebase"><a href="#2-12-提交前rebase" class="headerlink" title="2.12 提交前rebase"></a>2.12 提交前rebase</h3><p>就像C rebase后merge到master一样。我们一样可以在本地做到这样的事情。在本地rebase，让我们本次feature的提交全部插到master节点之后，有序，而且容易revert。<br>本次，以新的E和F交叉commit为例子，最终将得到各自分开的历史</p><p>E:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@github.com:Ryan-Miao&#x2F;l4git-workflow.git e</span><br><span class="line">正克隆到 &#39;e&#39;...</span><br><span class="line">remote: Counting objects: 52, done.</span><br><span class="line">remote: Compressing objects: 100% (33&#x2F;33), done.</span><br><span class="line">remote: Total 52 (delta 18), reused 36 (delta 7), pack-reused 0</span><br><span class="line">接收对象中: 100% (52&#x2F;52), 7.91 KiB | 0 bytes&#x2F;s, 完成.</span><br><span class="line">处理 delta 中: 100% (18&#x2F;18), 完成.</span><br><span class="line">检查连接... 完成。</span><br><span class="line"></span><br><span class="line">$ cd e</span><br><span class="line">&#x2F;e$ vim e.txt</span><br><span class="line">&#x2F;e$ git add .</span><br><span class="line">&#x2F;e$ git config user.name &quot;E&quot;</span><br><span class="line">&#x2F;e$ git commit -m &quot;e commit one&quot;</span><br><span class="line">[master 77ecd73] e commit one</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 e.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>F:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@github.com:Ryan-Miao&#x2F;l4git-workflow.git f</span><br><span class="line">正克隆到 &#39;f&#39;...</span><br><span class="line">remote: Counting objects: 52, done.</span><br><span class="line">remote: Compressing objects: 100% (33&#x2F;33), done.</span><br><span class="line">remote: Total 52 (delta 18), reused 36 (delta 7), pack-reused 0</span><br><span class="line">接收对象中: 100% (52&#x2F;52), 7.91 KiB | 0 bytes&#x2F;s, 完成.</span><br><span class="line">处理 delta 中: 100% (18&#x2F;18), 完成.</span><br><span class="line">检查连接... 完成。</span><br><span class="line"></span><br><span class="line">$ cd f</span><br><span class="line">$ vim f.txt</span><br><span class="line">$ git config user.name &quot;F&quot;</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;d write one&quot;</span><br><span class="line">[master b41f8c5] d write one</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 f.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>E:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;e$ vim e.txt</span><br><span class="line">&#x2F;e$ git add .</span><br><span class="line">&#x2F;e$ git commit -m &quot;e write two&quot;</span><br><span class="line">[master 2b8c9fb] e write two</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>F:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vim f.txt</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;f write two&quot;</span><br><span class="line">[master de9051b] f write two</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>E:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;e$ vim e.txt </span><br><span class="line">&#x2F;e$ git add .</span><br><span class="line">&#x2F;e$ git commit -m &quot;e write three&quot;</span><br><span class="line">[master b1b9f6e] e write three</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这时候，e完成了，需要提交。提交前先rebase：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;e$ git fetch</span><br><span class="line">&#x2F;e$ git rebase origin&#x2F;master</span><br><span class="line">当前分支 master 是最新的。</span><br></pre></td></tr></table></figure><p>然后，再提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;e$ git push origin master:E</span><br><span class="line">对象计数中: 9, 完成.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">压缩对象中: 100% (6&#x2F;6), 完成.</span><br><span class="line">写入对象中: 100% (9&#x2F;9), 753 bytes | 0 bytes&#x2F;s, 完成.</span><br><span class="line">Total 9 (delta 3), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (3&#x2F;3), completed with 1 local object.</span><br><span class="line">To git@github.com:Ryan-Miao&#x2F;l4git-workflow.git</span><br><span class="line"> * [new branch]      master -&gt; E</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后， PR, merge.</p><p>同样F:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">位于分支 master</span><br><span class="line">您的分支领先 &#39;origin&#x2F;master&#39; 共 2 个提交。</span><br><span class="line">  （使用 &quot;git push&quot; 来发布您的本地提交）</span><br><span class="line">无文件要提交，干净的工作区</span><br><span class="line">$ git fetch </span><br><span class="line">remote: Counting objects: 12, done.</span><br><span class="line">remote: Compressing objects: 100% (6&#x2F;6), done.</span><br><span class="line">remote: Total 12 (delta 6), reused 6 (delta 3), pack-reused 0</span><br><span class="line">展开对象中: 100% (12&#x2F;12), 完成.</span><br><span class="line">来自 github.com:Ryan-Miao&#x2F;l4git-workflow</span><br><span class="line">   24c6818..f36907c  master     -&gt; origin&#x2F;master</span><br><span class="line"> * [新分支]          E          -&gt; origin&#x2F;E</span><br><span class="line">$ git rebase origin&#x2F;master</span><br><span class="line">首先，回退分支以便在上面重放您的工作...</span><br><span class="line">应用：d write one</span><br><span class="line">应用：f write two</span><br><span class="line"></span><br><span class="line">$ git push origin master:F</span><br><span class="line">对象计数中: 6, 完成.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">压缩对象中: 100% (4&#x2F;4), 完成.</span><br><span class="line">写入对象中: 100% (6&#x2F;6), 515 bytes | 0 bytes&#x2F;s, 完成.</span><br><span class="line">Total 6 (delta 2), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (2&#x2F;2), completed with 1 local object.</span><br><span class="line">To git@github.com:Ryan-Miao&#x2F;l4git-workflow.git</span><br><span class="line"> * [new branch]      master -&gt; F</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>PR， rebase and merge。 这时候看history：</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/git/f-rebase.png"></p><p>按照前几次的做法，E和F交叉在本地提交，每次commit的时间戳也是交叉，最终合并到master的时候，历史并没有被拆散。而是像我们期待的一样，顺序下来。这才是我们想要的。通过看图形化界面也能看出区别：</p><p>绿色的线是master<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/git/final.png"></p><p>那么，操作便是fetch-》rebase。事实上，可以二合一为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure><p><img src="https://camo.githubusercontent.com/f1ce447510fcd8c37f0dcb0f677de4896907e607/68747470733a2f2f7777772e61746c61737369616e2e636f6d2f6769742f696d616765732f7475746f7269616c732f636f6c6c61626f726174696e672f636f6d706172696e672d776f726b666c6f77732f63656e7472616c697a65642d776f726b666c6f772f31312e737667"></p><h2 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h2><p>在都没提交到server的时候， 历史是分散在各个开发者的本地，但commit时间有先后。<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/git/start.png"></p><p>按照<code>rebase</code>的用法，提交前<code>rebase</code>一次，就可以使得一个feature的提交串联到一起<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/git/end.png"></p><p>最终在github的commit看起来也就是顺畅的多<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/git/git-end.png"></p><h1 id="金科玉律"><a href="#金科玉律" class="headerlink" title="金科玉律"></a>金科玉律</h1><ol><li>想维持树的整洁，方法就是：在git push之前，先git fetch，再git rebase。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin master</span><br><span class="line">git rebase origin&#x2F;master</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure><blockquote><p>只要你把变基命令当作是在推送前清理提交使之整洁的工具，并且只在从未推送至共用仓库的提交上执行变基命令，就不会有事。 假如在那些已经被推送至共用仓库的提交上执行变基命令，并因此丢弃了一些别人的开发所基于的提交，那你就有大麻烦了，你的同事也会因此鄙视你。</p><p>如果你或你的同事在某些情形下决意要这么做，请一定要通知每个人执行 git pull –rebase 命令，这样尽管不能避免伤痛，但能有所缓解。</p></blockquote><ol><li>绝对不要在公共(远程分支)上rebase，也就是说，如果没有必要就不要在github merge的时候选择rebase，而是用上述的办法，<strong>在本地自己的分之推送前rebase</strong></li><li>绝对不可以在公共分支上reset，也不要用–force</li><li>单独功能的多次提交要学会合并提交，保持提交的简洁。</li><li>提交message尽量能概括修改内容。</li></ol><h1 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h1><ul><li><a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA">https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA</a></li><li><a href="https://github.com/geeeeeeeeek/git-recipes/wiki/3.5-%E5%B8%B8%E8%A7%81%E5%B7%A5%E4%BD%9C%E6%B5%81%E6%AF%94%E8%BE%83">https://github.com/geeeeeeeeek/git-recipes/wiki/3.5-%E5%B8%B8%E8%A7%81%E5%B7%A5%E4%BD%9C%E6%B5%81%E6%AF%94%E8%BE%83</a></li><li><a href="https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2">https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2</a></li><li><a href="https://segmentfault.com/q/1010000000430041">https://segmentfault.com/q/1010000000430041</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu安装java8和java9</title>
      <link href="2017/10/17/Ubuntu-install-java8-java9/"/>
      <url>2017/10/17/Ubuntu-install-java8-java9/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508259667838&di=f80cb07cca635bc859d72a0425502f55&imgtype=0&src=http://cdn1.technicultr.com/hXa7lRHsKC8-U6vs8Sky1FI-AAAAAAAADe0-id5EuNH35cA-How-to-Find-Out-if-Java-is-Installed-in-Ubuntu-and-How-to-Install-It.png"></p><a id="more"></a><h1 id="安装Jave8"><a href="#安装Jave8" class="headerlink" title="安装Jave8"></a>安装Jave8</h1><h2 id="1-导入Webupd8-PPA"><a href="#1-导入Webupd8-PPA" class="headerlink" title="1. 导入Webupd8 PPA"></a>1. 导入Webupd8 PPA</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:webupd8team&#x2F;java</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install oracle-java8-installer</span><br></pre></td></tr></table></figure><p>选择确认条款，用Tab键切换。</p><h2 id="3-设置为默认jdk"><a href="#3-设置为默认jdk" class="headerlink" title="3. 设置为默认jdk"></a>3. 设置为默认jdk</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;sudo update-java-alternatives -s java-8-oracle</span><br><span class="line">sudo apt install oracle-java8-set-default</span><br></pre></td></tr></table></figure><hr><h1 id="安装Java9"><a href="#安装Java9" class="headerlink" title="安装Java9"></a>安装Java9</h1><h2 id="1-导入Webupd8-PPA-1"><a href="#1-导入Webupd8-PPA-1" class="headerlink" title="1. 导入Webupd8 PPA"></a>1. 导入Webupd8 PPA</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository -y ppa:webupd8team&#x2F;java</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h2 id="2-安装-1"><a href="#2-安装-1" class="headerlink" title="2. 安装"></a>2. 安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install oracle-java9-installer</span><br></pre></td></tr></table></figure><p>选择确认条款，用Tab键切换。</p><h2 id="3-设置环境变量"><a href="#3-设置环境变量" class="headerlink" title="3. 设置环境变量"></a>3. 设置环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install oracle-java9-set-default</span><br></pre></td></tr></table></figure><h2 id="4-验证"><a href="#4-验证" class="headerlink" title="4. 验证"></a>4. 验证</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ryan@ryan-900X5L:~$ java -version</span><br><span class="line">java version &quot;9&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 9+181)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 9+181, mixed mode)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google styleguide 之 javaguide</title>
      <link href="2017/10/17/javaguide/"/>
      <url>2017/10/17/javaguide/</url>
      
        <content type="html"><![CDATA[<p>前一阵都在看阿里巴巴Java开发手册，然后看到有人说google的直接放网上了。看了下，发现只是简单的编码规范。</p><p>Google javaguide 地址：<a href="http://google.github.io/styleguide/javaguide.html">http://google.github.io/styleguide/javaguide.html</a></p><p>这里有一份中文的翻译： <a href="http://www.blogjava.net/zh-weir/archive/2014/02/08/409608.html">http://www.blogjava.net/zh-weir/archive/2014/02/08/409608.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Guide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJS 初学之安装配置环境</title>
      <link href="2017/10/15/nodejs-install-environment/"/>
      <url>2017/10/15/nodejs-install-environment/</url>
      
        <content type="html"><![CDATA[<p><img src="http://n1.itc.cn/img8/wb/recom/2016/05/24/146406500262977005.JPEG"></p><a id="more"></a><h1 id="1-环境安装"><a href="#1-环境安装" class="headerlink" title="1.环境安装"></a>1.环境安装</h1><p>操作系统： Ubuntu 16.04.2 LTS</p><h2 id="1-1安装nvm"><a href="#1-1安装nvm" class="headerlink" title="1.1安装nvm"></a>1.1安装nvm</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ryan@ryan-900X5L:~&#x2F;temp$ curl https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;creationix&#x2F;nvm&#x2F;v0.33.4&#x2F;install.sh | bash</span><br></pre></td></tr></table></figure><ul><li>Note <code>v0.33.4</code> is the latest version from <a href="https://github.com/creationix/nvm">creationix/nvm</a></li><li>安装好后，关闭重新打开terminal，输入<code>nvm</code>可以验证是否安装</li><li>安装目录默认是~/.nvm</li></ul><h3 id="使用淘宝镜像"><a href="#使用淘宝镜像" class="headerlink" title="使用淘宝镜像"></a>使用淘宝镜像</h3><p>国内环境，使用淘宝镜像。配置环境变量，修改<code>.bashrc</code>追加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># taobao npm mirror</span><br><span class="line">export NVM_NODEJS_ORG_MIRROR&#x3D;http:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-2-安装node"><a href="#1-2-安装node" class="headerlink" title="1.2 安装node"></a>1.2 安装node</h2><p>安装最新的node</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install node</span><br></pre></td></tr></table></figure><p>或者指定node版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ryan@ryan-900X5L:~$ nvm install 6.11.4</span><br></pre></td></tr></table></figure><p>然后可以检查当前已安装的node版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ryan@ryan-900X5L:~$ nvm ls</span><br><span class="line">    iojs-v3.3.1</span><br><span class="line">-&gt;      v6.11.4</span><br><span class="line">         v8.7.0</span><br><span class="line">default -&gt; node (-&gt; v8.7.0)</span><br><span class="line">node -&gt; stable (-&gt; v8.7.0) (default)</span><br><span class="line">stable -&gt; 8.7 (-&gt; v8.7.0) (default)</span><br><span class="line">iojs -&gt; iojs-v3.3 (-&gt; iojs-v3.3.1) (default)</span><br><span class="line">lts&#x2F;* -&gt; lts&#x2F;boron (-&gt; v6.11.4)</span><br><span class="line">lts&#x2F;argon -&gt; v4.8.4 (-&gt; N&#x2F;A)</span><br><span class="line">lts&#x2F;boron -&gt; v6.11.4</span><br></pre></td></tr></table></figure><p>可以看到箭头指向了 <code>v6.11.4</code>, 现在切换回最新版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ryan@ryan-900X5L:~$ nvm use 8.7.0</span><br></pre></td></tr></table></figure><p>这时候可以查看node版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ryan@ryan-900X5L:~$ node -v</span><br><span class="line">v8.7.0</span><br><span class="line">ryan@ryan-900X5L:~$ npm -v</span><br><span class="line">5.4.2</span><br></pre></td></tr></table></figure><h3 id="安装淘宝镜像"><a href="#安装淘宝镜像" class="headerlink" title="安装淘宝镜像"></a>安装淘宝镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>注意，此时<code>cnpm</code>是安装在当前的npm版本下的。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ryan@ryan-900X5L:~$ nvm use 6.11.4</span><br><span class="line">Now using node v6.11.4 (npm v3.10.10)</span><br><span class="line">ryan@ryan-900X5L:~$ node -v</span><br><span class="line">v6.11.4</span><br><span class="line">ryan@ryan-900X5L:~$ cnpm </span><br><span class="line">未找到 &#39;cnpm&#39; 命令，您要输入的是否是：</span><br><span class="line"> 命令 &#39;cpm&#39; 来自于包 &#39;cpm&#39; (universe)</span><br><span class="line"> 命令 &#39;npm&#39; 来自于包 &#39;npm&#39; (universe)</span><br><span class="line"> 命令 &#39;cxpm&#39; 来自于包 &#39;xpmutils&#39; (universe)</span><br><span class="line">cnpm：未找到命令</span><br><span class="line">ryan@ryan-900X5L:~$ nvm use 8.7.0</span><br><span class="line">Now using node v8.7.0 (npm v5.4.2)</span><br><span class="line">ryan@ryan-900X5L:~$ cnpm -v</span><br><span class="line">cnpm@5.1.1 (&#x2F;home&#x2F;ryan&#x2F;.nvm&#x2F;versions&#x2F;node&#x2F;v8.7.0&#x2F;lib&#x2F;node_modules&#x2F;cnpm&#x2F;lib&#x2F;parse_argv.js)</span><br><span class="line">npm@5.5.1 (&#x2F;home&#x2F;ryan&#x2F;.nvm&#x2F;versions&#x2F;node&#x2F;v8.7.0&#x2F;lib&#x2F;node_modules&#x2F;cnpm&#x2F;node_modules&#x2F;npm&#x2F;lib&#x2F;npm.js)</span><br><span class="line">node@8.7.0 (&#x2F;home&#x2F;ryan&#x2F;.nvm&#x2F;versions&#x2F;node&#x2F;v8.7.0&#x2F;bin&#x2F;node)</span><br><span class="line">npminstall@3.1.4 (&#x2F;home&#x2F;ryan&#x2F;.nvm&#x2F;versions&#x2F;node&#x2F;v8.7.0&#x2F;lib&#x2F;node_modules&#x2F;cnpm&#x2F;node_modules&#x2F;npminstall&#x2F;lib&#x2F;index.js)</span><br><span class="line">prefix&#x3D;&#x2F;home&#x2F;ryan&#x2F;.nvm&#x2F;versions&#x2F;node&#x2F;v8.7.0 </span><br><span class="line">linux x64 4.8.0-58-generic </span><br><span class="line">registry&#x3D;http:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>这种不好的是，更新替换npm需要重新安装cnpm. 于是可以推荐这样做:</p><p>在<code>~/.bashrc</code>中添加alias:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &#39;#alias for cnpm </span><br><span class="line">alias cnpm&#x3D;&quot;npm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org --cache&#x3D;~&#x2F;.npm&#x2F;.cache&#x2F;cnpm --disturl&#x3D;https:&#x2F;&#x2F;npm.taobao.org&#x2F;dist --userconfig&#x3D;~&#x2F;.cnpmrc&quot;&#39; &gt;&gt; ~&#x2F;.bashrc &amp;&amp; source ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure><p>这样，不论npm切换什么版本，cnpm都可以使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ryan@ryan-900X5L:~$ node -v</span><br><span class="line">v8.7.0</span><br><span class="line">ryan@ryan-900X5L:~$ cnpm -v</span><br><span class="line">5.4.2</span><br><span class="line">ryan@ryan-900X5L:~$ nvm ls</span><br><span class="line">    iojs-v3.3.1</span><br><span class="line">        v6.11.4</span><br><span class="line">-&gt;       v8.7.0</span><br><span class="line">default -&gt; node (-&gt; v8.7.0)</span><br><span class="line">node -&gt; stable (-&gt; v8.7.0) (default)</span><br><span class="line">stable -&gt; 8.7 (-&gt; v8.7.0) (default)</span><br><span class="line">iojs -&gt; iojs-v3.3 (-&gt; iojs-v3.3.1) (default)</span><br><span class="line">lts&#x2F;* -&gt; lts&#x2F;boron (-&gt; v6.11.4)</span><br><span class="line">lts&#x2F;argon -&gt; v4.8.4 (-&gt; N&#x2F;A)</span><br><span class="line">lts&#x2F;boron -&gt; v6.11.4</span><br><span class="line">ryan@ryan-900X5L:~$ nvm use 6.11.4</span><br><span class="line">Now using node v6.11.4 (npm v3.10.10)</span><br><span class="line">ryan@ryan-900X5L:~$ cnpm -v</span><br><span class="line">3.10.10</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果把terminal关闭之后，再重新打开发现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ryan@ryan-900X5L:~$ node</span><br><span class="line">程序“node”尚未安装。 您可以使用以下命令安装：</span><br><span class="line">sudo apt install nodejs-legacy</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>什么鬼？没装上？</p><p>如果遇到这个，可以查看当前<code>nvm ls</code>, 发现并没有指定node 版本，这时候，<code>nvm use 6.11.4</code>指定一个版本就可以了。</p><h3 id="安装yarn"><a href="#安装yarn" class="headerlink" title="安装yarn"></a>安装yarn</h3><p>参照 <a href="https://yarnpkg.com/zh-Hans/docs/install">https://yarnpkg.com/zh-Hans/docs/install</a></p><h4 id="设置淘宝镜像"><a href="#设置淘宝镜像" class="headerlink" title="设置淘宝镜像"></a>设置淘宝镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://github.com/alsotang/node-lessons/tree/master/lesson0">https://github.com/alsotang/node-lessons/tree/master/lesson0</a></li><li><a href="https://fengmk2.com/blog/2014/03/node-env-and-faster-npm.html">https://fengmk2.com/blog/2014/03/node-env-and-faster-npm.html</a></li><li><a href="https://github.com/cnpm/nvm">https://github.com/cnpm/nvm</a></li><li><a href="https://npm.taobao.org/">https://npm.taobao.org/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Optional乱用Empty之No value present</title>
      <link href="2017/10/09/optional-empty-exception/"/>
      <url>2017/10/09/optional-empty-exception/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/nlkl/Optional/master/icon/Logo.png"></p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>看到好多文章都是推荐采用Optinal的，而经常我遇到问题的时候就想：如果设计成optional的话就不会忽略这种NullPointException错误了。然而，optional并不是想用就随便用的。今天花了10分钟追踪一个bug，根源就是optional滥用。</p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>API返回失败，没有描述原因。看着蛋疼，因为公开的API不方便返回错误详情。于是查log，发现错误日志的message为：<code>No value present</code>。没搞清楚这个错误信息是哪一层跑出来的。需要进一步跟踪。<code>A=&gt;B=&gt;C=&gt;D</code>，一直追踪到C层才找到问题。</p><p>问题代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> FieldBuilder <span class="title">withSubcategoryId</span><span class="params">(Optional&lt;String&gt; id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id.get();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个创建工厂类，负责创建一个可以使用对象。所有的字段都采用了Opetional的包裹。这个是对象，理应不包含业务逻辑，应该没有错误异常。如果有异常应该显式的<code>throws</code>出来，不然这个非检查性异常将在出现bug的时候难以定位。而这里确实有一个异常没有捕获，而且也不能保证不会发生，甚至就是这里引起的bug:<code>java.util.Optional#get</code>   </p><p>源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * If a value is present in this &#123;<span class="doctag">@code</span> Optional&#125;, returns the value,</span></span><br><span class="line"><span class="comment"> * otherwise throws &#123;<span class="doctag">@code</span> NoSuchElementException&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the non-null value held by this &#123;<span class="doctag">@code</span> Optional&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NoSuchElementException if there is no value present</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Optional#isPresent()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;No value present&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然没有显式的抛出异常，但在javadoc中写清楚了会出现的问题。而我们这些新手则没有认真看文档就想当然的采用了。以为当内容为<code>null</code>的时候get出来的还是<code>null</code>。</p><p>Find Uage找这个Builder的用法发现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> FieldBuilder().withSubcategoryId(Optional.ofNullable(entity.getSubcategoryId()))</span><br></pre></td></tr></table></figure><p>这里直接使用了<code>Optional.OfNullable</code>。然而，我们知道在下一步中会调用get，get的时候回判断是否是<code>null</code>，<code>null</code>会抛出异常。这简直就是自己挖坑，写一个条件抛异常，而传参数又专门去符合这个条件。前面也没有校验，外面也没有捕获异常，最终导致异常直接一路抛出到API外层去了。</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>Optional不要滥用，Optional不是安全的随便用的，Optional用的时候记得捕获异常。</p>]]></content>
      
      
      <categories>
          
          <category> Java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何从两个List中筛选出相同的值</title>
      <link href="2017/09/29/filter-two-list/"/>
      <url>2017/09/29/filter-two-list/</url>
      
        <content type="html"><![CDATA[<p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/list/filter-two-list.png"></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>现有社保卡和身份证若干，想要匹配筛选出一一对应的社保卡和身份证。<br>转换为List&lt;社保卡&gt; socialList,和List<IDcard> idList，从二者中找出匹配的社保卡。</p><a id="more"></a><h1 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h1><p>创建社保卡类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ryan Miao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SocialSecurity</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;<span class="comment">//社保号码</span></span><br><span class="line">    <span class="keyword">private</span> Integer idCard;<span class="comment">//身份证号码</span></span><br><span class="line">    <span class="keyword">private</span> String somethingElse;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SocialSecurity</span><span class="params">(Integer id, Integer idCard, String somethingElse)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.idCard = idCard;</span><br><span class="line">        <span class="keyword">this</span>.somethingElse = somethingElse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getIdCard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> idCard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSomethingElse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> somethingElse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SocialSecurity&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, idCard=&quot;</span> + idCard +</span><br><span class="line">                <span class="string">&quot;, somethingElse=&#x27;&quot;</span> + somethingElse + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建身份证类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IdCard</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;<span class="comment">//身份证号码</span></span><br><span class="line">    <span class="keyword">private</span> String somethingElse;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IdCard</span><span class="params">(Integer id, String somethingElse)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.somethingElse = somethingElse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSomethingElse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> somethingElse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IdCard&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, somethingElse=&#x27;&quot;</span> + somethingElse + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="最简单的办法：遍历"><a href="#最简单的办法：遍历" class="headerlink" title="最简单的办法：遍历"></a>最简单的办法：遍历</h1><p>只要做两轮循环即可。<br>准备初始化数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;SocialSecurity&gt; socialSecurities;</span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;IdCard&gt; idCards;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span></span>&#123;</span><br><span class="line">    socialSecurities = Lists.newArrayList(</span><br><span class="line">            <span class="keyword">new</span> SocialSecurity(<span class="number">1</span>, <span class="number">12</span>, <span class="string">&quot;小明&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> SocialSecurity(<span class="number">2</span>, <span class="number">13</span>, <span class="string">&quot;小红&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> SocialSecurity(<span class="number">3</span>, <span class="number">14</span>, <span class="string">&quot;小王&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> SocialSecurity(<span class="number">4</span>, <span class="number">15</span>, <span class="string">&quot;小peng&quot;</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    idCards = Lists.newArrayList(</span><br><span class="line">            <span class="keyword">new</span> IdCard(<span class="number">14</span>, <span class="string">&quot;xiaopeng&quot;</span>),</span><br><span class="line">    <span class="keyword">new</span> IdCard(<span class="number">13</span>, <span class="string">&quot;xiaohong&quot;</span>),</span><br><span class="line">    <span class="keyword">new</span> IdCard(<span class="number">12</span>, <span class="string">&quot;xiaoming&quot;</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//目标： 从socialSecurities中筛选出idCards中存在的卡片</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFilterForEach</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;SocialSecurity&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (SocialSecurity socialSecurity : socialSecurities) &#123;</span><br><span class="line">        <span class="keyword">for</span> (IdCard idCard : idCards) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (socialSecurity.getIdCard().equals(idCard.getId()))&#123;</span><br><span class="line">                result.add(socialSecurity);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(result);</span><br><span class="line">    System.out.println(count);<span class="comment">//12 = 3 * 4</span></span><br><span class="line">    <span class="comment">//O(m,n) = m*n;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很容易看出，时间复杂度O(m,n)=m*n.</p><h1 id="采用Hash"><a href="#采用Hash" class="headerlink" title="采用Hash"></a>采用Hash</h1><p>通过观察发现，两个list取相同的部分时，每次都遍历两个list。那么，可以把判断条件放入Hash中，判断hash是否存在来代替遍历查找。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFilterHash</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Set&lt;Integer&gt; ids = idCards</span><br><span class="line">            .stream()</span><br><span class="line">            .map(IdCard::getId)</span><br><span class="line">            .collect(Collectors.toSet());</span><br><span class="line">    List&lt;SocialSecurity&gt; result = socialSecurities</span><br><span class="line">            .stream()</span><br><span class="line">            .filter(e-&gt;ids.contains(e.getIdCard()))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    System.out.println(result);</span><br><span class="line">    <span class="comment">//初始化 hash 3</span></span><br><span class="line">    <span class="comment">//遍历socialSecurities 4</span></span><br><span class="line">    <span class="comment">//从hash中判断key是否存在  4</span></span><br><span class="line">    <span class="comment">//O(m,n)=2m+n=11</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此，假设hash算法特别好，hash的时间复杂度为O(n)=n。如此推出这种做法的时间复杂度为O(m,n)=2m+n. 当然，更重要的是这种写法更让人喜欢，天然不喜欢嵌套的判断，喜欢扁平化的风格。</p><h1 id="Hash一定会比遍历快吗"><a href="#Hash一定会比遍历快吗" class="headerlink" title="Hash一定会比遍历快吗"></a>Hash一定会比遍历快吗</h1><p>想当然的以为，hash肯定会比遍历快，因为是hash啊。其实，可以算算比较结果。比较什么时候<code>2m+n &lt; m*n</code>。<br>从数据归纳法的角度，n必须大于2，不然即演变程<code>2m+2 &lt; 2m</code>。于是，当n&gt;2时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCondition</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxN = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">2</span>; m &lt; <span class="number">100</span>; m++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">3</span>; n &lt; <span class="number">100</span>; n++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="number">2</span>*m+n)&gt;m*n)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;m=&quot;</span>+m +<span class="string">&quot;,n=&quot;</span>+n);</span><br><span class="line">                <span class="keyword">if</span> (n&gt;maxN)&#123;</span><br><span class="line">                    maxN = n;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(maxN);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m&#x3D;2,n&#x3D;3</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>也就是说n&lt;=3的时候，遍历要比hash快。事实上还要更快，因为hash还需要创建更多的对象。然而，大部分情况下，n也就是第二个数组的长度是大于3的。这就是为什么说hash要更好写。当然，另一个很重要的原因是lambda stream的运算符号远比嵌套循环让人喜爱。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String的内存模型，为什么String被设计成不可变的</title>
      <link href="2017/09/23/why-string-is-immutable/"/>
      <url>2017/09/23/why-string-is-immutable/</url>
      
        <content type="html"><![CDATA[<p>String是Java中最常用的类，是不可变的(Immutable), 那么String是如何实现Immutable呢，String为什么要设计成不可变呢？</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>关于String,收集一波基础，来源标明最后，不确定是否权威, 希望有问题可以得到纠正。</p><h1 id="0-String的内存模型"><a href="#0-String的内存模型" class="headerlink" title="0. String的内存模型"></a>0. String的内存模型</h1><ul><li>Java8以及以后的字符串新建时，直接在堆中生成对象，而字符创常量池位于Metaspace。必要的时候，会把堆中的指针存入Metaspace, 而不是复制。</li><li>Metaspace位于虚拟机以外的直接内存，因此大小和外部直接内存有关，但也可以通过指定参数设置<code>-XX:MetaspaceSize=8m -XX:MaxMetaspaceSize=8m</code></li></ul><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/string/metaspace.png"></p><h2 id="0-1-一些真实测试，以及某些推测"><a href="#0-1-一些真实测试，以及某些推测" class="headerlink" title="0.1 一些真实测试，以及某些推测"></a>0.1 一些真实测试，以及某些推测</h2><p>很难直接从百度出的中文资料中得到确切的答案，因为大多以讹传讹，未经验证。这里且做测试，先记住，因为很不情愿啃官方文档。</p><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>首先，要有字符串常量池的概念。然后知道String是怎么和常量池打交道的。这里的武器就是<code>intern()</code>,看一下javadoc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a canonical representation for the string object.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * A pool of strings, initially empty, is maintained privately by the</span></span><br><span class="line"><span class="comment">     * class &#123;<span class="doctag">@code</span> String&#125;.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * When the intern method is invoked, if the pool already contains a</span></span><br><span class="line"><span class="comment">     * string equal to this &#123;<span class="doctag">@code</span> String&#125; object as determined by</span></span><br><span class="line"><span class="comment">     * the &#123;<span class="doctag">@link</span> #equals(Object)&#125; method, then the string from the pool is</span></span><br><span class="line"><span class="comment">     * returned. Otherwise, this &#123;<span class="doctag">@code</span> String&#125; object is added to the</span></span><br><span class="line"><span class="comment">     * pool and a reference to this &#123;<span class="doctag">@code</span> String&#125; object is returned.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * It follows that for any two strings &#123;<span class="doctag">@code</span> s&#125; and &#123;<span class="doctag">@code</span> t&#125;,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> s.intern() == t.intern()&#125; is &#123;<span class="doctag">@code</span> true&#125;</span></span><br><span class="line"><span class="comment">     * if and only if &#123;<span class="doctag">@code</span> s.equals(t)&#125; is &#123;<span class="doctag">@code</span> true&#125;.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * All literal strings and string-valued constant expressions are</span></span><br><span class="line"><span class="comment">     * interned. String literals are defined in section 3.10.5 of the</span></span><br><span class="line"><span class="comment">     * &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  a string that has the same contents as this string, but is</span></span><br><span class="line"><span class="comment">     *          guaranteed to be from a pool of unique strings.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">intern</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>即常量池存在，返回常量池中的那个对象，常量池不存在，则放入常量池，并返回本身。由此推断两个公式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str.intern() &#x3D;&#x3D; str &#x2F;&#x2F;证明返回this本身，证明常量池不存在。</span><br><span class="line">str.intern() !&#x3D; str &#x2F;&#x2F;证明返回常量池中已存在的对象，不等于新建的对象。</span><br></pre></td></tr></table></figure><h4 id="这两个公式有什么用"><a href="#这两个公式有什么用" class="headerlink" title="这两个公式有什么用?"></a>这两个公式有什么用?</h4><p>面试题虽然被很多牛人说low(<a href="http://rednaxelafx.iteye.com/blog/774673">请别再拿“String s = new String(“xyz”);创建了多少个String实例”来面试了吧</a>)，但确实经常出现new String以及几个对象之类的问题。而这个问题主要是考察String的内存模型，连带可以引出对Java中对象的内存模型的理解。</p><p>通过判断上述两个公式，我们可以知道对象究竟是新建的，还是来自常量池，如此就可以坦然面对谁等于谁的问题。</p><h4 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h4><ul><li>为了准确表达，这里为伪地址表示指针位置，比如<code>0xab</code>表示”ab”这个对象的地址</li><li>测试基于jdk1.8.0_131.jdk</li><li>操作系统： MacOS 10.12.6</li><li>内存： 16G</li><li>CPU: 2.2 GHz Intel Core i7</li></ul><h4 id="Java-Visual-VM"><a href="#Java-Visual-VM" class="headerlink" title="Java Visual VM"></a>Java Visual VM</h4><p> JDK提供一个可视化内存查看工具<code>jvisualvm</code>。Mac由于安装Java后已经设置了环境变量，所以打开命令行，直接输入<code>jvisualvm</code>, 即可打开。Windows下应该是在bin目录下找到对应的exe文件，双击打开。</p><h4 id="OQL语言"><a href="#OQL语言" class="headerlink" title="OQL语言"></a>OQL语言</h4><p>在Java VisualVM中可以使用OQL来查找对象。具体可以查看<a href="https://blogs.oracle.com/sundararajan/querying-java-heap-with-oql">Oracle博客</a>。百度出来的结果都是摘抄的[深入理解Java虚拟机]这本书附录里的内容。但我表示用来使用行不通。一些用法不一样。简单的归纳一些用的语法。</p><p>查询一个内容为<code>RyanMiao</code>的字符串:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &#123;instance:s&#125; from java.lang.String s where s.toString() &#x3D;&#x3D; &quot;RyanMiao&quot;</span><br></pre></td></tr></table></figure><p>查询前缀为<code>Ryan</code>的字符串:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &#123;instance:s&#125; from java.lang.String s where s.toString().substring(0,4) &#x3D;&#x3D;&quot;Ryan&quot;</span><br></pre></td></tr></table></figure><p>遍历</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">filter(</span><br><span class="line">  sort(</span><br><span class="line">    map(heap.objects(&quot;java.lang.String&quot;),</span><br><span class="line">    function(heapString)&#123;</span><br><span class="line">      if( ! counts[heapString.toString()])&#123;</span><br><span class="line">        counts[heapString.toString()] &#x3D; 1;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        counts[heapString.toString()] &#x3D; counts[heapString.toString()] + 1;</span><br><span class="line">      &#125;</span><br><span class="line">      return &#123; string:heapString.toString(), count:counts[heapString.toString()]&#125;;</span><br><span class="line">    &#125;), </span><br><span class="line">    &#39;lhs.count &lt; rhs.count&#39;),</span><br><span class="line">  function(countObject) &#123;</span><br><span class="line">    if( countObject.string )&#123;</span><br><span class="line">      alreadyReturned[countObject.string] &#x3D; true;</span><br><span class="line">      return true;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      return false;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  );</span><br></pre></td></tr></table></figure><p>没找到匹配前缀的做法，这里使用最笨的遍历</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">filter(</span><br><span class="line">heap.objects(&quot;java.lang.String&quot;),</span><br><span class="line">function(str)&#123;</span><br><span class="line">  if(str !&#x3D; &quot;Ryan&quot; &amp;&amp; str !&#x3D;&quot;Miao&quot; &amp;&amp; str !&#x3D; &quot;RyanMiao&quot;)&#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">  return true;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="0-1-1-通过-创建字符串"><a href="#0-1-1-通过-创建字符串" class="headerlink" title="0.1.1 通过=创建字符串"></a>0.1.1 通过<code>=</code>创建字符串</h3><p>通过<code>=</code>号创建对象，运行时只有一个对象存在。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ryan Miao</span></span><br><span class="line"><span class="comment"> * 等号赋值，注意字面量的存在</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNewStr</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">//str.intern(): 若常量池存在，返回常量池中的对象；若常量池不存在，放入常量池，并返回this。</span></span><br><span class="line">    <span class="comment">//=号赋值，若常量池存在，直接返回常量池中的对象0xs1,如果常量池不存在，则放入常量池，常量池中的对象也是0xs1</span></span><br><span class="line">    String s1 = <span class="string">&quot;RyanMiao&quot;</span>;<span class="comment">//0xs1</span></span><br><span class="line">    Assert.assertTrue(s1.intern() == s1);<span class="comment">//0xs1 == 0xs1  &gt; true</span></span><br><span class="line">    Thread.sleep(<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过Java自带的工具Java VisualVM来查询内存中的String实例，可以看出s1只有一个对象。操作方法如下。</p><p>为了动态查看内存，选择休眠1h，run <code>testNewStr()</code>，然后打开jvisualvm, 可以看到几个vm列表，找到我们的vm，右键heamp dump.<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/string/heapdump.png"></p><p>然后，选择右侧的OQL,在查询内容编辑框里输入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &#123;instance:s&#125; from java.lang.String s where s.toString() == <span class="string">&quot;RyanMiao&quot;</span></span><br></pre></td></tr></table></figure><p>可以发现，只有一个对象。<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/string/string-euqal.png"></p><h3 id="0-1-2-通过new创建字符串"><a href="#0-1-2-通过new创建字符串" class="headerlink" title="0.1.2 通过new创建字符串"></a>0.1.2 通过<code>new</code>创建字符串</h3><p>通过new创建对象时，参数<code>RyanMiao</code>作为字面量会生成一个对象，并存入字符创常量池。而后，new的时候又将创建另一个String对象，所以，最好不要采用这种方式使用String, 不然就是双倍消耗内存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ryan Miao</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 暴露的字面量(literal)也会生成对象，放入Metaspace</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNew</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//new赋值，直接堆中创建0xs2, 常量池中All literal strings and string-valued constant expressions are interned，</span></span><br><span class="line">    <span class="comment">// &quot;RyanMiao&quot;本身就是一个字符串，并放入常量池，故intern()返回0xab</span></span><br><span class="line">    String s2 = <span class="keyword">new</span> String(<span class="string">&quot;RyanMiao&quot;</span>);</span><br><span class="line">    Assert.assertFalse(s2.intern() == s2);<span class="comment">//0xRyanMiao == 0xs2  &gt; false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/string/string-new.png"></p><h3 id="0-1-3-通过拼接创造字符串"><a href="#0-1-3-通过拼接创造字符串" class="headerlink" title="0.1.3 通过拼接创造字符串"></a>0.1.3 通过拼接创造字符串</h3><p>当字符创常量池不存在此对象的的时候，返回本身。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ryan Miao</span></span><br><span class="line"><span class="comment"> * 上栗中，由于字面量(literal)会生成对象，并放入常量池，因此可以直接从常量池中取出(前提是此行代码运行之前没有其他代码运行，常量池是干净的)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 本次，测试非暴露字面量的str</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConcat</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//没有任何字面量为&quot;RyanMiao&quot;暴露给编译器，所以常量池没有创建&quot;RyanMiao&quot;，所以，intern返回this</span></span><br><span class="line">    String s3 = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;Ryan&quot;</span>).append(<span class="string">&quot;Miao&quot;</span>).toString();</span><br><span class="line">    Assert.assertTrue(s3.intern() == s3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Java Visual VM中，查询以”Ryan”开头的变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &#123;instance:s&#125; from java.lang.String s where s.toString().substring(0,4) &#x3D;&#x3D;&quot;Ryan&quot;</span><br></pre></td></tr></table></figure><p>但，根据以上几个例子，可以明显看出来，字符串字面量(literal)都是对象，于是上栗中应该有三个对象:<code>Ryan</code>,<code>Miao</code>,<code>RyanMiao</code>。验证如下：<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/string/ryanmiao.png"></p><p>此时的内存模型：<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/string/string-struct.png"></p><h3 id="0-1-4-针对常量池中已存在的字符串"><a href="#0-1-4-针对常量池中已存在的字符串" class="headerlink" title="0.1.4 针对常量池中已存在的字符串"></a>0.1.4 针对常量池中已存在的字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ryan Miao</span></span><br><span class="line"><span class="comment"> * 上栗中，只要不暴露我们最终的字符串，常量池基本不会存在，则每次新建(new)的时候，都会放入常量池，intern并返回本身。即常量池的对象即新建的对象本身。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 本次，测试某些常量池已存在的字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExist</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//为毛常量池存在java这个单词</span></span><br><span class="line">    <span class="comment">//s4 == 0xs4, intern发现常量池存在，返回0xexistjava</span></span><br><span class="line">    String s4 = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;ja&quot;</span>).append(<span class="string">&quot;va&quot;</span>).toString();</span><br><span class="line">    Assert.assertFalse(s4.intern() == s4);  <span class="comment">//0xexistjava == 0xs4  &gt; false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//int也一开始就存在于常量池中了， intern返回0xexistint</span></span><br><span class="line">    String s5 = <span class="keyword">new</span> StringBuilder().append(<span class="string">&quot;in&quot;</span>).append(<span class="string">&quot;t&quot;</span>).toString();</span><br><span class="line">    Assert.assertFalse(s5.intern()==s5); <span class="comment">// 0xexistint == 0xs5  &gt; false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//由于字面量&quot;abc&quot;加载时，已放入常量池，故s6 intern返回0xexistabc, 而s6是新建的0xs6</span></span><br><span class="line">    String a = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    String s6 = <span class="keyword">new</span> StringBuilder().append(<span class="string">&quot;ab&quot;</span>).append(<span class="string">&quot;c&quot;</span>).toString();</span><br><span class="line">    Assert.assertFalse(s6.intern() == s6);  <span class="comment">//0xexistabc  == 0xs6 &gt; false</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>验证如下:<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/string/existstr.png"></p><p>使用命令行工具<code>javap -c TestString</code>可以反编译class，看到指令执行的过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">% javap -c TestString</span><br><span class="line">Warning: Binary file TestString contains com.test.java.string.TestString</span><br><span class="line">Compiled from <span class="string">&quot;TestString.java&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">test</span>.<span class="title">java</span>.<span class="title">string</span>.<span class="title">TestString</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> com.test.java.string.TestString();</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">       <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNewStr</span><span class="params">()</span> <span class="keyword">throws</span> java.lang.InterruptedException</span>;</span><br><span class="line">    Code:</span><br><span class="line">       0: ldc           #2                  // String RyanMiao</span><br><span class="line">       <span class="number">2</span>: astore_1</span><br><span class="line">       <span class="number">3</span>: aload_1</span><br><span class="line">       4: invokevirtual #3                  // Method java/lang/String.intern:()Ljava/lang/String;</span><br><span class="line">       <span class="number">7</span>: aload_1</span><br><span class="line">       <span class="number">8</span>: if_acmpne     <span class="number">15</span></span><br><span class="line">      <span class="number">11</span>: iconst_1</span><br><span class="line">      <span class="number">12</span>: goto          <span class="number">16</span></span><br><span class="line">      <span class="number">15</span>: iconst_0</span><br><span class="line">      16: invokestatic  #4                  // Method org/junit/Assert.assertTrue:(Z)V</span><br><span class="line">      <span class="number">19</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNew</span><span class="params">()</span> <span class="keyword">throws</span> java.lang.InterruptedException</span>;</span><br><span class="line">    Code:</span><br><span class="line">       0: new           #5                  // class java/lang/String</span><br><span class="line">       <span class="number">3</span>: dup</span><br><span class="line">       4: ldc           #2                  // String RyanMiao</span><br><span class="line">       6: invokespecial #6                  // Method java/lang/String.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span><br><span class="line">       <span class="number">9</span>: astore_1</span><br><span class="line">      <span class="number">10</span>: aload_1</span><br><span class="line">      11: invokevirtual #3                  // Method java/lang/String.intern:()Ljava/lang/String;</span><br><span class="line">      <span class="number">14</span>: aload_1</span><br><span class="line">      <span class="number">15</span>: if_acmpne     <span class="number">22</span></span><br><span class="line">      <span class="number">18</span>: iconst_1</span><br><span class="line">      <span class="number">19</span>: goto          <span class="number">23</span></span><br><span class="line">      <span class="number">22</span>: iconst_0</span><br><span class="line">      23: invokestatic  #7                  // Method org/junit/Assert.assertFalse:(Z)V</span><br><span class="line">      <span class="number">26</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConcat</span><span class="params">()</span> <span class="keyword">throws</span> java.lang.InterruptedException</span>;</span><br><span class="line">    Code:</span><br><span class="line">       0: new           #8                  // class java/lang/StringBuilder</span><br><span class="line">       <span class="number">3</span>: dup</span><br><span class="line">       4: ldc           #9                  // String Ryan</span><br><span class="line">       6: invokespecial #10                 // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span><br><span class="line">       9: ldc           #11                 // String Miao</span><br><span class="line">      11: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">      14: invokevirtual #13                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br><span class="line">      <span class="number">17</span>: astore_1</span><br><span class="line">      <span class="number">18</span>: aload_1</span><br><span class="line">      19: invokevirtual #3                  // Method java/lang/String.intern:()Ljava/lang/String;</span><br><span class="line">      <span class="number">22</span>: aload_1</span><br><span class="line">      <span class="number">23</span>: if_acmpne     <span class="number">30</span></span><br><span class="line">      <span class="number">26</span>: iconst_1</span><br><span class="line">      <span class="number">27</span>: goto          <span class="number">31</span></span><br><span class="line">      <span class="number">30</span>: iconst_0</span><br><span class="line">      31: invokestatic  #4                  // Method org/junit/Assert.assertTrue:(Z)V</span><br><span class="line">      <span class="number">34</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExist</span><span class="params">()</span> <span class="keyword">throws</span> java.lang.InterruptedException</span>;</span><br><span class="line">    Code:</span><br><span class="line">       0: new           #8                  // class java/lang/StringBuilder</span><br><span class="line">       <span class="number">3</span>: dup</span><br><span class="line">       4: ldc           #14                 // String ja</span><br><span class="line">       6: invokespecial #10                 // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span><br><span class="line">       9: ldc           #15                 // String va</span><br><span class="line">      11: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">      14: invokevirtual #13                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br><span class="line">      <span class="number">17</span>: astore_1</span><br><span class="line">      <span class="number">18</span>: aload_1</span><br><span class="line">      19: invokevirtual #3                  // Method java/lang/String.intern:()Ljava/lang/String;</span><br><span class="line">      <span class="number">22</span>: aload_1</span><br><span class="line">      <span class="number">23</span>: if_acmpne     <span class="number">30</span></span><br><span class="line">      <span class="number">26</span>: iconst_1</span><br><span class="line">      <span class="number">27</span>: goto          <span class="number">31</span></span><br><span class="line">      <span class="number">30</span>: iconst_0</span><br><span class="line">      31: invokestatic  #7                  // Method org/junit/Assert.assertFalse:(Z)V</span><br><span class="line">      34: new           #8                  // class java/lang/StringBuilder</span><br><span class="line">      <span class="number">37</span>: dup</span><br><span class="line">      38: invokespecial #16                 // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">      41: ldc           #17                 // String in</span><br><span class="line">      43: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">      46: ldc           #18                 // String t</span><br><span class="line">      48: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">      51: invokevirtual #13                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br><span class="line">      <span class="number">54</span>: astore_2</span><br><span class="line">      <span class="number">55</span>: aload_2</span><br><span class="line">      56: invokevirtual #3                  // Method java/lang/String.intern:()Ljava/lang/String;</span><br><span class="line">      <span class="number">59</span>: aload_2</span><br><span class="line">      <span class="number">60</span>: if_acmpne     <span class="number">67</span></span><br><span class="line">      <span class="number">63</span>: iconst_1</span><br><span class="line">      <span class="number">64</span>: goto          <span class="number">68</span></span><br><span class="line">      <span class="number">67</span>: iconst_0</span><br><span class="line">      68: invokestatic  #7                  // Method org/junit/Assert.assertFalse:(Z)V</span><br><span class="line">      71: ldc           #19                 // String abc</span><br><span class="line">      <span class="number">73</span>: astore_3</span><br><span class="line">      74: new           #8                  // class java/lang/StringBuilder</span><br><span class="line">      <span class="number">77</span>: dup</span><br><span class="line">      78: invokespecial #16                 // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">      81: ldc           #20                 // String ab</span><br><span class="line">      83: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">      86: ldc           #21                 // String c</span><br><span class="line">      88: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">      91: invokevirtual #13                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br><span class="line">      <span class="number">94</span>: astore        <span class="number">4</span></span><br><span class="line">      <span class="number">96</span>: aload         <span class="number">4</span></span><br><span class="line">      98: invokevirtual #3                  // Method java/lang/String.intern:()Ljava/lang/String;</span><br><span class="line">     <span class="number">101</span>: aload         <span class="number">4</span></span><br><span class="line">     <span class="number">103</span>: if_acmpne     <span class="number">110</span></span><br><span class="line">     <span class="number">106</span>: iconst_1</span><br><span class="line">     <span class="number">107</span>: goto          <span class="number">111</span></span><br><span class="line">     <span class="number">110</span>: iconst_0</span><br><span class="line">     111: invokestatic  #7                  // Method org/junit/Assert.assertFalse:(Z)V</span><br><span class="line">     114: ldc2_w        #22                 // long 3600000l</span><br><span class="line">     117: invokestatic  #24                 // Method java/lang/Thread.sleep:(J)V</span><br><span class="line">     <span class="number">120</span>: <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Java在compile的时候优化了执行逻辑"><a href="#Java在compile的时候优化了执行逻辑" class="headerlink" title="Java在compile的时候优化了执行逻辑"></a>Java在compile的时候优化了执行逻辑</h3><p>我以为使用了StringBuilder可以减少性能损耗啊，然而，编译后的文件直接说no，直接给替换成拼接了:<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/string/string-compile.png"></p><h2 id="1-String是如何实现Immutable的？"><a href="#1-String是如何实现Immutable的？" class="headerlink" title="1. String是如何实现Immutable的？"></a>1. String是如何实现Immutable的？</h2><p>Immutable是指String的对象实例生成后就不可以改变。相反，加入一个user类，你可以修改name，那么就不叫做Immutable。所以，String的内部属性必须是不可修改的。</p><h3 id="1-1-私有成员变量"><a href="#1-1-私有成员变量" class="headerlink" title="1.1 私有成员变量"></a>1.1 私有成员变量</h3><p>String的内部很简单，有两个私有成员变量:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** The value is used for character storage. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Cache the hash code for the string */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> hash; <span class="comment">// Default to 0</span></span><br></pre></td></tr></table></figure><p>而后并没有对外提供可以修改这两个属性的方法，没有set，没有build。</p><h3 id="1-2-Public的方法都是复制一份数据"><a href="#1-2-Public的方法都是复制一份数据" class="headerlink" title="1.2 Public的方法都是复制一份数据"></a>1.2 Public的方法都是复制一份数据</h3><p>String有很多public方法，要想维护这么多方法下的不可变需要付出代价。每次都将创建新的String对象。比如，这里讲一个很有迷惑性的concat方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">concat</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> otherLen = str.length();</span><br><span class="line">    <span class="keyword">if</span> (otherLen == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> len = value.length;</span><br><span class="line">    <span class="keyword">char</span> buf[] = Arrays.copyOf(value, len + otherLen);</span><br><span class="line">    str.getChars(buf, len);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(buf, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从方法名上看，是拼接字符串。这样下意识以为是原对象修改了内容，所以对于<code>str2 = str.concat(&quot;abc&quot;)</code>，会认为是<code>str2==str</code>。然后熟记String不可变定律的你肯定会反对。确实不是原对象，确实<code>new</code>了新String。同样的道理，在其他String的public方法里，都将new一个新的String。因此就保证了原对象的不可变。说到这里，下面的结果是什么？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str2 &#x3D; str.concat(&quot;&quot;);</span><br><span class="line">Assert.assertFalse(str2 &#x3D;&#x3D; str);</span><br></pre></td></tr></table></figure><p>按照String不可变的特性来理解，这里str2应该是生成的新对象，那么肯定不等于str.所以是对的，是false。面试考这种题目也是醉了，为了考验大家对String API的熟悉程度吗？看源码才知道，当拼接的内容为空的时候直接返回原对象。因此，str2==str是true。</p><h3 id="1-3-String是final的"><a href="#1-3-String是final的" class="headerlink" title="1.3 String是final的"></a>1.3 String是final的</h3><p>由于String被声明式final的，则我们不可以继承String,因此就不能通过继承来复写一些关于hashcode和value的方法。</p><h2 id="2-String为什么要设计成Immutable"><a href="#2-String为什么要设计成Immutable" class="headerlink" title="2. String为什么要设计成Immutable?"></a>2. String为什么要设计成Immutable?</h2><p>一下内容来自<a href="http://www.kogonuso.com/2015/03/why-string-is-immutable-or-final-class.html#sthash.VgLU1mDY.dpuf">http://www.kogonuso.com/2015/03/why-string-is-immutable-or-final-class.html#sthash.VgLU1mDY.dpuf</a>. 发现百度的中文版本基本也是此文的翻译版。</p><h3 id="缓存的需要"><a href="#缓存的需要" class="headerlink" title="缓存的需要"></a>缓存的需要</h3><p>String是不可变的。因为String会被String pool缓存。因为缓存String字面量要在多个线程之间共享，一个客户端的行为会影响其他所有的客户端，所以会产生风险。如果其中一个客户端修改了内容”Test”为“TEST”, 其他客户端也会得到这个结果，但显然并想要这个结果。因为缓存字符串对性能来说至关重要，因此为了移除这种风险，String被设计成Immutable。</p><h3 id="HashMap的需要"><a href="#HashMap的需要" class="headerlink" title="HashMap的需要"></a>HashMap的需要</h3><p>HashMap在Java里太重要了，而它的key通常是String类型的。如果String是mutable，那么修改属性后，其hashcode也将改变。这样导致在HashMap中找不到原来的value。</p><h3 id="多线程中需要"><a href="#多线程中需要" class="headerlink" title="多线程中需要"></a>多线程中需要</h3><p>string的subString方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (beginIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(beginIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> subLen = value.length - beginIndex;</span><br><span class="line">    <span class="keyword">if</span> (subLen &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(subLen);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (beginIndex == <span class="number">0</span>) ? <span class="keyword">this</span> : <span class="keyword">new</span> String(value, beginIndex, subLen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果String是可变的，即修改String的内容后，地址不变。那么当多个线程同时修改的时候，value的length是不确定的，造成不安全因素，无法得到正确的截取结果。而为了保证顺序正确，需要加<code>synchronzied</code>,但这会得到难以想象的性能问题。</p><h3 id="保证hashcode"><a href="#保证hashcode" class="headerlink" title="保证hashcode"></a>保证hashcode</h3><p>这和上条中HashMap的需要一样，不可变的好处就是hashcode不会变，可以缓存而不用计算。</p><h3 id="classloader中需要"><a href="#classloader中需要" class="headerlink" title="classloader中需要"></a>classloader中需要</h3><blockquote><p>The absolutely most important reason that String is immutable is that it is used by the class loading mechanism, and thus have profound and fundamental security aspects. Had String been mutable, a request to load “java.io.Writer” could have been changed to load “mil.vogoon.DiskErasingWriter”</p></blockquote><p>String会在加载class的时候需要，如果String可变，那么可能会修改加载中的类。</p><p>总之，安全性和String字符串常量池缓存是String被设计成不可变的主要原因。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://stackoverflow.com/questions/3052442/what-is-the-difference-between-text-and-new-stringtext/3052456">https://stackoverflow.com/questions/3052442/what-is-the-difference-between-text-and-new-stringtext/3052456</a></li><li><a href="http://www.kogonuso.com/2015/03/why-string-is-immutable-or-final-class.html#sthash.VgLU1mDY.dpuf">http://www.kogonuso.com/2015/03/why-string-is-immutable-or-final-class.html#sthash.VgLU1mDY.dpuf</a></li><li><a href="http://rednaxelafx.iteye.com/blog/774673">http://rednaxelafx.iteye.com/blog/774673</a></li><li><a href="http://www.jianshu.com/p/4ee6aec39c89?from=groupmessage">http://www.jianshu.com/p/4ee6aec39c89?from=groupmessage</a></li><li><a href="http://www.cnblogs.com/yulei126/p/6777323.html">http://www.cnblogs.com/yulei126/p/6777323.html</a></li><li><a href="https://blogs.oracle.com/sundararajan/querying-java-heap-with-oql">https://blogs.oracle.com/sundararajan/querying-java-heap-with-oql</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在dropwizard中使用feign,使用hystrix</title>
      <link href="2017/09/18/dropwizard-feign/"/>
      <url>2017/09/18/dropwizard-feign/</url>
      
        <content type="html"><![CDATA[<p> <img src="https://camo.githubusercontent.com/e871b5d002a9699e7a2d9fa0178af5c72f0743e0/68747470733a2f2f6e6574666c69782e6769746875622e636f6d2f487973747269782f696d616765732f687973747269782d6c6f676f2d7461676c696e652d3835302e706e67"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>用惯了spring全家桶之后，试试dropwizard的Hello World也别有一帆风味。为了增强对外访问API的能力，需要引入open feign。这里简单在dropwizard中使用feign。</p><a id="more"></a><h2 id="1-什么Dropwizard"><a href="#1-什么Dropwizard" class="headerlink" title="1. 什么Dropwizard"></a>1. 什么Dropwizard</h2><blockquote><p>Dropwizard is a Java framework for developing ops-friendly, high-performance, RESTful web services. </p></blockquote><p><code>Dropwizard</code>使成熟、稳定的java生态系统更加简单、轻量(light-weight), 让你更专注于业务逻辑。</p><p>Dropwizard 为配置(configuration)、统计(application metrics)、日志(logging)、operational tools提供了开箱即用的能力。让您和您的团队能够在最短的时间内开发出具有生产环境的质量的Web服务。</p><p>下面的简介来自<a href="http://www.itnose.net/detail/6497291.html">REST微服务架构之Dropwizard</a></p><p>DropWizard是由Yammer开发团队贡献的一个后台服务开发框架，其集成了Java生态系统中各个问题域中最优秀的组件，帮助开发者快速的打造一个Rest风格的后台服务。 </p><h3 id="对开发者来说，使用DropWizard有如下好处："><a href="#对开发者来说，使用DropWizard有如下好处：" class="headerlink" title="对开发者来说，使用DropWizard有如下好处："></a>对开发者来说，使用DropWizard有如下好处：</h3><p>1、和Maven集成良好，也就是说和Gradle集成也很良好；<br>2、开发迅速，部署简单；<br>3、代码结构好，可读性高；<br>4、自动为服务提供OM框架；<br>5、让开发者自然的把一个应用拆分为一个个的小服务   </p><h3 id="DropWizard结构的Web服务组成"><a href="#DropWizard结构的Web服务组成" class="headerlink" title="DropWizard结构的Web服务组成"></a>DropWizard结构的Web服务组成</h3><p>1、Configuration：用于设置该服务的配置，比方说在服务开放在哪个端口，数据库配置是怎样的等等。<br>2、Application(即Service)：该服务的主入口，定义该服务使用哪个配置文件，开放哪些Resource，该服务需要哪些HealthCheck等等。<br>3、Resource：定义一个资源，包括如何获取该资源，对该资源做Get/Post/Delete/Query时，对应的各种业务逻辑。<br>4、Representation：定义了一个服务返回值对象，当服务返回该对象时，会自动的把该对象按属性值生成一个Json格式的字符串返回给服务调用者。<br>5、HealthCheck：在DropWizard为每个服务提供的OM框架中用到，通过它可以随时检测当前服务是否可用。    </p><h3 id="Dropwizard内置了Jetty"><a href="#Dropwizard内置了Jetty" class="headerlink" title="Dropwizard内置了Jetty"></a>Dropwizard内置了Jetty</h3><p>Web应用程序不能没有HTTP，所以Dropwizard使用Jetty HTTP库将一个令人难以置信的HTTP服务器直接嵌入到您的项目中。 Dropwizard项目不需要将应用程序交给一个复杂的应用程序服务器，而是一个<code>main</code>方法，它会自动连接一个HTTP服务器。将应用程序作为一个简单的过程运行，消除了Java在生产中的一些不好的东西（没有PermGen问题，没有应用程序服务器配置和维护，没有复杂的部署工具，没有类加载器(class loader)故障，没有隐藏的应用程序日志，没有尝试调整一个垃圾收集器来处理多个应用程序工作负载），并允许您使用所有现有的Unix进程管理工具。</p><h3 id="Dropwizard-使用Jersey提供Rest能力"><a href="#Dropwizard-使用Jersey提供Rest能力" class="headerlink" title="Dropwizard 使用Jersey提供Rest能力"></a>Dropwizard 使用Jersey提供Rest能力</h3><h3 id="Dropwizard-使用Jackson来处理json"><a href="#Dropwizard-使用Jackson来处理json" class="headerlink" title="Dropwizard 使用Jackson来处理json"></a>Dropwizard 使用Jackson来处理json</h3><h3 id="Dropwizard-提供了Metrics类库"><a href="#Dropwizard-提供了Metrics类库" class="headerlink" title="Dropwizard 提供了Metrics类库"></a>Dropwizard 提供了<a href="http://metrics.dropwizard.io/3.2.3/">Metrics</a>类库</h3><h2 id="2-Hello-World-For-Dropwizard"><a href="#2-Hello-World-For-Dropwizard" class="headerlink" title="2. Hello World For Dropwizard"></a>2. Hello World For Dropwizard</h2><p>吹完牛逼，开始干活。<br>照例，首先本次测试(<a href="https://github.com/Ryan-Miao/l4dropwizard)%E7%9A%84%E5%AE%8C%E6%95%B4%E7%BB%93%E6%9E%84%E5%9B%BE%E5%A6%82%E4%B8%8B%EF%BC%9A">https://github.com/Ryan-Miao/l4dropwizard)的完整结构图如下：</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── dependency-reduced-pom.xml</span><br><span class="line">├── l4dropwizard.iml</span><br><span class="line">├── pom.xml</span><br><span class="line">├── readme.md</span><br><span class="line">└── src</span><br><span class="line">    └── main</span><br><span class="line">        ├── java</span><br><span class="line">        │   └── com</span><br><span class="line">        │       └── test</span><br><span class="line">        │           ├── HelloWorldApplication.java</span><br><span class="line">        │           ├── configuration</span><br><span class="line">        │           │   ├── HelloWorldConfiguration.java</span><br><span class="line">        │           │   └── modules</span><br><span class="line">        │           │       ├── ConnectAndReadConfig.java</span><br><span class="line">        │           │       └── GithubApiConfig.java</span><br><span class="line">        │           └── domain</span><br><span class="line">        │               ├── connect</span><br><span class="line">        │               │   ├── GithubClient.java</span><br><span class="line">        │               │   └── GithubConnector.java</span><br><span class="line">        │               ├── entiry</span><br><span class="line">        │               │   ├── GithubUser.java</span><br><span class="line">        │               │   └── Saying.java</span><br><span class="line">        │               ├── health</span><br><span class="line">        │               │   └── TemplateHealthCheck.java</span><br><span class="line">        │               └── resource</span><br><span class="line">        │                   ├── GithubResource.java</span><br><span class="line">        │                   └── HelloWorldResource.java</span><br><span class="line">        └── resources</span><br><span class="line">            └── config</span><br><span class="line">                └── dev.yml</span><br><span class="line"></span><br><span class="line">14 directories, 16 files</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-1-添加依赖"><a href="#2-1-添加依赖" class="headerlink" title="2.1 添加依赖"></a>2.1 添加依赖</h3><p>依旧是maven项目，pom中添加dropwizard</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dropwizard.version</span>&gt;</span>1.0.6<span class="tag">&lt;/<span class="name">dropwizard.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.test.HelloWorldApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.dropwizard<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dropwizard-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dropwizard.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-添加配置中心"><a href="#2-2-添加配置中心" class="headerlink" title="2.2 添加配置中心"></a>2.2 添加配置中心</h3><p>dropwizard采用yaml作为配置文件，同时需要有个配置类对应yaml中的属性。<br>创建<code>config/dev.yml</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">template: Hello, %s!</span><br><span class="line">defaultName: Stranger</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">#  softNofileLimit: 1000</span><br><span class="line">#  hardNofileLimit: 1000</span><br><span class="line">  applicationConnectors:</span><br><span class="line">    - type: http</span><br><span class="line">      port: <span class="number">8080</span></span><br><span class="line"></span><br><span class="line">    #this requires the alpn-boot library on the JVM&#x27;s boot classpath</span><br><span class="line">    #- type: h2</span><br><span class="line">    #  port: 8445</span><br><span class="line">    #  keyStorePath: example.keystore</span><br><span class="line">    #  keyStorePassword: example</span><br><span class="line">  adminConnectors:</span><br><span class="line">    - type: http</span><br><span class="line">      port: <span class="number">8082</span></span><br></pre></td></tr></table></figure><p>然后，新建对应的配置类<code>com.test.configuration.HelloWorldConfiguration</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonProperty;</span><br><span class="line"><span class="keyword">import</span> io.dropwizard.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.NotEmpty;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by rmiao on 3/14/2017.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldConfiguration</span> <span class="keyword">extends</span> <span class="title">Configuration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotEmpty</span></span><br><span class="line">    <span class="keyword">private</span> String template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotEmpty</span></span><br><span class="line">    <span class="keyword">private</span> String defaultName = <span class="string">&quot;Stranger&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonProperty</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonProperty</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTemplate</span><span class="params">(String template)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.template = template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonProperty</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDefaultName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> defaultName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonProperty</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDefaultName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.defaultName = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下一步就是启动类：<code>com.test.application.HelloWorldApplication</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.test.domain.health.TemplateHealthCheck;</span><br><span class="line"><span class="keyword">import</span> com.test.domain.resource.HelloWorldResource;</span><br><span class="line"><span class="keyword">import</span> com.test.configuration.HelloWorldConfiguration;</span><br><span class="line"><span class="keyword">import</span> io.dropwizard.Application;</span><br><span class="line"><span class="keyword">import</span> io.dropwizard.setup.Bootstrap;</span><br><span class="line"><span class="keyword">import</span> io.dropwizard.setup.Environment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Ryan Miao on 3/14/2017.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldApplication</span> <span class="keyword">extends</span> <span class="title">Application</span>&lt;<span class="title">HelloWorldConfiguration</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> HelloWorldApplication().run(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello-world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Bootstrap&lt;HelloWorldConfiguration&gt; bootstrap)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// nothing to do yet</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(HelloWorldConfiguration configuration, Environment environment)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> HelloWorldResource resource = <span class="keyword">new</span> HelloWorldResource(</span><br><span class="line">                configuration.getTemplate(),</span><br><span class="line">                configuration.getDefaultName()</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">final</span> TemplateHealthCheck healthCheck =</span><br><span class="line">                <span class="keyword">new</span> TemplateHealthCheck(configuration.getTemplate());</span><br><span class="line">        environment.healthChecks().register(<span class="string">&quot;template&quot;</span>, healthCheck);</span><br><span class="line">        environment.jersey().register(resource);</span><br><span class="line">        environment.jersey().register(healthCheck);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此，配置基本完成，只需要添加接口<code>resource</code>就好。</p><h3 id="2-3-创建第一个API"><a href="#2-3-创建第一个API" class="headerlink" title="2.3 创建第一个API"></a>2.3 创建第一个API</h3><p>对应于springmvc中conroller, dropwizard采用jersey,使用resourc作为接口类：<code>com.test.com.test.resource.HelloWorldResource</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.domain.resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.codahale.metrics.annotation.Timed;</span><br><span class="line"><span class="keyword">import</span> com.test.domain.entiry.Saying;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.GET;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.Path;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.Produces;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.QueryParam;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.core.MediaType;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by rmiao on 3/14/2017.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Path(&quot;/hello-world&quot;)</span></span><br><span class="line"><span class="meta">@Produces(MediaType.APPLICATION_JSON)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldResource</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String template;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String defaultName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicLong counter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloWorldResource</span><span class="params">(String template, String defaultName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.template = template;</span><br><span class="line">        <span class="keyword">this</span>.defaultName = defaultName;</span><br><span class="line">        <span class="keyword">this</span>.counter = <span class="keyword">new</span> AtomicLong();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET</span></span><br><span class="line">    <span class="meta">@Timed</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Saying <span class="title">sayHello</span><span class="params">(<span class="meta">@QueryParam(&quot;name&quot;)</span> Optional&lt;String&gt; name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String value = String.format(template, name.orElse(defaultName));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Saying(counter.incrementAndGet(), value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的template没啥意思，官网用在这里就是为了彰显下读取配置文件的能力: 通过configuration类来操作配置属性。</p><p>另外，需要注意的是，resource并不能像Spring一样自动扫描，需要手动去<code>environment.jersey().register(resource);</code>。</p><h3 id="2-4-启动"><a href="#2-4-启动" class="headerlink" title="2.4 启动"></a>2.4 启动</h3><p>启动前还需要配置fat jar，同Spring-boot一样，fat jar首选. 在pom配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">addDefaultImplementationEntries</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addDefaultImplementationEntries</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">createDependencyReducedPom</span>&gt;</span>true<span class="tag">&lt;/<span class="name">createDependencyReducedPom</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifact</span>&gt;</span>*:*<span class="tag">&lt;/<span class="name">artifact</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.SF<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.DSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.RSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">transformers</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">transformer</span> <span class="attr">implementation</span>=<span class="string">&quot;org.apache.maven.plugins.shade.resource.ServicesResourceTransformer&quot;</span>/&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">transformer</span> <span class="attr">implementation</span>=<span class="string">&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>$&#123;mainClass&#125;<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">transformers</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>exec-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>$&#123;mainClass&#125;<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">arguments</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">argument</span>&gt;</span>server<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">argument</span>&gt;</span>target/classes/config/dev.yml<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">systemProperties</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">systemProperty</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">key</span>&gt;</span>application.name<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">value</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">systemProperty</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">systemProperty</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">key</span>&gt;</span>application.home<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">value</span>&gt;</span>.<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">systemProperty</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">systemProperty</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">key</span>&gt;</span>application.environment<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">value</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">systemProperty</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">systemProperties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来，打包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn package </span><br></pre></td></tr></table></figure><p>然后，run jar:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar target\l4dropwizard-1.0-SNAPSHOT.jar server target&#x2F;classes&#x2F;config&#x2F;dev.yml</span><br></pre></td></tr></table></figure><p>浏览器访问<code>http://localhost:8080/hello-world?name=Ryan</code><br>将得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: 1,</span><br><span class="line">    &quot;content&quot;: &quot;Hello, Ryan!&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，hello world完成。</p><h2 id="什么是Feign"><a href="#什么是Feign" class="headerlink" title="什么是Feign"></a>什么是Feign</h2><p>Feign是一个网络请求客户端，简化了网络请求代码，使得我们可以采用更加友好的方式发送请求，并且管理请求。Feign采用注解驱动模板，所以目前只支持text-based apis.</p><h2 id="Dropwizard-with-Feign"><a href="#Dropwizard-with-Feign" class="headerlink" title="Dropwizard with Feign"></a>Dropwizard with Feign</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>首先，添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;feign.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;feign.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;feign.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-jackson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;feign.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;feign.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.reactivex<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rxjava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>Feign的配置主要有三个，一个是<code>isolation.thread</code>线程存活时间。一个是<code>connectTimeoutMillis</code>连接超时，一个是<code>readTimeoutMillis</code>。</p><p>本次测试将采用github的公共API，获取用户信息。首先配置线程存活时间。在dev.yml中添加:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hystrixConfig:</span></span><br><span class="line">  <span class="string">hystrix.command.GithubConnector#getUserProfile(String).execution.isolation.thread.timeoutInMilliseconds:</span> <span class="number">7000</span></span><br></pre></td></tr></table></figure><p>然后是两个超时配置:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">githubApiConfig:</span></span><br><span class="line">  <span class="attr">baseUrl:</span> <span class="string">&quot;https://api.github.com&quot;</span></span><br><span class="line">  <span class="attr">getUserProfile:</span></span><br><span class="line">    <span class="attr">connectTimeoutMillis:</span> <span class="number">2000</span></span><br><span class="line">    <span class="attr">readTimeoutMillis:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure><p>Dropwizard通过配置类和配置文件绑定的方式获取配置内容。因此，需要对应的在配置类中创建对应的字段。<br>com.test.configuration.modules.ConnectAndReadConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.configuration.modules;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Ryan Miao on 9/14/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectAndReadConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> connectTimeoutMillis;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> readTimeoutMillis;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getConnectTimeoutMillis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> connectTimeoutMillis;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getReadTimeoutMillis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> readTimeoutMillis;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>com.test.configuration.modules.GithubApiConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.configuration.modules;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Ryan Miao on 9/14/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GithubApiConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String baseUrl;</span><br><span class="line">    <span class="keyword">private</span> ConnectAndReadConfig getUserProfile;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBaseUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConnectAndReadConfig <span class="title">getGetUserProfile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getUserProfile;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在com.test.configuration.HelloWorldConfiguration中添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NotEmpty</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, Object&gt; hystrixConfig;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="keyword">private</span> GithubApiConfig githubApiConfig;</span><br></pre></td></tr></table></figure><p>然后在application中配置好hystrix的配置:<br>在HelloWorldApplication#run方法中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;init hystrix config</span><br><span class="line">Map&lt;String, Object&gt; hystrixConfig &#x3D; configuration.getHystrixConfig();</span><br><span class="line">for (final Map.Entry&lt;String, Object&gt; config : hystrixConfig.entrySet()) &#123;</span><br><span class="line">    ConfigurationManager.getConfigInstance().setProperty(config.getKey(), config.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建Feign的connector接口"><a href="#创建Feign的connector接口" class="headerlink" title="创建Feign的connector接口"></a>创建Feign的connector接口</h3><p>创建接口com.test.domain.connect.GithubConnector:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.domain.connect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.test.domain.entiry.GithubUser;</span><br><span class="line"><span class="keyword">import</span> feign.Headers;</span><br><span class="line"><span class="keyword">import</span> feign.Param;</span><br><span class="line"><span class="keyword">import</span> feign.RequestLine;</span><br><span class="line"><span class="keyword">import</span> rx.Observable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by ryan on 9/14/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GithubConnector</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestLine(&quot;GET /users/&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Headers(&#123;&quot;Accept: application/vnd.github.v3+json&quot;&#125;)</span></span><br><span class="line">    <span class="function">Observable&lt;GithubUser&gt; <span class="title">getUserProfile</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建调用客户端"><a href="#创建调用客户端" class="headerlink" title="创建调用客户端"></a>创建调用客户端</h3><p>创建客户端com.test.domain.connect.GithubClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.domain.connect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.test.configuration.modules.ConnectAndReadConfig;</span><br><span class="line"><span class="keyword">import</span> com.test.configuration.modules.GithubApiConfig;</span><br><span class="line"><span class="keyword">import</span> com.test.domain.entiry.GithubUser;</span><br><span class="line"><span class="keyword">import</span> feign.Request;</span><br><span class="line"><span class="keyword">import</span> feign.Response;</span><br><span class="line"><span class="keyword">import</span> feign.gson.GsonDecoder;</span><br><span class="line"><span class="keyword">import</span> feign.gson.GsonEncoder;</span><br><span class="line"><span class="keyword">import</span> feign.hystrix.HystrixFeign;</span><br><span class="line"><span class="keyword">import</span> feign.slf4j.Slf4jLogger;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> rx.Observable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Ryan Miao on 9/14/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GithubClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(GithubClient.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> GithubApiConfig githubApiConfig;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GithubClient</span><span class="params">(GithubApiConfig githubApiConfig)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.githubApiConfig = githubApiConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;GithubUser&gt; <span class="title">getUserProfile</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        String baseUrl = githubApiConfig.getBaseUrl();</span><br><span class="line">        ConnectAndReadConfig getUserProfile = githubApiConfig.getGetUserProfile();</span><br><span class="line">        GithubConnector connector = HystrixFeign.builder()</span><br><span class="line">                .decoder(<span class="keyword">new</span> GsonDecoder())</span><br><span class="line">                .encoder(<span class="keyword">new</span> GsonEncoder())</span><br><span class="line">                .logger(<span class="keyword">new</span> Slf4jLogger())</span><br><span class="line">                .options(<span class="keyword">new</span> Request.Options(getUserProfile.getConnectTimeoutMillis(), getUserProfile.getReadTimeoutMillis()))</span><br><span class="line">                .errorDecoder((methodKey, response) -&gt; &#123;</span><br><span class="line">                    StringBuilder msg = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;status=&quot;</span>).append(response.status())</span><br><span class="line">                            .append(<span class="string">&quot;;request_headers=&quot;</span>).append(response.request().headers())</span><br><span class="line">                            .append(<span class="string">&quot;;response_headers=&quot;</span>).append(response.headers())</span><br><span class="line">                            .append(<span class="string">&quot;;body=&quot;</span>);</span><br><span class="line">                    Response.Body body = response.body();</span><br><span class="line">                    <span class="keyword">if</span> (body != <span class="keyword">null</span> &amp;&amp; body.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            msg.append(IOUtils.toString(body.asReader()));</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            msg.append(<span class="string">&quot;can not read body,&quot;</span>+e.getMessage());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> RuntimeException(msg.toString());</span><br><span class="line">                &#125;)</span><br><span class="line">                .requestInterceptor(template -&gt; template.header(<span class="string">&quot;requestId&quot;</span>, UUID.randomUUID().toString()))</span><br><span class="line">                .target(GithubConnector.class, baseUrl);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> connector.getUserProfile(username).onErrorReturn(error -&gt; &#123;</span><br><span class="line">            LOGGER.error(<span class="string">&quot;Get github user profile failed. &quot;</span>, error);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建一个接口测试"><a href="#创建一个接口测试" class="headerlink" title="创建一个接口测试"></a>创建一个接口测试</h3><p>最后，创建一个接口来测试下：<br>com.test.domain.resource.GithubResource</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.domain.resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.codahale.metrics.annotation.Timed;</span><br><span class="line"><span class="keyword">import</span> com.test.configuration.modules.GithubApiConfig;</span><br><span class="line"><span class="keyword">import</span> com.test.domain.connect.GithubClient;</span><br><span class="line"><span class="keyword">import</span> com.test.domain.entiry.GithubUser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.GET;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.Path;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.PathParam;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.Produces;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.core.MediaType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Ryan Miao on 9/14/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Path(&quot;/github&quot;)</span></span><br><span class="line"><span class="meta">@Produces(MediaType.APPLICATION_JSON)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GithubResource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> GithubApiConfig githubApiConfig;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GithubResource</span><span class="params">(GithubApiConfig githubApiConfig)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.githubApiConfig = githubApiConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET</span></span><br><span class="line">    <span class="meta">@Timed</span></span><br><span class="line">    <span class="meta">@Path(&quot;/users/&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GithubUser <span class="title">getUserProfile</span><span class="params">(<span class="meta">@PathParam(&quot;username&quot;)</span> <span class="keyword">final</span> String username)</span></span>&#123;</span><br><span class="line">        GithubClient client = <span class="keyword">new</span> GithubClient(githubApiConfig);</span><br><span class="line">        <span class="keyword">return</span> client.getUserProfile(username).toBlocking().first();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>run main方法启动。访问<code>localhost:8080/github/users/Ryan-Miao</code>就可以得到我的github信息了：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;login&quot;</span>: <span class="string">&quot;Ryan-Miao&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">11866078</span>,</span><br><span class="line">    <span class="attr">&quot;avatar_url&quot;</span>: <span class="string">&quot;https://avatars3.githubusercontent.com/u/11866078?v=4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://api.github.com/users/Ryan-Miao&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Ryan Miao&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;email&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;location&quot;</span>: <span class="string">&quot;中国深圳&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;blog&quot;</span>: <span class="string">&quot;https://ryan-miao.github.io/&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，feign的简单集成就搞定了。</p><h3 id="一些注意事项"><a href="#一些注意事项" class="headerlink" title="一些注意事项"></a>一些注意事项</h3><p>feign采用hystrix的配置的时候，grop key是baseUrl.上栗中，grop Key为<code>https://api.github.com</code>， commandKey为接口+方法和参数，上栗中为<code>GithubConnector#getUserProfile(String)</code>。因此，配置线程超时用了commandKey如上。如果要配置coreSize之类的，必须使用url做为group key了。</p><h2 id="source"><a href="#source" class="headerlink" title="source"></a>source</h2><p><a href="https://github.com/Ryan-Miao/l4dropwizard">https://github.com/Ryan-Miao/l4dropwizard</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://www.dropwizard.io/1.1.4/docs/index.html">http://www.dropwizard.io/1.1.4/docs/index.html</a></li><li><a href="http://metrics.dropwizard.io/3.2.3/">http://metrics.dropwizard.io/3.2.3/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Dropwiard </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dropwizard </tag>
            
            <tag> Feign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中ArrayList remove会遇到的坑</title>
      <link href="2017/09/12/Java-ArrayList-remove/"/>
      <url>2017/09/12/Java-ArrayList-remove/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>平时最常用的莫过于<code>ArrayList</code>和<code>HashMap</code>了，面试的时候也是问答的常客。先不去管容量、负载因子什么的，就是简单的使用也会遇到坑。</p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/array.jpg"></p><a id="more"></a><h2 id="Remove-元素"><a href="#Remove-元素" class="headerlink" title="Remove 元素"></a>Remove 元素</h2><p>经常遇到的一个场景是：遍历list, 然后找到合适条件的给删除掉，比如删除所有的偶数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRemove2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Integer&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">5</span>);</span><br><span class="line">    integers.add(<span class="number">1</span>);</span><br><span class="line">    integers.add(<span class="number">2</span>);</span><br><span class="line">    integers.add(<span class="number">2</span>);</span><br><span class="line">    integers.add(<span class="number">4</span>);</span><br><span class="line">    integers.add(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; integers.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (integers.get(i)%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            integers.remove(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(integers);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起来好像没问题，加入面试的时候当面问：输出结果是什么？再问真不会报错吗？再问结果是什么？</p><ul><li>报错</li><li>结果是空list</li><li>结果是[1, 2, 5]</li></ul><h3 id="List-remove-有两个，一个-public-E-remove-int-index-，一个是public-boolean-remove-Object-o-，那下面的结果是什么："><a href="#List-remove-有两个，一个-public-E-remove-int-index-，一个是public-boolean-remove-Object-o-，那下面的结果是什么：" class="headerlink" title="List.remove()有两个，一个 public E remove(int index)，一个是public boolean remove(Object o) ，那下面的结果是什么："></a>List.remove()有两个，一个<code> public E remove(int index)</code>，一个是<code>public boolean remove(Object o) </code>，那下面的结果是什么：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRemove</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; integers = Lists.newArrayList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    System.out.println(integers);</span><br><span class="line">    integers.remove(<span class="number">1</span>);</span><br><span class="line">    System.out.println(integers);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>[1, 3, 4]</li></ul><h3 id="经常会使用一个Arrays-asList的API-那么下面的结果是什么："><a href="#经常会使用一个Arrays-asList的API-那么下面的结果是什么：" class="headerlink" title="经常会使用一个Arrays.asList的API, 那么下面的结果是什么："></a>经常会使用一个Arrays.asList的API, 那么下面的结果是什么：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRemove3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>报错： java.lang.UnsupportedOperationException</li></ul><h3 id="使用foreach是否可以实现刚开始的问题"><a href="#使用foreach是否可以实现刚开始的问题" class="headerlink" title="使用foreach是否可以实现刚开始的问题"></a>使用foreach是否可以实现刚开始的问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRemove4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; strings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    strings.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    strings.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">    strings.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">    strings.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line">        strings.remove(string);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>否，报错java.util.ConcurrentModificationException</li></ul><h3 id="为了性能问题，我们推荐把list-size的计算提取出来"><a href="#为了性能问题，我们推荐把list-size的计算提取出来" class="headerlink" title="为了性能问题，我们推荐把list.size的计算提取出来"></a>为了性能问题，我们推荐把list.size的计算提取出来</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRemove5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; strings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    strings.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    strings.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">    strings.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">    strings.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> size = strings.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        strings.remove(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>报错： java.lang.IndexOutOfBoundsException: Index: 2, Size: 2</li><li>这是很好的习惯， 不像开头那样每次循环都计算一次size，而且按这种情况还可以再运行的时候报错。文初的做法不报错，但结果并不是我们想要的。</li></ul><h3 id="使用Iterator是不是就可以remove了"><a href="#使用Iterator是不是就可以remove了" class="headerlink" title="使用Iterator是不是就可以remove了"></a>使用Iterator是不是就可以remove了</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRemove6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; strings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    strings.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    strings.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">    strings.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">    strings.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Iterator&lt;String&gt; iterator = strings.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">        String next = iterator.next();</span><br><span class="line">        strings.remove(next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(strings);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>报错： java.util.ConcurrentModificationException</li></ul><h3 id="正确的remove做法是什么"><a href="#正确的remove做法是什么" class="headerlink" title="正确的remove做法是什么"></a>正确的remove做法是什么</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRemove7</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; strings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    strings.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    strings.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">    strings.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">    strings.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Iterator&lt;String&gt; iterator = strings.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">        String next = iterator.next();</span><br><span class="line">        iterator.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(strings);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> ArrayList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>照着官方文档学习react-基础</title>
      <link href="2017/08/03/react-tutorial-1/"/>
      <url>2017/08/03/react-tutorial-1/</url>
      
        <content type="html"><![CDATA[<p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/react.jpg"></p><a id="more"></a><h1 id="笨人学习法"><a href="#笨人学习法" class="headerlink" title="笨人学习法"></a>笨人学习法</h1><p>10000个小时策略来学习，因为笨。先照着官方文档敲一遍，写一遍。</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>先要准备环境。搭建一个基于webpack的react环境：<a href="http://ryan-miao.oschina.io/2017/08/01/hello-react-js/">Hello ReactJS</a>.</p><h1 id="一些要点"><a href="#一些要点" class="headerlink" title="一些要点"></a>一些要点</h1><p>我在想是否应该完整的记录照抄的过程呢。毕竟已经开始一段，前面的要不要补上？回头看以前写过的angularJS的博客，现在完全不会了，太久没用了。所以，还是记录基础以及关注的问题就好。</p><h2 id="1-1-基本格式"><a href="#1-1-基本格式" class="headerlink" title="1.1 基本格式"></a>1.1 基本格式</h2><p>react的模板文件后缀结尾为<code>.jsx</code>。  </p><p>react可以采用html标签拼接的方式定义一个元素。比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><p>假设页面有个div:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么，reactJS可以这样渲染页面：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  element,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>需要引入<code>react-dom</code>.</li><li><code>element</code>变量就是一个react的元素，一个组件，一个component.</li><li>通过<code>ReactDOM.render(reactElement, domElement)</code>来渲染页面</li></ul><h2 id="1-1-变量"><a href="#1-1-变量" class="headerlink" title="1.1 变量"></a>1.1 变量</h2><p>react可以使用一对大括号来包裹变量，与html拼接：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> element = (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;Hello, world!&lt;/h1&gt;</span><br><span class="line">      &lt;h2&gt;It is &#123;<span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString()&#125;.&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">  ReactDOM.render(</span><br><span class="line">    element,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;clock&#x27;</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(tick, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><ul><li>大括号里的代码是js代码   </li><li>element是一个react组件：component。可以看成由<code>div</code>和<code>h1</code>,<code>h2</code>拼接的匿名组件。</li></ul><p>下面实践以上的代码。首先，由于采用单个元素测试，需要修改上次搭建好的环境。</p><p><strong>修改webpack.config.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> module.exports = &#123;</span><br><span class="line"><span class="deletion">-    entry: &#x27;./app/index.js&#x27;,</span></span><br><span class="line"><span class="addition">+    entry: &#123;</span></span><br><span class="line"><span class="addition">+        app: &#x27;./app/index.js&#x27;,</span></span><br><span class="line"><span class="addition">+        clock: &#x27;./app/components/step1-element.jsx&#x27;</span></span><br><span class="line"><span class="addition">+    &#125;,</span></span><br><span class="line">     output: &#123;</span><br><span class="line">         path: path.resolve(__dirname, &#x27;dist&#x27;),</span><br><span class="line"><span class="deletion">-        filename: &#x27;index_bundle.js&#x27;</span></span><br><span class="line"><span class="addition">+        filename: &#x27;[name].bundle.js&#x27;,</span></span><br><span class="line">     &#125;,</span><br></pre></td></tr></table></figure><p>意思是可以渲染多个打包后的js文件。分别定义entry就是需要单独打包的js。在filename就会根据entry的key来生成打包后的文件名。</p><h3 id="1-1-1-构建第一个react-component"><a href="#1-1-1-构建第一个react-component" class="headerlink" title="1.1.1 构建第一个react component"></a>1.1.1 构建第一个react component</h3><p> 创建app/components/step1-element.jsx<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Clock</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;Step1, learn element and variable.&lt;/h1&gt;</span><br><span class="line">            &lt;h2&gt;It is &#123;props.date.toLocaleTimeString()&#125;.&lt;/h2&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Clock</span> <span class="attr">date</span>=<span class="string">&#123;new</span> <span class="attr">Date</span>()&#125; /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;clock&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setInterval</span>(tick, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></p><ul><li>function <code>Clock</code>就是一个react component，和前面的<code>element</code>一样，都是react组件.</li><li>react component可以写成html标签的方式，但要求方法名必须大写，也即标签名必须大写。<code>&lt;Clock date=&#123;new Date()&#125;/&gt;</code>就是组件的用法。</li><li>组件<code>Clock</code>接收一个参数对象<code>props</code>，<code>props</code>的属性可以通过标签上的变量来赋值。比如<code>date</code>就通过标签传入到function <code>Clock</code>里了。由此，像<code>&lt;div&gt;</code>这种拼接的标签肯定也是有function的，不过react库已经写好了。</li><li>react component必须有返回值，返回一段html代码，用圆括号包裹</li><li>html标签与js变量可以通过一对大括号的方式拼接起来</li></ul><p> 修改app/index.html.添加一个我们用来测试div节点。这里主要用于<code>clock</code><br> <figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div id=&quot;root&quot;&gt;           </span><br><span class="line">                           </span><br><span class="line"> &lt;/div&gt;                    </span><br><span class="line"><span class="addition">+                          </span></span><br><span class="line"><span class="addition">+                          </span></span><br><span class="line"><span class="addition">+&lt;div id=&quot;content&quot;&gt;        </span></span><br><span class="line"><span class="addition">+    &lt;div id=&quot;clock&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="addition">+&lt;/div&gt;                    </span></span><br><span class="line"> &lt;/body&gt;                   </span><br><span class="line"> &lt;/html&gt;                   </span><br></pre></td></tr></table></figure></p><p> 然后，运行<code>yarn build</code>。编译后的dist目录如下：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> |____dist</span><br><span class="line">| |____app.bundle.js</span><br><span class="line">| |____clock.bundle.js</span><br><span class="line">| |____index.html</span><br><span class="line">| |____index_bundle.js</span><br></pre></td></tr></table></figure><br> 可以看到定义的两个js都已经生成。而且index.html中也插入：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;React App&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;root&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;content&quot;&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;clock&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;app.bundle.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;clock.bundle.js&quot;&gt;&lt;&#x2F;script&gt;&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><br> 但发现还多了个<code>index_bundle.js</code>，这是我们上一步生成。在本次构建中并没有自动移除。想要自动移除怎么办？</p><p> 添加webpack plugin: clean-webpack-plugin<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add clean-webpack-plugin</span><br></pre></td></tr></table></figure><br> 修改webpack.config.js<br> <figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> const path = require(&#x27;path&#x27;);</span><br><span class="line">const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><span class="line"><span class="addition">+ const CleanWebpackPlugin = require(&#x27;clean-webpack-plugin&#x27;);</span></span><br><span class="line"></span><br><span class="line">const HtmlWebpackPluginConfig = new HtmlWebpackPlugin(&#123;</span><br><span class="line">    template: &#x27;./app/index.html&#x27;,</span><br><span class="line">    filename: &#x27;index.html&#x27;,</span><br><span class="line">    inject: &#x27;body&#x27;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: &#x27;./app/index.js&#x27;,</span><br><span class="line">        clock: &#x27;./app/components/step1-element.jsx&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, &#x27;dist&#x27;),</span><br><span class="line">        filename: &#x27;[name].bundle.js&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        loaders: [</span><br><span class="line">            &#123; test: /\.js$/, loader: &#x27;babel-loader&#x27;, exclude: /node_modules/ &#125;,</span><br><span class="line">            &#123; test: /\.jsx?$/, loader: &#x27;babel-loader&#x27;, exclude: /node_modules/ &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        HtmlWebpackPluginConfig,</span><br><span class="line"><span class="addition">+        new CleanWebpackPlugin([&#x27;dist&#x27;])</span></span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br> 重新build.<code>yarn build</code>。此时，dist目录下当只有所需要的文件了。</p><p> 启动html查看效果。这时可以采用webstom或者idea里的用浏览器打开功能，会自动创建的静态服务器。方便简单。也可以安装<code>http-server</code>。不过，既然用webpack，肯定采用webpack的热编译功能。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn start</span><br></pre></td></tr></table></figure><br> 浏览器访问<code>localhost:8080</code>就是我们的页面了。<br> <img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/react-ele.png"></p><h2 id="1-2-React-Developer-Tools"><a href="#1-2-React-Developer-Tools" class="headerlink" title="1.2 React Developer Tools"></a>1.2 React Developer Tools</h2><p>一个值得二级标题的功能。在chrom扩展里搜索<code>React Developer Tools</code>，添加。然后重新打开我们的页面。看控制台的react节点：<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/react-chrom-tool.png"></p><h2 id="1-3-推荐的react组件写法"><a href="#1-3-推荐的react组件写法" class="headerlink" title="1.3 推荐的react组件写法"></a>1.3 推荐的react组件写法</h2><p>除了上文使用function来创建一个react component。推荐采用es6 class的方式。更加清晰。<br>由于用到lambda语法糖，需要增加一个新的babel插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add babel-plugin-transform-class-properties --dev</span><br></pre></td></tr></table></figure><p>然后在.babelrc文件中新增：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;plugins&quot;: [&quot;transform-class-properties&quot;]</span><br></pre></td></tr></table></figure><p>下面创建app/components/LoginButton.jsx</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;this is &quot;</span>, <span class="built_in">this</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;button onClick=&#123;<span class="built_in">this</span>.handleClick&#125;&gt;</span><br><span class="line">                Click me, auto bind <span class="built_in">this</span> by lambda</span><br><span class="line">            &lt;/button&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> LoginButton;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里有几个需要注意的地方。</p><ul><li>通过<code>class</code>来声明一个component，并在结尾处<code>export default</code>出去。</li><li>创建的component需要继承<code>React.Component</code></li><li>必须创建render方法，并返回一个react component组件</li><li>通过lambda语法可以指定方法为this的属性，相当于在构造器中绑定放大到this。因此可以在onClick中调用this。否则，普通的方法不会绑定到this上，需要在构造器上绑定。</li></ul><p>以上创建了一个组件LoginButton，我们可以像开始一样直接render到一个dom元素里。也可以直接添加到另一个component组件中。比如搭建环境时给的App组件：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">import Clock from &#x27;./Clock.jsx&#x27;;</span><br><span class="line">import ActionLink from &#x27;./ActionLink.jsx&#x27;;</span><br><span class="line"><span class="addition">+ import LoginButton from &#x27;./LoginButton.jsx&#x27;</span></span><br><span class="line"></span><br><span class="line">class App extends React.Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div style=&#123;&#123;textAlign: &#x27;center&#x27;&#125;&#125;&gt;</span><br><span class="line">                &lt;h1&gt;Hello World! Hi ReactJS!&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;Clock /&gt;</span><br><span class="line">                    &lt;ActionLink /&gt;</span><br><span class="line"><span class="addition">+                    &lt;LoginButton/&gt;</span></span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><ul><li>import引入刚才写的LoginButton,其中地址是相对地址。变量名可以自定义，因为export的时候采用了default。这里仍旧取名为LoginButton。</li><li>将引入的变量的标签形式插入拼接即可。</li></ul><p><code>yarn start</code>可以观察到页面多了按钮。</p><h2 id="1-4-使用state控制状态"><a href="#1-4-使用state控制状态" class="headerlink" title="1.4 使用state控制状态"></a>1.4 使用state控制状态</h2><p>最开始的demo Clock中，使用一个时间函数，定时render页面。这种需求可以转换为定时更新状态，由react自动根据状态来渲染页面。对于那个Clock组件来说，唯一变化的就是时间，那么这个时间就是动态的状态。react的component的有个state属性，专门用来传递状态，或者说数据的。当我们需要修改数据的时候，直接修改state就可以了。</p><p>新建app/components/Clock.jsx</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FormattedDate</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span> It is &#123;props.date.toLocaleTimeString()&#125;. <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Author </span>Ryan Miao</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Date </span>2017/08/02 20:58</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(props);</span><br><span class="line">        <span class="built_in">this</span>.state = &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.timerID = <span class="built_in">setInterval</span>(</span><br><span class="line">            () =&gt; <span class="built_in">this</span>.tick(),</span><br><span class="line">            <span class="number">1000</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(<span class="built_in">this</span>.timerID)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">tick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h1&gt;This is a clock!&lt;/h1&gt;</span><br><span class="line">                &lt;FormattedDate date=&#123;<span class="built_in">this</span>.state.date&#125; /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Clock;</span><br></pre></td></tr></table></figure><ul><li><p>constructor是一个构造函数，当new Clock()的时候会调用这个方法来创建对象，因此可以把对象的一些初始化操作放在这里。本例中，初始化state.</p></li><li><p>state是一个对象，内容自定义，本例只增加一个date属性.</p></li><li><p>componentDidMount()在component挂载的时候触发，这里设置一个定时器，定时调用tick().</p></li><li><p>this.setState({})是唯一能修改state的方式，通过this.state={}的做法无效。另外，setState是一个merge的异步操作。merge是说，每次set的时候，只会修改指定的变量，不会整体替换。异步是说不能直接this.state.xx来操作属性，因为有可能你调用this.state.xx来获取xx的值的时候，前一次的setState还没执行完。如果想要同步的修改state里的属性，可以采用第二种方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Correct</span></span><br><span class="line"><span class="built_in">this</span>.setState(<span class="function">(<span class="params">prevState, props</span>) =&gt;</span> (&#123;</span><br><span class="line">  counter: prevState.counter + props.increment</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>接受两个参数，第一个是state,第二个是props。这两个变量会在最后一次修改结束后自动注入。所以就可以放心的设置state的属性了。</p></li><li><p>componentWillUnmount()和componentDidMount()都是react的<code>lifecycle hooks</code>。是react组件声明周期前后会调用的方法。componentWillUnmount()会在component移除的时候触发。this.timerID可以直接将属性timerID绑定到this上，这个不需要绑定到state，因为这个和渲染(render)页面无关。</p></li><li><p>FormattedDate是我们抽出来的专门显示时间的组件，date是它的一个props.</p></li></ul><p>组件创建完毕，下面开始使用。使用方式就是转换成标签的方式调用它。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line"><span class="addition">+ import Clock from &#x27;./Clock.jsx&#x27;;</span></span><br><span class="line">import ActionLink from &#x27;./ActionLink.jsx&#x27;;</span><br><span class="line">import LoginButton from &#x27;./LoginButton.jsx&#x27;</span><br><span class="line">import LoginControl from &#x27;./LoginControl.jsx&#x27;</span><br><span class="line"></span><br><span class="line">class App extends React.Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div style=&#123;&#123;textAlign: &#x27;center&#x27;&#125;&#125;&gt;</span><br><span class="line">                &lt;h1&gt;Hello World! Hi ReactJS!&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">                &lt;div&gt;</span><br><span class="line"><span class="addition">+                    &lt;Clock /&gt;</span></span><br><span class="line">                    &lt;ActionLink /&gt;</span><br><span class="line">                    &lt;LoginButton/&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;LoginControl /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><p>页面这时候就会自动刷新时间了。</p><h2 id="1-5-阻止事件"><a href="#1-5-阻止事件" class="headerlink" title="1.5 阻止事件"></a>1.5 阻止事件</h2><p>React里的属性采用驼峰命名规则，在原来的html中，定义onclick属性：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;activateLasers()&quot;</span>&gt;</span></span><br><span class="line">  Activate Lasers</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但在react里，必须将onclick改成onClick</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;activateLasers&#125;</span>&gt;</span></span><br><span class="line">  Activate Lasers</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在原来的html中，可以通过return false的方式阻止默认事件。比如，a标签有href和onClick属性。在html中，我们想要阻止点击的时候跳转到href,那么可以在onClick中返回false</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;console.log(&#x27;The link was clicked.&#x27;); return false&quot;</span>&gt;</span></span><br><span class="line">  Click me</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样，你点击a标签后，浏览器地址栏不会有#，如果你不return false，浏览器地址栏就会发生跳转。这是a标签的默认行为。在html中可以通过return false来阻止。但在react中这样做无效。必须使用<code>preventDefault </code><br>创建app/components/ActionLink.jsx</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ActionLink</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;The link was clicked. PreventDefault event.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;a href=<span class="string">&quot;#&quot;</span> onClick=&#123;handleClick&#125;&gt;</span><br><span class="line">            Click me</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ActionLink;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在App.jsx中引入。刷新页面，点击a标签。观察浏览器地址栏可以发现没有任何变化，证明默认行为被阻止了。如果注释掉<code>e.preventDefault();</code>，刷新页面，点击a标签，观察地址栏就会发现发生了改变。</p><h2 id="1-8-方法绑定到this"><a href="#1-8-方法绑定到this" class="headerlink" title="1.8 方法绑定到this"></a>1.8 方法绑定到this</h2><p>接着理解react组件的写法。写一个Toggle按钮，每次点击都切换状态。<br>创建app/components/Toggle.jsx</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Toggle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props);</span><br><span class="line">        <span class="built_in">this</span>.state = &#123;</span><br><span class="line">            isToggleOn: <span class="literal">true</span>,</span><br><span class="line">            color: <span class="string">&#x27;red&#x27;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//This bind is necessary to make `this` work in the callback</span></span><br><span class="line">        <span class="built_in">this</span>.handleClick = <span class="built_in">this</span>.handleClick.bind(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;this=&quot;</span>, <span class="built_in">this</span>);</span><br><span class="line">        <span class="built_in">this</span>.setState(</span><br><span class="line">            prevStat =&gt; (&#123;</span><br><span class="line">                isToggleOn: !prevStat.isToggleOn,</span><br><span class="line">                color: prevStat.color===<span class="string">&#x27;red&#x27;</span>? <span class="string">&#x27;green&#x27;</span>:<span class="string">&#x27;red&#x27;</span></span><br><span class="line">            &#125;)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;button onClick=&#123;<span class="built_in">this</span>.handleClick&#125; style=&#123;&#123;<span class="attr">background</span>: <span class="built_in">this</span>.state.color&#125;&#125;&gt;</span><br><span class="line">                &#123;<span class="built_in">this</span>.state.isToggleOn ? <span class="string">&#x27;ON&#x27;</span>:<span class="string">&#x27;OFF&#x27;</span>&#125;</span><br><span class="line">            &lt;/button&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Toggle;</span><br></pre></td></tr></table></figure><ul><li>首先，构造函数定义了state有两个属性，并初始化</li><li>构造函数绑定了handleClick的作用域为Toggle. 关于如何理解这个绑定，参阅<a href="https://www.smashingmagazine.com/2014/01/understanding-javascript-function-prototype-bind/">如何理解js中的this绑定</a>. 如果注释掉这一行，触发handleClick的时候，里面的this是null。那么setState当然也就不存在。我们这里setState是希望调用Toggle的方法，希望这个this指向Toggle. 因此需要在构造器中绑定this。</li><li>setState的时候，如果和前一个状态相关的话，一定要采用方法传参的方式。这里是一个lambda语法糖。</li><li>将Toggle插入到App.jsx中，页面会有个按钮，每次点击都会改变颜色。这是因为，点击的时候触发onClick，调用handleClick，然后setState修改了state,react就会根据state来重新render组件。</li></ul><p>另一种方式自动绑定方法成为一个实例，是采用<code>babel-plugin-transform-class-properties</code>。这个目前还不是es的标准，因为将方法定义为属性这种做法还很有争议。在java8中lambda也是如此，但java8将lambda设定为一等公民，是另一个东西，和成员变量类似。这里，如果使用这个plugin的话，lambda语法糖可以升级为属性，那么就不用绑定this了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggingButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This syntax ensures `this` is bound within handleClick.</span></span><br><span class="line">  <span class="comment">// Warning: this is *experimental* syntax.</span></span><br><span class="line">  handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;this is:&#x27;</span>, <span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button onClick=&#123;<span class="built_in">this</span>.handleClick&#125;&gt;</span><br><span class="line">        Click me</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里，handleClick就会升级为属性，就可以直接用this调用，里面的this就是外面的LogginButton.</li></ul><p>还有一种方式是lambda语法，但官方不推荐：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggingButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;this is:&#x27;</span>, <span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// This syntax ensures `this` is bound within handleClick</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button onClick=&#123;<span class="function">(<span class="params">e</span>) =&gt;</span> <span class="built_in">this</span>.handleClick(e)&#125;&gt;</span><br><span class="line">        Click me</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>The problem with this syntax is that a different callback is created each time the LoggingButton renders. In most cases, this is fine. However, if this callback is passed as a prop to lower components, those components might do an extra re-rendering. We generally recommend binding in the constructor or using the property initializer syntax, to avoid this sort of performance problem.<br>建议采用前两种方式。</p></blockquote><h2 id="1-7-一个稍微复杂的例子：登录按钮的动态切换"><a href="#1-7-一个稍微复杂的例子：登录按钮的动态切换" class="headerlink" title="1.7 一个稍微复杂的例子：登录按钮的动态切换"></a>1.7 一个稍微复杂的例子：登录按钮的动态切换</h2><p>综合以上的demo。编写新需求。当用户没有登录的时候，显示”Please login”，并显示login按钮，当用户登录的时候显示”welcome”和logout按钮。<br>创建app/components/Greeting.jsx</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UserGreeting</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome back!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GuestGreeting</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Please sign up.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Greeting</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> isLoggedIn = props.isLoggedIn;</span><br><span class="line">    <span class="keyword">if</span> (isLoggedIn)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">UserGreeting</span>/&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">GuestGreeting</span>/&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Greeting;</span><br></pre></td></tr></table></figure><p>创建app/components/LoginControl.jsx</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Greeting <span class="keyword">from</span> <span class="string">&quot;./Greeting.jsx&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LoginButton</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;button onClick=&#123;props.onClick&#125; style=&#123;&#123;<span class="attr">color</span>: <span class="string">&#x27;white&#x27;</span>, <span class="attr">background</span>:<span class="string">&quot;green&quot;</span>&#125;&#125; &gt;</span><br><span class="line">            Login</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LogoutButton</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;button onClick=&#123;props.onClick&#125; style=&#123;&#123;<span class="attr">color</span>: <span class="string">&#x27;white&#x27;</span>, <span class="attr">background</span>:<span class="string">&#x27;red&#x27;</span>&#125;&#125;&gt;</span><br><span class="line">            Logout</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Author </span>Ryan Miao</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Date </span>2017/08/02 20:23</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginControl</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props);</span><br><span class="line">        <span class="built_in">this</span>.handleLoginClick = <span class="built_in">this</span>.handleLoginClick.bind(<span class="built_in">this</span>);</span><br><span class="line">        <span class="built_in">this</span>.handleLogoutClick = <span class="built_in">this</span>.handleLogoutClick.bind(<span class="built_in">this</span>);</span><br><span class="line">        <span class="built_in">this</span>.state = &#123;<span class="attr">isLoggedIn</span>: <span class="literal">false</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">handleLoginClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Click login&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">isLoggedIn</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">handleLogoutClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Click logout&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">isLoggedIn</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> isLoggedIn = <span class="built_in">this</span>.state.isLoggedIn;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> button = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (isLoggedIn) &#123;</span><br><span class="line">            button = <span class="xml"><span class="tag">&lt;<span class="name">LogoutButton</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleLogoutClick&#125;</span> /&gt;</span></span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            button = <span class="xml"><span class="tag">&lt;<span class="name">LoginButton</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleLoginClick&#125;</span> /&gt;</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div style=&#123;&#123;<span class="attr">border</span>: <span class="string">&#x27;1px solid #000&#x27;</span>&#125;&#125;&gt;</span><br><span class="line">                &lt;Greeting isLoggedIn=&#123;<span class="built_in">this</span>.state.isLoggedIn&#125;/&gt;</span><br><span class="line">                &#123;button&#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> LoginControl;</span><br></pre></td></tr></table></figure><p>在App.jsx中引入</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">import Clock from &#x27;./Clock.jsx&#x27;;</span><br><span class="line">import ActionLink from &#x27;./ActionLink.jsx&#x27;;</span><br><span class="line">import LoginButton from &#x27;./LoginButton.jsx&#x27;</span><br><span class="line"><span class="addition">+ import LoginControl from &#x27;./LoginControl.jsx&#x27;</span></span><br><span class="line">import Toggle from &#x27;./Toggle.jsx&#x27;</span><br><span class="line"></span><br><span class="line">class App extends React.Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div style=&#123;&#123;textAlign: &#x27;center&#x27;&#125;&#125;&gt;</span><br><span class="line">                &lt;h1&gt;Hello World! Hi ReactJS!&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;Clock /&gt;</span><br><span class="line">                    &lt;ActionLink /&gt;</span><br><span class="line">                    &lt;LoginButton/&gt;</span><br><span class="line">                    &lt;Toggle /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="addition">+                &lt;div&gt;</span></span><br><span class="line"><span class="addition">+                    &lt;LoginControl /&gt;</span></span><br><span class="line"><span class="addition">+                &lt;/div&gt;</span></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/react-login-control.gif"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://babeljs.io/docs/plugins/transform-class-properties/">https://babeljs.io/docs/plugins/transform-class-properties/</a></li><li><a href="https://facebook.github.io/react/docs/handling-events.html">https://facebook.github.io/react/docs/handling-events.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> ReactJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReactJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello ReactJS</title>
      <link href="2017/08/01/hello-react-js/"/>
      <url>2017/08/01/hello-react-js/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>React学习前先搭好环境，官网的例子看着比较分散。结合webpack就可以体验完整的es6开发流程了。</p><p>源码：<a href="https://github.com/Ryan-Miao/hello-react-js/releases/tag/0.1">https://github.com/Ryan-Miao/hello-react-js/releases/tag/0.1</a></p><a id="more"></a><h1 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h1><p>涉及以下几个技术。但从hello world的角度说，目前先不用知道是干嘛的，先用来学习react，后面再去研究各个组件的功能。</p><ol><li>Webpack - A module bundler</li><li>Babel - A Javascript compiler</li><li>ES6 - A relatively new Javasript standard</li><li>Yarn - A package manager</li><li>React - As expected</li></ol><h2 id="1-1-安装一些东西"><a href="#1-1-安装一些东西" class="headerlink" title="1.1 安装一些东西"></a>1.1 安装一些东西</h2><p>去官网下载NodeJS，安装。<br>去官网下载<a href="https://yarnpkg.com/zh-Hans/docs/usage">yarn</a>，然后安装。</p><h2 id="1-2-开始搭建"><a href="#1-2-开始搭建" class="headerlink" title="1.2 开始搭建"></a>1.2 开始搭建</h2><p>最终搭建的文件结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">|____.babelrc</span><br><span class="line">|____node_modules</span><br><span class="line">|____app</span><br><span class="line">| |____components</span><br><span class="line">| | |____App.jsx</span><br><span class="line">| |____index.html</span><br><span class="line">| |____index.js</span><br><span class="line">|____dist</span><br><span class="line">| |____index.html</span><br><span class="line">| |____index_bundle.js</span><br><span class="line">|____package.json</span><br><span class="line">|____readme.md</span><br><span class="line">|____structure.txt</span><br><span class="line">|____webpack.config.js</span><br><span class="line">|____yarn.lock</span><br></pre></td></tr></table></figure><h3 id="1-2-1-初始化"><a href="#1-2-1-初始化" class="headerlink" title="1.2.1 初始化"></a>1.2.1 初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir hello-react-js</span><br><span class="line">cd hello-react-js</span><br><span class="line">yarn init</span><br></pre></td></tr></table></figure><p>添加webpack</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack webpack-dev-server path</span><br></pre></td></tr></table></figure><p>这时，项目根目录下会多出一个<code>yarn.lock</code>，不用理会。  </p><h3 id="1-2-2-在根目录下创建webpack-config-js"><a href="#1-2-2-在根目录下创建webpack-config-js" class="headerlink" title="1.2.2 在根目录下创建webpack.config.js"></a>1.2.2 在根目录下创建<code>webpack.config.js</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPluginConfig = <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    template: <span class="string">&#x27;./app/index.html&#x27;</span>,</span><br><span class="line">    filename: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">    inject: <span class="string">&#x27;body&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">&#x27;./app/index.js&#x27;</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        filename: <span class="string">&#x27;index_bundle.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        loaders: [</span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, loader: <span class="string">&#x27;babel-loader&#x27;</span>, <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.jsx?$/</span>, loader: <span class="string">&#x27;babel-loader&#x27;</span>, <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [HtmlWebpackPluginConfig]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>entry</code>： 指向入口js文件</li><li><code>output</code>: 指向打包后的文件目录<ul><li><code>filename</code>: js打包后的文件名</li><li><code>path</code>: 打包后的文件目录</li></ul></li><li><code>loaders</code>: 转换工具。这里简单加载es6的转换工具<code>babel-loader</code>，将以<code>.js</code>或者<code>.jsx</code>结尾的文件转换为es5.</li><li><code>plugins</code>: 一些插件。这里用到<code>HtmlWebpackPlugin</code>，将打包后的js文件插入到指定的html模板里。好处是我们不用手动将js插入html中，这在修改js文件名的时候很有用，否则我们还要手动修改js引入的名称。</li></ul><h3 id="1-2-3-添加babel"><a href="#1-2-3-添加babel" class="headerlink" title="1.2.3 添加babel"></a>1.2.3 添加babel</h3><p>刚才提到了<code>babel-loader</code>，除了配置之外还需要加载依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add babel-loader babel-core babel-preset-es2015 babel-preset-react --dev</span><br></pre></td></tr></table></figure><p>然后，在根目录创建<code>.babelrc</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;:[</span><br><span class="line">    &quot;es2015&quot;, &quot;react&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-4-添加react"><a href="#1-2-4-添加react" class="headerlink" title="1.2.4 添加react"></a>1.2.4 添加react</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react react-dom</span><br></pre></td></tr></table></figure><p>创建<code>app/index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>React App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建<code>app/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./components/App.jsx&#x27;</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建<code>app/components/App.jsx</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div style=&#123;&#123;<span class="attr">textAlign</span>: <span class="string">&#x27;center&#x27;</span>&#125;&#125;&gt;</span><br><span class="line">                &lt;h1&gt;Hello World! Hi ReactJS&lt;/h1&gt;</span><br><span class="line">            &lt;/div&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-2-5-添加html-webpack-plugin"><a href="#1-2-5-添加html-webpack-plugin" class="headerlink" title="1.2.5 添加html-webpack-plugin"></a>1.2.5 添加<code>html-webpack-plugin</code></h3><p>前面配置了<code>html-webpack-plugin</code>，这里还需要加载依赖文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add html-webpack-plugin</span><br></pre></td></tr></table></figure><p>在前面的配置文件制定了html模板文件，输出文件名，以及js打包文件插入的位置。</p><h2 id="1-3-基本搞定，运行一下"><a href="#1-3-基本搞定，运行一下" class="headerlink" title="1.3 基本搞定，运行一下"></a>1.3 基本搞定，运行一下</h2><p>打开package.json。在script下添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;webpack-dev-server&quot;</span><br><span class="line"> &#125;,</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn start</span><br></pre></td></tr></table></figure><p>这时候页面显示如下。大功告成。<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/hello-react.png"></p><p>可以在package.json里配置不同的webpack运行环境。这里只是搭建学习react官方文档之前先要准备好的环境。最终，package.json:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;hello-react&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;webpack-dev-server&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;Ryan Miao&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;MIT&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;babel-core&quot;</span>: <span class="string">&quot;^6.25.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;babel-loader&quot;</span>: <span class="string">&quot;^7.1.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;babel-preset-es2015&quot;</span>: <span class="string">&quot;^6.24.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;babel-preset-react&quot;</span>: <span class="string">&quot;^6.24.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;clean-webpack-plugin&quot;</span>: <span class="string">&quot;^0.1.16&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;css-loader&quot;</span>: <span class="string">&quot;^0.28.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;html-webpack-plugin&quot;</span>: <span class="string">&quot;^2.29.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;less-loader&quot;</span>: <span class="string">&quot;^4.0.5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;react&quot;</span>: <span class="string">&quot;^15.6.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;style-loader&quot;</span>: <span class="string">&quot;^0.18.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;url-loader&quot;</span>: <span class="string">&quot;^0.5.9&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span>: <span class="string">&quot;^3.4.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack-dev-server&quot;</span>: <span class="string">&quot;^2.6.1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;^0.12.7&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;react-dom&quot;</span>: <span class="string">&quot;^15.6.1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-3-小结"><a href="#1-3-小结" class="headerlink" title="1.3 小结"></a>1.3 小结</h2><p>开始的时候照葫芦画瓢，先把环境搭建起来。然后开始学习，开始做事。在需要的时候去研究对应的问题。不然，知识何其多也。下面就可以照着react官网的教程，把react组件过一遍。然后再去看redux。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://scotch.io/tutorials/setup-a-react-environment-using-webpack-and-babel#toc-webpack-installation-and-configuration">https://scotch.io/tutorials/setup-a-react-environment-using-webpack-and-babel#toc-webpack-installation-and-configuration</a></li><li><a href="https://yarnpkg.com/zh-Hans/docs/usage">https://yarnpkg.com/zh-Hans/docs/usage</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> ReactJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReactJS </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令行打印文件树列表： tree</title>
      <link href="2017/07/30/tree/"/>
      <url>2017/07/30/tree/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-amp-Mac"><a href="#Linux-amp-Mac" class="headerlink" title="Linux &amp; Mac"></a>Linux &amp; Mac</h1><h2 id="1-下载tree-lib"><a href="#1-下载tree-lib" class="headerlink" title="1.下载tree lib"></a>1.下载<code>tree</code> lib</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//mac</span><br><span class="line">brew install tree</span><br><span class="line">//centos</span><br><span class="line">yum install tree</span><br><span class="line">//ubuntu</span><br><span class="line">apt-get install tree</span><br></pre></td></tr></table></figure><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;显示所有文件</span><br><span class="line">tree</span><br><span class="line">&#x2F;&#x2F;显示深度2层</span><br><span class="line">tree -L 2</span><br></pre></td></tr></table></figure><h2 id="2-命令find组合"><a href="#2-命令find组合" class="headerlink" title="2. 命令find组合"></a>2. 命令find组合</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -print | sed -e &#x27;s;[^/]*/;|____;g;s;____|; |;g&#x27; &gt; structure.txt</span><br></pre></td></tr></table></figure><h3 id="移除node-module"><a href="#移除node-module" class="headerlink" title="移除node_module"></a>移除node_module</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -print | grep -v &quot;node&quot; | sed -e &#x27;s;[^/]*/;|____;g;s;____|; |;g&#x27; &gt; structure.txt</span><br></pre></td></tr></table></figure><p>缺点： 不能打印深度选择，或者需要更高层次的语法编写。这里姑且先用着。够用了。</p><h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><p>windows自带tree命令。默认只显示目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//只显示目录</span><br><span class="line">tree</span><br><span class="line"></span><br><span class="line">//显示文件</span><br><span class="line">tree /f</span><br><span class="line"></span><br><span class="line">//输出到文件</span><br><span class="line">tree /f &gt; structure.txt</span><br></pre></td></tr></table></figure><p>但，由于windows命令不熟悉，也不想花时间去学习windows的命令。那么可以装一个git shell或者推荐使用cmder。</p><h1 id="Customization"><a href="#Customization" class="headerlink" title="Customization"></a>Customization</h1><p>手动写一个列表。先序遍历：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 先序遍历 postorder traversal  先输出根节点，然后输出子节点</span></span><br><span class="line"><span class="comment"> * Created by Ryan Miao on 9/24/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostorderTraversal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPostOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String root = <span class="string">&quot;/Users/ryan/workspace/learning/hexo-blog-src&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> stop = <span class="number">3</span>;</span><br><span class="line">        ArrayList&lt;String&gt; ignores = Lists.newArrayList(<span class="string">&quot;.git&quot;</span>, <span class="string">&quot;.deploy_git&quot;</span>, <span class="string">&quot;node_modules&quot;</span>, <span class="string">&quot;.DS_Store&quot;</span>);</span><br><span class="line"></span><br><span class="line">        printTree(root, stop, ignores);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printTree</span><span class="params">(String rootFile, <span class="keyword">int</span> stop, List&lt;String&gt; ignores)</span> </span>&#123;</span><br><span class="line">        printTree(<span class="keyword">new</span> File(rootFile), <span class="number">0</span>, stop, ignores, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printTree</span><span class="params">(File rootFile, <span class="keyword">int</span> level, <span class="keyword">int</span> stop, List&lt;String&gt; ignores, <span class="keyword">boolean</span> isLastChild, <span class="keyword">boolean</span> isParentLast)</span> </span>&#123;</span><br><span class="line">        String name = rootFile.getName();</span><br><span class="line">        <span class="keyword">if</span> (level &gt; stop || ignores.stream().anyMatch(name::contains)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (level == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prettyPrint(level, rootFile, isLastChild, isParentLast);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rootFile.isDirectory()) &#123;</span><br><span class="line">            File[] files = rootFile.listFiles();</span><br><span class="line">            <span class="keyword">if</span> (files != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> length = files.length;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i == length - <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="comment">//</span></span><br><span class="line">                        printTree(files[i], level + <span class="number">1</span>, stop, ignores, <span class="keyword">true</span>, isLastChild);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        printTree(files[i], level + <span class="number">1</span>, stop, ignores, <span class="keyword">false</span>, isLastChild);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prettyPrint</span><span class="params">(<span class="keyword">int</span> level, File file, <span class="keyword">boolean</span> isLastChild, <span class="keyword">boolean</span> isParentLast)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">if</span> (level != <span class="number">1</span>) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;│&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; level - <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isParentLast &amp;&amp; i == level - <span class="number">3</span>) &#123;</span><br><span class="line">                sb.append(<span class="string">&quot;    &quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(<span class="string">&quot;   |&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (level != <span class="number">1</span>) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isLastChild) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;└──&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;├──&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sb.append(file.getName());</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前有个bug，就是递归到深入之后，孙子无法得知祖父是不是最终叶子，因此虚线没有去掉。不过，简单能用还是可以的。<br>console output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├──_config.yml</span><br><span class="line">├──db.json</span><br><span class="line">├──package-lock.json</span><br><span class="line">├──package.json</span><br><span class="line">├──public</span><br><span class="line">│   ├──2017</span><br><span class="line">│   |   ├──05</span><br><span class="line">│   |   ├──06</span><br><span class="line">│   |   ├──07</span><br><span class="line">│   |   ├──08</span><br><span class="line">│   |   └──09</span><br><span class="line">│   ├──404.html</span><br><span class="line">│   ├──about</span><br><span class="line">│   |   └──index.html</span><br><span class="line">│   ├──archives</span><br><span class="line">│   |   ├──2017</span><br><span class="line">│   |   ├──index.html</span><br><span class="line">│   |   └──page</span><br><span class="line">│   ├──baidusitemap.xml</span><br><span class="line">│   ├──categories</span><br><span class="line">│   |   ├──Cache</span><br><span class="line">│   |   ├──Git</span><br><span class="line">│   |   ├──Hexo</span><br><span class="line">│   |   ├──index.html</span><br><span class="line">│   |   ├──Java</span><br><span class="line">│   |   ├──Java8</span><br><span class="line">│   |   ├──Javascript</span><br><span class="line">│   |   ├──Linux</span><br><span class="line">│   |   ├──MySQL</span><br><span class="line">│   |   ├──ReactJS</span><br><span class="line">│   |   ├──redis</span><br><span class="line">│   |   ├──Server</span><br><span class="line">│   |   ├──Spring</span><br><span class="line">│   |   ├──Tools</span><br><span class="line">│   |   ├──思考</span><br><span class="line">│   |   └──读书</span><br><span class="line">│   ├──CNAME</span><br><span class="line">│   ├──css</span><br><span class="line">│   |   └──main.css</span><br><span class="line">│   ├──gallery</span><br><span class="line">│   |   └──index.html</span><br><span class="line">│   ├──images</span><br><span class="line">│   |   ├──algolia_logo.svg</span><br><span class="line">│   |   ├──alipay.jpg</span><br><span class="line">│   |   ├──avatar.gif</span><br><span class="line">│   |   ├──avatar.jpeg</span><br><span class="line">│   |   ├──bk.bmp</span><br><span class="line">│   |   ├──bk.jpg</span><br><span class="line">│   |   ├──bk.png</span><br><span class="line">│   |   ├──bk2.jpg</span><br><span class="line">│   |   ├──cc-by-nc-nd.svg</span><br><span class="line">│   |   ├──cc-by-nc-sa.svg</span><br><span class="line">│   |   ├──cc-by-nc.svg</span><br><span class="line">│   |   ├──cc-by-nd.svg</span><br><span class="line">│   |   ├──cc-by-sa.svg</span><br><span class="line">│   |   ├──cc-by.svg</span><br><span class="line">│   |   ├──cc-zero.svg</span><br><span class="line">│   |   ├──loading.gif</span><br><span class="line">│   |   ├──placeholder.gif</span><br><span class="line">│   |   ├──quote-l.svg</span><br><span class="line">│   |   ├──quote-r.svg</span><br><span class="line">│   |   ├──searchicon.png</span><br><span class="line">│   |   └──wechat.jpg</span><br><span class="line">│   ├──index.html</span><br><span class="line">│   ├──js</span><br><span class="line">│   |   └──src</span><br><span class="line">│   ├──lib</span><br><span class="line">│   |   ├──algolia-instant-search</span><br><span class="line">│   |   ├──canvas-nest</span><br><span class="line">│   |   ├──canvas-ribbon</span><br><span class="line">│   |   ├──fancybox</span><br><span class="line">│   |   ├──fastclick</span><br><span class="line">│   |   ├──font-awesome</span><br><span class="line">│   |   ├──Han</span><br><span class="line">│   |   ├──jquery</span><br><span class="line">│   |   ├──jquery_lazyload</span><br><span class="line">│   |   ├──pace</span><br><span class="line">│   |   ├──three</span><br><span class="line">│   |   ├──ua-parser-js</span><br><span class="line">│   |   └──velocity</span><br><span class="line">│   ├──links</span><br><span class="line">│   |   └──index.html</span><br><span class="line">│   ├──page</span><br><span class="line">│   |   ├──2</span><br><span class="line">│   |   └──3</span><br><span class="line">│   ├──search.xml</span><br><span class="line">│   ├──sitemap.xml</span><br><span class="line">│   └──tags</span><br><span class="line">│       ├──ArrayList</span><br><span class="line">│       ├──banner</span><br><span class="line">│       ├──Dropwizard</span><br><span class="line">│       ├──EhCache</span><br><span class="line">│       ├──Feign</span><br><span class="line">│       ├──Git</span><br><span class="line">│       ├──Hexo</span><br><span class="line">│       ├──index.html</span><br><span class="line">│       ├──Java</span><br><span class="line">│       ├──Java8</span><br><span class="line">│       ├──Javascript</span><br><span class="line">│       ├──Lambda</span><br><span class="line">│       ├──Linux</span><br><span class="line">│       ├──Mac</span><br><span class="line">│       ├──MySQL</span><br><span class="line">│       ├──NodeJS</span><br><span class="line">│       ├──ReactJS</span><br><span class="line">│       ├──reading</span><br><span class="line">│       ├──redis</span><br><span class="line">│       ├──Server</span><br><span class="line">│       ├──Spring</span><br><span class="line">│       ├──SpringMVC</span><br><span class="line">│       ├──team</span><br><span class="line">│       ├──UTF-8</span><br><span class="line">│       ├──vim</span><br><span class="line">│       ├──Webpack</span><br><span class="line">│       ├──Windows</span><br><span class="line">│       └──码云</span><br><span class="line">├──README.md</span><br><span class="line">├──scaffolds</span><br><span class="line">│   ├──draft.md</span><br><span class="line">│   ├──page.md</span><br><span class="line">│   └──post.md</span><br><span class="line">├──source</span><br><span class="line">│   ├──404.html</span><br><span class="line">│   ├──_data</span><br><span class="line">│   |   └──links.yml</span><br><span class="line">│   ├──_posts</span><br><span class="line">│   |   ├──banner-ascii-2-txt.md</span><br><span class="line">│   |   ├──dropwizard-feign.md</span><br><span class="line">│   |   ├──Ehcache3入门-Spring集成.md</span><br><span class="line">│   |   ├──git-rebase.md</span><br><span class="line">│   |   ├──hello-react-js.md</span><br><span class="line">│   |   ├──hello-world.md</span><br><span class="line">│   |   ├──hexo-github-oschina.md</span><br><span class="line">│   |   ├──hexo-next-hypercomments.md</span><br><span class="line">│   |   ├──hexo-next-shang.md</span><br><span class="line">│   |   ├──http-server-static.md</span><br><span class="line">│   |   ├──Java-ArrayList-remove.md</span><br><span class="line">│   |   ├──java-utf8-iso-乱码根源.md</span><br><span class="line">│   |   ├──java8-in-action-2.md</span><br><span class="line">│   |   ├──java8-lambda.md</span><br><span class="line">│   |   ├──js-cros.md</span><br><span class="line">│   |   ├──mac-install-mysql.md</span><br><span class="line">│   |   ├──mac-install-redis.md</span><br><span class="line">│   |   ├──react-tutorial-1.md</span><br><span class="line">│   |   ├──reading-schedule.md</span><br><span class="line">│   |   ├──spring400.md</span><br><span class="line">│   |   ├──switch-to-oschina.md</span><br><span class="line">│   |   ├──team-first-chance.md</span><br><span class="line">│   |   ├──tree.md</span><br><span class="line">│   |   ├──vim.md</span><br><span class="line">│   |   └──why-string-is-immutable.md</span><br><span class="line">│   ├──about</span><br><span class="line">│   |   └──index.md</span><br><span class="line">│   ├──categories</span><br><span class="line">│   |   └──index.md</span><br><span class="line">│   ├──CNAME</span><br><span class="line">│   ├──gallery</span><br><span class="line">│   |   └──index.md</span><br><span class="line">│   ├──images</span><br><span class="line">│   |   ├──alipay.jpg</span><br><span class="line">│   |   ├──avatar.jpeg</span><br><span class="line">│   |   ├──bk.bmp</span><br><span class="line">│   |   ├──bk.jpg</span><br><span class="line">│   |   ├──bk.png</span><br><span class="line">│   |   ├──bk2.jpg</span><br><span class="line">│   |   └──wechat.jpg</span><br><span class="line">│   ├──links</span><br><span class="line">│   |   └──index.md</span><br><span class="line">│   └──tags</span><br><span class="line">│       └──index.md</span><br><span class="line">├──themes</span><br><span class="line">│   ├──landscape</span><br><span class="line">│   |   ├──_config.yml</span><br><span class="line">│   |   ├──Gruntfile.js</span><br><span class="line">│   |   ├──languages</span><br><span class="line">│   |   ├──layout</span><br><span class="line">│   |   ├──LICENSE</span><br><span class="line">│   |   ├──package.json</span><br><span class="line">│   |   ├──README.md</span><br><span class="line">│   |   ├──scripts</span><br><span class="line">│   |   └──source</span><br><span class="line">│   └──next</span><br><span class="line">│       ├──.bowerrc</span><br><span class="line">│       ├──.editorconfig</span><br><span class="line">│       ├──.hound.yml</span><br><span class="line">│       ├──.javascript_ignore</span><br><span class="line">│       ├──.jshintrc</span><br><span class="line">│       ├──.stylintrc</span><br><span class="line">│       ├──.travis.yml</span><br><span class="line">│       ├──_config.yml</span><br><span class="line">│       ├──bower.json</span><br><span class="line">│       ├──gulpfile.coffee</span><br><span class="line">│       ├──languages</span><br><span class="line">│       ├──layout</span><br><span class="line">│       ├──LICENSE</span><br><span class="line">│       ├──package.json</span><br><span class="line">│       ├──README.cn.md</span><br><span class="line">│       ├──README.md</span><br><span class="line">│       ├──scripts</span><br><span class="line">│       ├──source</span><br><span class="line">│       └──test</span><br><span class="line">└──thems-bak</span><br><span class="line">│   └──next</span><br><span class="line">│       ├──_config.yml</span><br><span class="line">│       └──custom.styl</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://yijiebuyi.com/blog/c0defa3a47d16e675d58195adc35514b.html">mac 下的 tree 命令 终端展示你的目录树结构</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Mac </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何启动一个本地静态服务器</title>
      <link href="2017/07/28/http-server-static/"/>
      <url>2017/07/28/http-server-static/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>学习前端开发，想要调试静态页面以及js，发现直接本地打开会有跨域异常。因此，需要启动一个静态服务器，只负责当前目录的文件路由。</p><p>目前尝试了两种方式。一种是<code>Nginx</code>, 一种是NodeJS服务器。最终推荐NodeJS。</p><a id="more"></a><h2 id="1-Nginx启动静态页面"><a href="#1-Nginx启动静态页面" class="headerlink" title="1. Nginx启动静态页面"></a>1. Nginx启动静态页面</h2><h3 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1. 安装"></a>1.1. 安装</h3><p>下载安装Nginx，在Mac下安装如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx</span><br></pre></td></tr></table></figure><h3 id="1-2-配置"><a href="#1-2-配置" class="headerlink" title="1.2 配置"></a>1.2 配置</h3><p>Mac通过brew安装后的配置文件位于：<code>/usr/local/etc/nginx</code>.  </p><p>修改端口和文件目录：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       8070;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        charset utf-8;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /Users/ryan/workspace/learning/react;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-启动和关闭"><a href="#1-3-启动和关闭" class="headerlink" title="1.3 启动和关闭"></a>1.3 启动和关闭</h3><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure><p>关闭</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure><p>启动后，打开浏览器，输入：localhost:8070/xxx.html即可。</p><h1 id="2-通过NodeJS的本地服务器"><a href="#2-通过NodeJS的本地服务器" class="headerlink" title="2. 通过NodeJS的本地服务器"></a>2. 通过NodeJS的本地服务器</h1><p>本次选用<code>http-server</code></p><h2 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install http-server -g</span><br></pre></td></tr></table></figure><h2 id="2-2-启动"><a href="#2-2-启动" class="headerlink" title="2.2 启动"></a>2.2 启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http-server [path] [options]</span><br></pre></td></tr></table></figure><p>Options</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">-p Port to use (defaults to 8080)</span><br><span class="line"></span><br><span class="line">-a Address to use (defaults to 0.0.0.0)</span><br><span class="line"></span><br><span class="line">-d Show directory listings (defaults to &#39;True&#39;)</span><br><span class="line"></span><br><span class="line">-i Display autoIndex (defaults to &#39;True&#39;)</span><br><span class="line"></span><br><span class="line">-g or --gzip When enabled (defaults to &#39;False&#39;) it will serve .&#x2F;public&#x2F;some-file.js.gz in place of .&#x2F;public&#x2F;some-file.js when a gzipped version of the file exists and the request accepts gzip encoding.</span><br><span class="line"></span><br><span class="line">-e or --ext Default file extension if none supplied (defaults to &#39;html&#39;)</span><br><span class="line"></span><br><span class="line">-s or --silent Suppress log messages from output</span><br><span class="line"></span><br><span class="line">--cors Enable CORS via the Access-Control-Allow-Origin header</span><br><span class="line"></span><br><span class="line">-o Open browser window after starting the server</span><br><span class="line"></span><br><span class="line">-c Set cache time (in seconds) for cache-control max-age header, e.g. -c10 for 10 seconds (defaults to &#39;3600&#39;). To disable caching, use -c-1.</span><br><span class="line"></span><br><span class="line">-U or --utc Use UTC time format in log messages.</span><br><span class="line"></span><br><span class="line">-P or --proxy Proxies all requests which can&#39;t be resolved locally to the given url. e.g.: -P http:&#x2F;&#x2F;someurl.com</span><br><span class="line"></span><br><span class="line">-S or --ssl Enable https.</span><br><span class="line"></span><br><span class="line">-C or --cert Path to ssl cert file (default: cert.pem).</span><br><span class="line"></span><br><span class="line">-K or --key Path to ssl key file (default: key.pem).</span><br><span class="line"></span><br><span class="line">-r or --robots Provide a &#x2F;robots.txt (whose content defaults to &#39;User-agent: *\nDisallow: &#x2F;&#39;)</span><br><span class="line"></span><br><span class="line">-h or --help Print this list and exit.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
            <tag> Javascript </tag>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js-cros</title>
      <link href="2017/07/23/js-cros/"/>
      <url>2017/07/23/js-cros/</url>
      
        <content type="html"><![CDATA[<p>cors执行过程摘自<a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing">自由的维基百科</a><br><img src="https://upload.wikimedia.org/wikipedia/commons/c/ca/Flowchart_showing_Simple_and_Preflight_XHR.svg"></p><h1 id="子域名之间互相访问需要跨域"><a href="#子域名之间互相访问需要跨域" class="headerlink" title="子域名之间互相访问需要跨域"></a>子域名之间互相访问需要跨域</h1><h2 id="结论放在开头："><a href="#结论放在开头：" class="headerlink" title="结论放在开头："></a>结论放在开头：</h2><ol><li>服务端必须设置允许跨域</li><li>客户端带cookie需要设置<code>withCredentials</code></li><li>无论服务端是否允许跨域，该request都会完整执行</li><li><code>options</code>预请求需要设置返回空，不然requestMapping没有支持该方法则出错</li></ol><a id="more"></a><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>首先需要搭建两个环境。一个是提供API的server A，一个是需要跨域访问API的server B。</p><p>Server A提供了一个api。完整的请求request是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;local.expediapartnercentral.com.lisqa7.sb.karmalab.net:8443&#x2F;contentmain&#x2F;getDepositsRoomAndRatePlanInfo.json?htid&#x3D;759&amp;_&#x3D;1490855801818</span><br></pre></td></tr></table></figure><p>Server B有个页面page:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;cros.expediapartnercentral.com.lisqa7.sb.karmalab.net:3001&#x2F;test.html</span><br></pre></td></tr></table></figure><p>并且这个page需要请求server A的api。</p><p>但由于跨域保护，请求失败：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource. Origin &#39;xxxxx&#39; is therefore not allowed access.</span><br></pre></td></tr></table></figure><h3 id="修改host"><a href="#修改host" class="headerlink" title="修改host"></a>修改host</h3><p>首先本地配置两个指向127.0.0.1的host，方便互相跨域。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1   local.expediapartnercentral.com.lisqa7.sb.karmalab.net </span><br><span class="line">127.0.0.1   cros.expediapartnercentral.com.lisqa7.sb.karmalab.net</span><br></pre></td></tr></table></figure><p>启动项目A，方便提供API。<br>至于项目B，测试跨域只要写个html静态页面即可。那么就写一个test.html，并通过一个工具发布：</p><p><a href="https://www.browsersync.io/docs/command-line"><code>browser-sync</code></a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g browser-sync</span><br></pre></td></tr></table></figure><h3 id="本地启动一个test-html"><a href="#本地启动一个test-html" class="headerlink" title="本地启动一个test.html"></a>本地启动一个test.html</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browser-sync start --server --files &quot;*.html&quot; --host &quot;cros.expediapartnercentral.com.lisqa7.sb.karmalab.net&quot;  --port 3001</span><br></pre></td></tr></table></figure><h3 id="关于跨域CORS"><a href="#关于跨域CORS" class="headerlink" title="关于跨域CORS"></a>关于跨域CORS</h3><p><code>ruanyifeng</code>的文章里说浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。</p><p>其中同时满足一下2种标准即为简单跨域：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1) 请求方法是以下三种方法之一：</span><br><span class="line">HEAD</span><br><span class="line">GET</span><br><span class="line">POST</span><br><span class="line">2）HTTP的头信息不超出以下几种字段：</span><br><span class="line">Accept</span><br><span class="line">Accept-Language</span><br><span class="line">Content-Language</span><br><span class="line">Last-Event-ID</span><br><span class="line">Content-Type：只限于三个值application&#x2F;x-www-form-urlencoded、multipart&#x2F;form-data、text&#x2F;plain</span><br></pre></td></tr></table></figure><p>而其他情况，非简单请求是那种对服务器有特殊要求的请求，比如请求方法是   <code>PUT</code>或<code>DELETE</code>，或者<code>Content-Type</code>字段的类型是<code>application/json</code>。非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight），即<code>options</code>请求。</p><h3 id="关键"><a href="#关键" class="headerlink" title="关键"></a>关键</h3><p>跨域的关键是浏览器获得服务器的认可，而服务器的认可就是header里的<code>Access-Control-Allow-Origin</code>。浏览器通过比较服务端返回的response中是否包含这个字段，以及包含这个字段的内容是否是当前网址来确定是否跨域。也就是说绕过浏览器是可以不用跨域的。</p><p>有个问题，看好多文章并没有指出。<br>第一点，带cookie问题。浏览器设置<code>withCredentials</code>为<code>true</code>则会带cookie发送给服务端。而服务端设置<code>Access-Control-Allow-Credentials</code>为<code>true</code>则接收，<code>false</code>则不接受。关键是到filter里的时候才会决定是否设置response，那么这时候cookie已经存在request里了吧。（待验证）</p><blockquote><p>验证：server端确实已经接受了cookie，即使设置为false，服务端仍旧接受cookie。而客户端也仍旧可以发送cookie。</p></blockquote><p>第二点，简单跨域中，浏览器的请求直接发送给服务器，服务器返回是否支持跨域（即是否header加origin）, 那么简单跨域究竟是请求了服务端几次？如果是1次，那么如果服务端不支持跨域，即没有设置allow，还会不会继续走下去，会不会继续request得到结果后放入response？就是不论跨域不跨域服务器是否都会执行这个request对应的计算。因为所有的设置header都是给浏览器告知的，和服务端限制无关。（待验证）</p><blockquote><p>验证：即使服务端没有设置允许跨域，当客户端请求过来时，服务端仍旧完整执行了请求并返回，只是客户端没有接收。</p></blockquote><h3 id="服务端需要做点工作"><a href="#服务端需要做点工作" class="headerlink" title="服务端需要做点工作"></a>服务端需要做点工作</h3><p>针对上述两种跨域。server A需要写一个filter。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>cors<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.test.filter.CorsFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>cors<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Filter:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        URL requestURL = <span class="keyword">new</span> URL(request.getRequestURL().toString());</span><br><span class="line">        String hostName = requestURL.getHost();</span><br><span class="line">        String origin = request.getHeader(<span class="string">&quot;Origin&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index = hostName.indexOf(<span class="string">&quot;.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">            String domainHost = hostName.substring(index, hostName.length());</span><br><span class="line">            <span class="keyword">if</span>(!StringUtils.isEmpty(origin) &amp;&amp; origin.contains(domainHost)) &#123;</span><br><span class="line">                response.addHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;GET, POST, PUT, DELETE, OPTIONS&quot;</span>);</span><br><span class="line">                response.addHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, origin);</span><br><span class="line">                response.addHeader(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">                response.setHeader(<span class="string">&quot;Access-Control-Max-Age&quot;</span>, <span class="string">&quot;3600&quot;</span>);</span><br><span class="line">                response.addHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;Content-Type, Cookie, &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Accept-Encoding, User-Agent, &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Host, Referer, &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;X-Requested-With, Accept, &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Accept-Language, Cache-Control, Connection&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (request.getHeader(<span class="string">&quot;Access-Control-Request-Method&quot;</span>) != <span class="keyword">null</span> &amp;&amp; <span class="string">&quot;OPTIONS&quot;</span>.equals(request.getMethod())) &#123;</span><br><span class="line">                    <span class="comment">// CORS &quot;pre-flight&quot; request</span></span><br><span class="line">                    response.setStatus(<span class="number">200</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述filter是为了同一个domain下，不同子域名可以跨域访问，而其他domain则不可以，因为我们需要共享cookie，所以设置<code>Access-Control-Allow-Credentials</code>为<code>true</code>. 如果设置为<code>false</code>则不接受cookie。</p><p>客户端，即server B如果想要发送cookie则需要设置<code>withCredentials</code>为<code>true</code>. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原生</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//jquery</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    ...</span><br><span class="line">    xhrFields: &#123;</span><br><span class="line">        withCredentials: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;); </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，针对非简单跨域的时候发送<code>options</code>请求，服务端A需要告诉浏览器是否支持跨域即可，不要往下走了，不然到指定的requestMapping发现不支持这个方法就会很尴尬了，所以直接返回。</p><p>下面针对简单跨域和非简单跨域做测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-1.11.3.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;GET_Default&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;testGetDefault()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;GET_JSON&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;testGetJSON()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;POST_Default&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;testPostDefault()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;POST_JSON&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;testPostJson()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PUT&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;testPUT()&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> getUrl = <span class="string">&quot;https://local.expediapartnercentral.com.lisqa7.sb.karmalab.net:8443/contentmain/getDepositsRoomAndRatePlanInfo.json?htid=759&quot;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> postUrl = <span class="string">&quot;https://local.expediapartnercentral.com.lisqa7.sb.karmalab.net:8443/contentmain/saveReservationDeposits.json?htid=759&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">testGetDefault</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        sendAjax(<span class="string">&quot;GET&quot;</span>,getUrl, <span class="string">&quot;json&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">testGetJSON</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        sendAjax(<span class="string">&quot;GET&quot;</span>,getUrl, <span class="string">&quot;json&quot;</span>, <span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">testPostDefault</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        sendAjax(<span class="string">&quot;POST&quot;</span>,postUrl, <span class="string">&quot;json&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">testPostJson</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        sendAjax(<span class="string">&quot;POST&quot;</span>,postUrl, <span class="string">&quot;json&quot;</span>, <span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">testPUT</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        sendAjax(<span class="string">&quot;PUT&quot;</span>,postUrl, <span class="string">&quot;json&quot;</span>, <span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">sendAjax</span>(<span class="params">type, url, dataType, contentType</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax( &#123; </span></span><br><span class="line">            type: type,</span><br><span class="line">            url:  url,</span><br><span class="line">            xhrFields: &#123;</span><br><span class="line"><span class="javascript">                withCredentials: <span class="literal">true</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            dataType : dataType, <span class="comment">// accept type</span></span></span><br><span class="line"><span class="javascript">            contentType: contentType,  <span class="comment">//request type, default is application/x-www-form-urlencoded</span></span></span><br><span class="line"><span class="javascript">            success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(result);</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            error: <span class="function"><span class="keyword">function</span> (<span class="params">xhr</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(xhr);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h4><p><strong>GET default:</strong><br>只发送一个正常的get请求。</p><p><strong>GET json:</strong></p><p>先发送一个options如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">General:</span><br><span class="line">Request URL:https:&#x2F;&#x2F;local.expediapartnercentral.com.lisqa7.sb.karmalab.net:8443&#x2F;contentmain&#x2F;getDepositsRoomAndRatePlanInfo.json?htid&#x3D;759</span><br><span class="line">Request Method:OPTIONS</span><br><span class="line">Status Code:200 OK</span><br><span class="line">Remote Address:127.0.0.1:8443</span><br><span class="line"></span><br><span class="line">Response Headers:</span><br><span class="line">Access-Control-Allow-Credentials:true</span><br><span class="line">Access-Control-Allow-Headers:Content-Type, Cookie, Accept-Encoding, User-Agent, Host, Referer, X-Requested-With, Accept, Accept-Language, Cache-Control, Connection</span><br><span class="line">Access-Control-Allow-Methods:GET, POST, PUT, DELETE, OPTIONS</span><br><span class="line">Access-Control-Allow-Origin:http:&#x2F;&#x2F;cros.expediapartnercentral.com.lisqa7.sb.karmalab.net:3001</span><br><span class="line">Content-Length:0</span><br><span class="line">Date:Thu, 30 Mar 2017 12:47:44 GMT</span><br><span class="line">Server:Apache-Coyote&#x2F;1.1</span><br><span class="line"></span><br><span class="line">Request Headers:</span><br><span class="line">Accept:*&#x2F;*</span><br><span class="line">Accept-Encoding:gzip, deflate, sdch, br</span><br><span class="line">Accept-Language:zh-CN,zh;q&#x3D;0.8</span><br><span class="line">Access-Control-Request-Headers:content-type</span><br><span class="line">Access-Control-Request-Method:GET</span><br><span class="line">Connection:keep-alive</span><br><span class="line">Host:local.expediapartnercentral.com.lisqa7.sb.karmalab.net:8443</span><br><span class="line">Origin:http:&#x2F;&#x2F;cros.expediapartnercentral.com.lisqa7.sb.karmalab.net:3001</span><br><span class="line">Referer:http:&#x2F;&#x2F;cros.expediapartnercentral.com.lisqa7.sb.karmalab.net:3001&#x2F;test.html</span><br><span class="line">User-Agent:Mozilla&#x2F;5.0 (Windows NT 6.3; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;56.0.2924.87 Safari&#x2F;537.36</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后再发送正常的Get请求。</p><p><strong>post default:</strong><br>正常发送请求。</p><p><strong>post json:</strong> 先发送一个options请求。然后再发送正常的请求。<br>其他同理，总之，非简单跨域会多发一次options请求来确认是否支持跨域，这时候服务端一定要返回支持跨域，并且直接返回即可。</p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ul><li><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html">跨域资源共享 CORS 详解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8学习(3)- Lambda 表达式</title>
      <link href="2017/07/21/java8-lambda/"/>
      <url>2017/07/21/java8-lambda/</url>
      
        <content type="html"><![CDATA[<blockquote><p>猪脚：以下内容参考《Java 8 in Action》</p></blockquote><p>本次学习内容：</p><blockquote><ul><li>Lambda 基本模式</li><li>环绕执行模式</li><li>函数式接口，类型推断</li><li>方法引用</li><li>Lambda 复合    </li></ul></blockquote><p>代码： <a href="https://github.com/Ryan-Miao/someTest/blob/master/src/main/java/com/test/java8/c3/AppleSort.java">https://github.com/Ryan-Miao/someTest/blob/master/src/main/java/com/test/java8/c3/AppleSort.java</a></p><a id="more"></a><h2 id="上一篇Java8学习-2-通过行为参数化传递代码–lambda代替策略模式"><a href="#上一篇Java8学习-2-通过行为参数化传递代码–lambda代替策略模式" class="headerlink" title="上一篇Java8学习(2)- 通过行为参数化传递代码–lambda代替策略模式"></a>上一篇<a href="http://ryan-miao.oschina.io/2017/07/15/java8-in-action-2/">Java8学习(2)- 通过行为参数化传递代码–lambda代替策略模式</a></h2><h1 id="1-结构"><a href="#1-结构" class="headerlink" title="1. 结构"></a>1. 结构</h1><p>初始化一个比较器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Apple&gt; byWeight = <span class="keyword">new</span> Comparator&lt;Apple&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">copare</span><span class="params">(Apple a1, Apple a2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a1.getWeight().compareTo(a2.getWeight() );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用Lambda表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Apple&gt; byWeight = (Apple a1, Apple a2) -&gt; a1.getWeight().compareTo(a2.getWeight() );</span><br></pre></td></tr></table></figure><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/lambdalambda.png"></p><ul><li>参数列表–compare方法的的两个参数</li><li>箭头 — 把参数列表与lambda主体分割开</li><li>Lambda主体 — 表达式的值就是Lambda的返回值</li></ul><h2 id="1-1-Java8中有效的Lambda表达式"><a href="#1-1-Java8中有效的Lambda表达式" class="headerlink" title="1.1 Java8中有效的Lambda表达式"></a>1.1 Java8中有效的Lambda表达式</h2><p>接收一个字符串，并返回字符串长度int</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(String a) -&gt; s.length()</span><br></pre></td></tr></table></figure><p>接收一个Apple类参数，返回一个boolean值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(Apple a) -&gt; a.getWeight() &gt; <span class="number">150</span></span><br></pre></td></tr></table></figure><p>接收两个参数，没有返回值(void)，多行语句需要用大括号包围</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Result:&quot;</span>);</span><br><span class="line">    System.out.println(x + y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不接收参数，返回一个值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">()-&gt; <span class="number">42</span></span><br></pre></td></tr></table></figure><p>接收两个参数，返回一个值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(Apple a1, Apple a2) -&gt; a1.getWeight().compareTo(a2.getWeight() );</span><br></pre></td></tr></table></figure><h2 id="1-2-Lambda的基本语法"><a href="#1-2-Lambda的基本语法" class="headerlink" title="1.2 Lambda的基本语法"></a>1.2 Lambda的基本语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(parameters) -&gt; expression</span><br><span class="line">或</span><br><span class="line">(parameters) -&gt; &#123;statements&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="2-函数式接口"><a href="#2-函数式接口" class="headerlink" title="2. 函数式接口"></a>2. 函数式接口</h1><p>在上次的学习中的<a href="http://ryan-miao.oschina.io/2017/07/15/java8-in-action-2/">通过行为参数化传递代码</a>, <code>Predicate(T)</code>就是一个函数式接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>函数式接口</strong>就是只定义一个抽象方法的接口。<br>Java API中很多符合这个条件。比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(T o)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callable</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">V <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-1-函数式接口可以做什么"><a href="#2-1-函数式接口可以做什么" class="headerlink" title="2.1 函数式接口可以做什么"></a>2.1 函数式接口可以做什么</h2><p>Lambda表达式允许你直接以内联的形式为函数式接口的抽象方法提供实现，<strong>并把表达式作为函数式接口的实例</strong>（函数式接口一个具体实现的实例）。就像内部类一样，但看起来比内部类简洁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Runnable r1 = () -&gt; System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">Runnable r2 = <span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">    r.run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">process(r1);</span><br><span class="line">process(r2);</span><br><span class="line">process(() -&gt; System.out.println(<span class="number">3</span>));</span><br></pre></td></tr></table></figure><p><code>@FunctionalInterface</code>是一个标注，用来告诉编译器这是一个函数式接口，如果不满足函数式接口的条件，编译器就会报错。当然，这不是必须的。好处是编译器帮助检查问题。</p><h1 id="3-一步步修改为Lambda表达式"><a href="#3-一步步修改为Lambda表达式" class="headerlink" title="3. 一步步修改为Lambda表达式"></a>3. 一步步修改为Lambda表达式</h1><p>Lambda式提供了传递方法的能力。这种能力首先可以用来处理样板代码。比如JDBC连接，比如file读写。这些操作会有try-catcha-finally，但我们更关心的是中间的部分。那么，是不是可以将中间的部分提取出来，当做参数传递进来？</p><h2 id="3-1-第1步：-行为参数化"><a href="#3-1-第1步：-行为参数化" class="headerlink" title="3.1 第1步： 行为参数化"></a>3.1 第1步： 行为参数化</h2><p>下面是读一行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;data.txt&quot;</span>))) &#123;</span><br><span class="line">        <span class="keyword">return</span> br.readLine();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/lambda-readlambda-read.png"></p><p>行为参数化就是把一个过程行为转换成参数。在这里就是将<code>br.readLine()</code>提取成参数。</p><h2 id="3-2-第2步：使用函数式接口来传递行为"><a href="#3-2-第2步：使用函数式接口来传递行为" class="headerlink" title="3.2 第2步：使用函数式接口来传递行为"></a>3.2 第2步：使用函数式接口来传递行为</h2><p>定义一个接口来执行上述的行为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BufferedReaderProcessor</span></span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">process</span><span class="params">(BufferedReader b)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后把这个接口当作参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">(BufferedReaderProcessor p)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>(BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;data.txt&quot;</span>)))&#123;</span><br><span class="line">        <span class="keyword">return</span> p.process(br);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-第3步：-传递Lambda"><a href="#3-3-第3步：-传递Lambda" class="headerlink" title="3.3 第3步： 传递Lambda"></a>3.3 第3步： 传递Lambda</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    String oneLine = read(BufferedReader::readLine);</span><br><span class="line">    String twoLine = read((BufferedReader b) -&gt; b.readLine() + b.readLine());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此，我们就把中间的逻辑抽出来了。把行为抽象成一个接口调用，然后通过Lambda来实现接口的行为。传递参数。完毕。</p><h1 id="4-Java-API中内置的一些函数式接口"><a href="#4-Java-API中内置的一些函数式接口" class="headerlink" title="4. Java API中内置的一些函数式接口"></a>4. Java API中内置的一些函数式接口</h1><p>Java API中内置了一些很有用的Function接口。</p><h2 id="4-1-Predicate"><a href="#4-1-Predicate" class="headerlink" title="4.1 Predicate"></a>4.1 Predicate</h2><p><strong><code>java.util.function.Predicate&lt;T&gt; </code>定义了一个抽象方法，返回一个<code>boolean</code>。</strong><br>使用demo如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt;  <span class="function">List&lt;T&gt; <span class="title">filter</span><span class="params">(List&lt;T&gt; list, Predicate&lt;T&gt; p)</span></span>&#123;</span><br><span class="line">    List&lt;T&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (T t : list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p.test(t))&#123;</span><br><span class="line">            results.add(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPredicate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">    List&lt;String&gt; noEmpty = filter(list, (String s) -&gt; !s.isEmpty());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-Consuer"><a href="#4-2-Consuer" class="headerlink" title="4.2 Consuer"></a>4.2 Consuer</h2><p><strong><code>java.util.function.Consumer&lt;T&gt;</code>定义了一个抽象方法，接收一个参数。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">forEach</span><span class="params">(List&lt;T&gt; list, Consumer&lt;T&gt; c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (T t : list) &#123;</span><br><span class="line">        c.accept(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConsumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">    forEach(integers, System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-Function"><a href="#4-3-Function" class="headerlink" title="4.3 Function"></a>4.3 Function</h2><p>**<code>java.util.function.Function&lt;T,R&gt;</code>**定义了一个抽象方法，接收一个参数<code>T</code>，返回一个对象<code>R</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T,R&gt; <span class="function">List&lt;R&gt; <span class="title">map</span><span class="params">(List&lt;T&gt; list, Function&lt;T,R&gt; f)</span></span>&#123;</span><br><span class="line">    List&lt;R&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (T t : list) &#123;</span><br><span class="line">        result.add(f.apply(t));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFunction</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">    List&lt;Integer&gt; lengths = map(strings, String::length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-基本类型函数接口"><a href="#4-4-基本类型函数接口" class="headerlink" title="4.4 基本类型函数接口"></a>4.4 基本类型函数接口</h2><p>前面三个泛型函数式接口<code>Predicate&lt;T&gt;</code>、<code>Consumer&lt;T&gt;</code>、<code>Function&lt;T,R&gt;</code>，这些接口是专门为引用类型设计的。那么基本类型怎么办？我们知道可以自动装箱嘛。但装箱是有损耗的。装箱(boxing)的本质是把原始类型包裹起来，并保存在堆里。因此装箱后的值需要更多的内存，并需要额外的内存搜索来获取包裹的原始值。</p><p>Java8为函数式接口带来了专门的版本。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIntPredicate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//无装箱</span></span><br><span class="line">    IntPredicate intPredicate = (<span class="keyword">int</span> t) -&gt; t%<span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span> isEven = intPredicate.test(<span class="number">100</span>);</span><br><span class="line">    Assert.assertTrue(isEven);</span><br><span class="line">    <span class="comment">//装箱</span></span><br><span class="line">    Predicate&lt;Integer&gt; integerPredicate = (Integer i) -&gt; i%<span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span> isEven2 = integerPredicate.test(<span class="number">100</span>);</span><br><span class="line">    Assert.assertTrue(isEven2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似的还有:</p><p>Java 8中的常用函数式接口<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/java-function-1.png"><br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/java-function2.png"></p><h1 id="5-Lambda原理"><a href="#5-Lambda原理" class="headerlink" title="5. Lambda原理"></a>5. Lambda原理</h1><ul><li>编译器可以推断出方法的参数类型，由此可以省略一些样板代码。</li><li>void和其他返回值做了兼容性处理</li></ul><h1 id="6-Lambda的局部变量"><a href="#6-Lambda的局部变量" class="headerlink" title="6. Lambda的局部变量"></a>6. Lambda的局部变量</h1><p>在Lambda中可以使用局部变量，但要求必须是final的。因为Lambda可能在另一个线程中运行，而局部变量是在栈上的，Lambda作为额外的线程会拷贝一份变量副本。这样可能会出现同步问题，因为主线程的局部变量或许已经被回收了。基于此，必须要求final的。</p><p>而实例变量则没问题，因为实例变量存储于堆中，堆是共享的。</p><h1 id="7-方法引用"><a href="#7-方法引用" class="headerlink" title="7. 方法引用"></a>7. 方法引用</h1><p>Lambda表达式可以用方法引用来表示。比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(String s) -&gt; s.length()</span><br><span class="line">==</span><br><span class="line">String::length</span><br></pre></td></tr></table></figure><p>这是因为可以通过Lambda表达式的参数以及方法来确定一个方法。在这里，每个方法都叫做<code>方法签名</code>。方法签名由<strong>方法名+参数列表</strong>唯一确定。其实就是重载的判断方式。</p><p>当Lambda的主体只是一个简单的方法调用的时候，我们可以直接使用一个方法引用来代替。方法引用可以知道要接受的参数类型，以及方法体的逻辑。</p><p>方法引用结构：<br><code>类名::方法名</code>  </p><p>什么可以使用方法引用？</p><ul><li>静态方法。   </li><li>指向任意类型实例方法的方法引用。  </li><li>指向现有对象的实例方法。</li></ul><h1 id="8-构造函数引用"><a href="#8-构造函数引用" class="headerlink" title="8. 构造函数引用"></a>8. 构造函数引用</h1><p>构造函数可以通过<code>类名::new</code>的方式引用。</p><h1 id="9-Lambda实战"><a href="#9-Lambda实战" class="headerlink" title="9. Lambda实战"></a>9. Lambda实战</h1><p>目标： 用不同的排序策略给apple排序。<br>过程： 把一个原始粗暴的解决方案变得更加简单。<br>资料： <code>行为参数化</code>, <code>匿名类</code>，<code>Lambda</code>, <code>方法引用</code>.<br>最终： <code>inventory.sort(comparing(Apple::getWeight) );</code>    </p><h2 id="9-1-原始方案"><a href="#9-1-原始方案" class="headerlink" title="9.1 原始方案"></a>9.1 原始方案</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by ryan on 7/20/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleSort</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Apple&gt; inventory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        inventory = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        inventory.add(<span class="keyword">new</span> Apple(<span class="string">&quot;red&quot;</span>, <span class="number">1</span>));</span><br><span class="line">        inventory.add(<span class="keyword">new</span> Apple(<span class="string">&quot;red&quot;</span>, <span class="number">3</span>));</span><br><span class="line">        inventory.add(<span class="keyword">new</span> Apple(<span class="string">&quot;red&quot;</span>, <span class="number">2</span>));</span><br><span class="line">        inventory.add(<span class="keyword">new</span> Apple(<span class="string">&quot;red&quot;</span>, <span class="number">21</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort_old</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Collections.sort(inventory, <span class="keyword">new</span> Comparator&lt;Apple&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Apple o1, Apple o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getWeight() - o2.getWeight();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        printApples();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printApples</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        inventory.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>排序首先要注意的一点就是排序的标准。那么要搞清楚为什么这样写？  </p><p>Comparator定义的其实就是一个方法，此处就是将排序的原则抽取出来。特别符合Lambda的思想！这里先不说Lambda，先说这个方法的作用：<strong>定义什么时候发生交换</strong>。<br>跟踪源码可以发现这样一段代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java.util.Arrays#mergeSort(java.lang.Object[], java.lang.Object[], int, int, int, java.util.Comparator)</span></span><br><span class="line"><span class="keyword">if</span> (length &lt; INSERTIONSORT_THRESHOLD) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=low; i&lt;high; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=i; j&gt;low &amp;&amp; c.compare(dest[j-<span class="number">1</span>], dest[j])&gt;<span class="number">0</span>; j--)</span><br><span class="line">            swap(dest, j, j-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设比较的两个数为<code>o1</code>和<code>o2</code>，并且<code>o1</code>在<code>o2</code>前一位(left&gt;right)。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">....o1,o2...</span><br></pre></td></tr></table></figure><p><code>compare(o1,o2)</code>的结果大于0则，<code>o1</code>和<code>o2</code>交换。那么，显然，如果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compare(o1,o2) = o1-o2</span><br></pre></td></tr></table></figure><p>则说明，前一个值比后一个值大的时候，发生交换。也即大的往后冒泡。就是升序了。<br>所以：     </p><ul><li><code>o1-o2</code> 升序</li><li><code>o2-o1</code> 降序</li></ul><h2 id="9-2-使用List内置sort"><a href="#9-2-使用List内置sort" class="headerlink" title="9.2 使用List内置sort"></a>9.2 使用List内置sort</h2><p>好消息是Java8提供了sort方法给list：<code>java.util.List#sort</code>:<br>则原始方案转换为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    inventory.sort(<span class="keyword">new</span> Comparator&lt;Apple&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Apple o1, Apple o2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> o1.getWeight() - o2.getWeight();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    printApples();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-3-Lambda表达式代替匿名内部类"><a href="#9-3-Lambda表达式代替匿名内部类" class="headerlink" title="9.3 Lambda表达式代替匿名内部类"></a>9.3 Lambda表达式代替匿名内部类</h2><p>从之前的学习可以得到，几乎所有的匿名内部类都可以用Lambda表达式替代！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inventory.sort((o1, o2) -&gt; o1.getWeight() - o2.getWeight());</span><br></pre></td></tr></table></figure><h2 id="9-4-进一步优化Lambda"><a href="#9-4-进一步优化Lambda" class="headerlink" title="9.4 进一步优化Lambda"></a>9.4 进一步优化Lambda</h2><p><code>Comparator</code>提供了一个生成Comparator的方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T, U extends Comparable&lt;? <span class="keyword">super</span> U&gt;&gt; <span class="function">Comparator&lt;T&gt; <span class="title">comparing</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            Function&lt;? <span class="keyword">super</span> T, ? extends U&gt; keyExtractor)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Objects.requireNonNull(keyExtractor);</span><br><span class="line">    <span class="keyword">return</span> (Comparator&lt;T&gt; &amp; Serializable)</span><br><span class="line">        (c1, c2) -&gt; keyExtractor.apply(c1).compareTo(keyExtractor.apply(c2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>Function&lt;T,R&gt;</code>已经在前面学习过了，就是一个接受一个参数并返回另一个参数的函数式接口。在本例中，<code>apple.getWeight()</code>符合接受一个参数<code>apple</code>返回一个<code>int</code>。那么，就可以使用这个方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inventory.sort(Comparator.comparing((Apple a)-&gt;a.getWeight()));</span><br></pre></td></tr></table></figure><p>进一步，将Lambda改为方法引用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inventory.sort(Comparator.comparing(Apple::getWeight));</span><br></pre></td></tr></table></figure><p>这里有个问题，记得之前讲的基本类型的自动装箱吗。<code>Apple::getWeight</code>的返回值是<code>int</code>。而<code>comparing</code>的返回值是一个对象。那么，必然要经过自动装箱的过程。所以，应该使用基本类型的函数式接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inventory.sort(Comparator.comparingInt(Apple::getWeight));</span><br></pre></td></tr></table></figure><p>至此，基本已经改造完毕了。最多就是静态引入<code>comparingInt</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inventory.sort(comparingInt(Apple::getWeight));</span><br></pre></td></tr></table></figure><p>目标达到。相比原始方法，不要太简洁！</p><p>话说，这种是不是只能默认升序？因此没有任何一个单词可以看出排序规则。</p><p>是的，想要降序？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inventory.sort(comparingInt(Apple::getWeight).reversed());</span><br></pre></td></tr></table></figure><h1 id="10-复合Lambda"><a href="#10-复合Lambda" class="headerlink" title="10 复合Lambda"></a>10 复合Lambda</h1><p>上节看到逆序的方法就是后面追加一个逆序的方法。现在需求变更了。需要先按照颜色排序，然后再按照重量从大到小排序。</p><h2 id="10-1-比较器链"><a href="#10-1-比较器链" class="headerlink" title="10.1 比较器链"></a>10.1 比较器链</h2><p>这里，一共涉及了3个过程。往常的做法是连续写在一个方法里，或者3个方法连续调用。Lambda提供了类似语句陈述一般的写法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inventory.sort(comparing(Apple::getColor)</span><br><span class="line">       .reversed()</span><br><span class="line">       .thenComparingInt(Apple::getWeight));</span><br></pre></td></tr></table></figure><h2 id="10-2-谓词复合"><a href="#10-2-谓词复合" class="headerlink" title="10.2 谓词复合"></a>10.2 谓词复合</h2><p>前面的<code>Prediacate</code>接口包含4个方法：<code>negate</code>,<code>and</code>,<code>or</code>，<code>isEqual</code>，对应逻辑运算里的<code>取反</code>,<code>且</code>,<code>或</code>,<code>==</code>。这样，通过复合就可以写出语义声明式的代码：</p><p>想要红苹果:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;Apple&gt; red = apple -&gt; <span class="string">&quot;red&quot;</span>.equalsIgnoreCase(apple.getColor());</span><br></pre></td></tr></table></figure><p>想要不是红的苹果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;Apple&gt; nonRed = red.negate();</span><br></pre></td></tr></table></figure><p>想要大的红苹果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;Apple&gt; redAndHeavy = red.and(apple -&gt; apple.getWeight() &gt; <span class="number">150</span>);</span><br></pre></td></tr></table></figure><p>想要大的红苹果或者绿色的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;Apple&gt; redAndHeavyOrGreen = redAndHeavy.or(apple -&gt; <span class="string">&quot;green&quot;</span>.equalsIgnoreCase(apple.getColor()));</span><br><span class="line">或者：</span><br><span class="line">redAndHeavyOrGreen = ((Predicate&lt;Apple&gt;) apple -&gt; <span class="string">&quot;red&quot;</span>.equalsIgnoreCase(apple.getColor()))</span><br><span class="line">                .and(apple -&gt; apple.getWeight() &gt; <span class="number">150</span>)</span><br><span class="line">                .or(apple -&gt; <span class="string">&quot;green&quot;</span>.equalsIgnoreCase(apple.getColor()));</span><br></pre></td></tr></table></figure><h2 id="10-3-函数复合"><a href="#10-3-函数复合" class="headerlink" title="10.3 函数复合"></a>10.3 函数复合</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f(x) &#x3D; (x+1) * 2;</span><br><span class="line">求 f(2)</span><br></pre></td></tr></table></figure><p>普通写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Assert.assertEquals(<span class="number">6</span>, f(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x + <span class="number">1</span>) * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数式可以这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;Integer, Integer&gt; f = x -&gt; x +<span class="number">1</span>;</span><br><span class="line">Function&lt;Integer, Integer&gt; g = x -&gt; x * <span class="number">2</span>;</span><br><span class="line">Function&lt;Integer, Integer&gt; h = f.andThen(g);</span><br><span class="line"><span class="keyword">int</span> r = h.apply(<span class="number">2</span>);</span><br><span class="line">Assert.assertEquals(<span class="number">6</span>, r);</span><br></pre></td></tr></table></figure><p>看起来似乎更麻烦了，但这只是一个举例。事实上，Function提供了连续处理逻辑的能力，可以不断的处理上一次计算的返回值。</p><p>比如，封装一个写信的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Letter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">addHeader</span><span class="params">(String text)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;From Ryan Miao: &quot;</span> + text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">addFooter</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> text + <span class="string">&quot; Kind regards&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">checkSpelling</span><span class="params">(String text)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> text.replace(<span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;&amp;lt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFunction3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Function&lt;String, String&gt; transformationPipeline =</span><br><span class="line">            ((Function&lt;String, String&gt;)Letter::addHeader)</span><br><span class="line">                    .andThen(Letter::checkSpelling)</span><br><span class="line">                    .andThen(Letter::addFooter);</span><br><span class="line">    String letter = transformationPipeline.apply(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">    Assert.assertEquals(<span class="string">&quot;From Ryan Miao: Hello world! Kind regards&quot;</span>, letter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="11-小结"><a href="#11-小结" class="headerlink" title="11 小结"></a>11 小结</h1><ul><li><strong>Lambda表达式可以理解为一种匿名函数</strong>：它没有名称，但有参数列表、函数主题、返回值类型，可能还有一个可以抛出的异常列表。</li><li>Lambda表达式让你可以更简洁的<strong>传递代码</strong>。</li><li>函数式接口就是仅仅声明了<strong>一个抽象方法</strong>的接口。</li><li>只有在接受函数式接口的地方才可以使用Lambda表达式。</li><li>Lambda表达式允许你直接内联，为函数式接口的抽象方法提供实现，并且<strong>将整个表达式作为函数式接口的一个实例</strong>。</li><li>Java 8自带了一些常用函数式接口，放在<code>java.util.function</code>里。包括<code>Prediacate&lt;T&gt;</code>,<code>Function&lt;T,R&gt;</code>,<code>Supplier&lt;T&gt;</code>,<code>Consumer&lt;T&gt;</code>,<code>BinaryOperator&lt;T&gt;</code>。</li><li>为了避免装箱操作，对Predicate<T>和Function&lt;T,R&gt;等通用函数式接口的原始类特殊化：IntPredicate,InToLong等。</li><li>环绕执行模式（方法的中间代码）可以配合Lambda提高灵活性和可重用性。</li><li>Lambda表达式所需要代表的类型成为目标类型。</li><li>Comparator,Predicate,Function等函数接口都有几个可以用来结合Lambda表达式的默认方法。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8 </tag>
            
            <tag> Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git合并历史提交</title>
      <link href="2017/07/19/git-rebase/"/>
      <url>2017/07/19/git-rebase/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>以前一直觉得只要pull和push就够了，但合作中总会遇到各种非理想的情况。这时候才发现git其他命令的作用。</p><p>现在的情况是，repo是一个远程team维护的，我们需要增加新feature，那么就是一个feature分支了。由于开发中各种修改，本feature分支多次commit。最后，交给远程team review的时候，人家看着乱七八糟的修改历史很蛋疼：很难看懂各种增量修改。其实，对人家来说，我们的改动应该就是增加或者删除。给他们看开发过程的增量反而太乱。于是，人家要求我们将feature分支的提交合并，这样看起来清爽。</p><a id="more"></a><h1 id="一些简单的命令准备"><a href="#一些简单的命令准备" class="headerlink" title="一些简单的命令准备"></a>一些简单的命令准备</h1><p>合并分支的命令是<code>rebase</code>，除此之外，其他的一些命令也应该知晓。</p><p>查看commit历史</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><p>查看当前状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>添加所有文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>提交修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;本次提交添加了xxxx&quot;</span><br></pre></td></tr></table></figure><h2 id="vim的简单指令："><a href="#vim的简单指令：" class="headerlink" title="vim的简单指令："></a>vim的简单指令：</h2><p>参阅<a href="https://ryan-miao.github.io/2017/07/19/vim/">vim的简单使用</a></p><h1 id="准备一个测试repo"><a href="#准备一个测试repo" class="headerlink" title="准备一个测试repo"></a>准备一个测试repo</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init test-rebase</span><br><span class="line">cd test-rebase</span><br></pre></td></tr></table></figure><p>提交一个文件多次：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vim test.txt</span><br><span class="line">&#x2F;&#x2F;输入第一次提交。   </span><br><span class="line"></span><br><span class="line">git add test.txt</span><br><span class="line">git commit -m &quot;1&quot;</span><br><span class="line"></span><br><span class="line">vim test.txt</span><br><span class="line">&#x2F;&#x2F;输入第2次提交。   </span><br><span class="line"></span><br><span class="line">git add test.txt</span><br><span class="line">git commit -m &quot;2&quot;</span><br><span class="line"></span><br><span class="line">vim test.txt</span><br><span class="line">&#x2F;&#x2F;输入第3次提交。   </span><br><span class="line"></span><br><span class="line">git add test.txt</span><br><span class="line">git commit -m &quot;3&quot;</span><br></pre></td></tr></table></figure><p>查看log:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</span><br><span class="line">commit 0353373749d72e53a34c7bdda86d77d7bb3ca6fe</span><br><span class="line">Author: ryan &lt;v-rmiao@expedia.com&gt;</span><br><span class="line">Date:   Wed Jul 19 13:23:18 2017 +0800</span><br><span class="line"></span><br><span class="line">    3</span><br><span class="line"></span><br><span class="line">commit acf6d24adc2097fda82d29064e8edfef6355d01d</span><br><span class="line">Author: ryan &lt;v-rmiao@expedia.com&gt;</span><br><span class="line">Date:   Wed Jul 19 13:20:37 2017 +0800</span><br><span class="line"></span><br><span class="line">    2</span><br><span class="line"></span><br><span class="line">commit 2169bc5e20386951b19aff32143e74f2da683df2</span><br><span class="line">Author: ryan &lt;v-rmiao@expedia.com&gt;</span><br><span class="line">Date:   Wed Jul 19 13:19:42 2017 +0800</span><br><span class="line"></span><br><span class="line">    1</span><br></pre></td></tr></table></figure><p>可以看到有三次提交了。现在我们想要把第2次和第3次提交的内容合并成一次提交。</p><h1 id="开始rebase"><a href="#开始rebase" class="headerlink" title="开始rebase"></a>开始rebase</h1><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/git-rebase.png"></p><h2 id="1-复制合并前的一次提交的hash"><a href="#1-复制合并前的一次提交的hash" class="headerlink" title="1. 复制合并前的一次提交的hash"></a>1. 复制合并前的一次提交的hash</h2><p>这里就是第一次提交的hash。即<code>2169bc5e2</code></p><h2 id="2-git-rebase-i-xxx"><a href="#2-git-rebase-i-xxx" class="headerlink" title="2. git rebase -i xxx"></a>2. git rebase -i xxx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i 2169bc5e2</span><br></pre></td></tr></table></figure><p>进入历史提交的编辑页面，此时编辑方式为vim。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pick acf6d24 2</span><br><span class="line">pick 0353373 3</span><br><span class="line"></span><br><span class="line"># Rebase 2169bc5..0353373 onto 2169bc5 (2 commands)</span><br><span class="line">#</span><br><span class="line"># Commands:</span><br><span class="line"># p, pick &#x3D; use commit</span><br><span class="line"># r, reword &#x3D; use commit, but edit the commit message</span><br><span class="line"># e, edit &#x3D; use commit, but stop for amending</span><br><span class="line"># s, squash &#x3D; use commit, but meld into previous commit</span><br><span class="line"># f, fixup &#x3D; like &quot;squash&quot;, but discard this commit&#39;s log message</span><br><span class="line"># x, exec &#x3D; run command (the rest of the line) using shell</span><br><span class="line"># d, drop &#x3D; remove commit</span><br><span class="line">#</span><br><span class="line"># These lines can be re-ordered; they are executed from top to bottom.</span><br><span class="line">#</span><br><span class="line"># If you remove a line here THAT COMMIT WILL BE LOST.</span><br><span class="line">#</span><br><span class="line"># However, if you remove everything, the rebase will be aborted.</span><br><span class="line">#</span><br><span class="line"># Note that empty commits are commented out</span><br></pre></td></tr></table></figure><p>可以看到第2次和第3次的提交消息，并且是从old-&gt;new来排序的。我们需要把第3次提交合并到第2次上。使用<code>squash</code>.</p><h2 id="squash"><a href="#squash" class="headerlink" title="squash"></a>squash</h2><p>修改第三次提交为<code>squash</code>，意思是和前一次(第二次)提交合并。<br>键盘按键<code>j</code>移动到第二行，然后按<code>a</code>开始编辑，删除<code>pick</code>，插入<code>squash</code><br>如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pick acf6d24 2</span><br><span class="line">squash  0353373 3</span><br><span class="line"></span><br><span class="line"># Rebase 2169bc5..0353373 onto 2169bc5 (2 commands)</span><br><span class="line">#</span><br><span class="line"># Commands:</span><br><span class="line"># p, pick &#x3D; use commit</span><br><span class="line"># r, reword &#x3D; use commit, but edit the commit message</span><br><span class="line"># e, edit &#x3D; use commit, but stop for amending</span><br><span class="line"># s, squash &#x3D; use commit, but meld into previous commit</span><br><span class="line"># f, fixup &#x3D; like &quot;squash&quot;, but discard this commit&#39;s log message</span><br><span class="line"># x, exec &#x3D; run command (the rest of the line) using shell</span><br><span class="line"># d, drop &#x3D; remove commit</span><br><span class="line">#</span><br><span class="line"># These lines can be re-ordered; they are executed from top to bottom.</span><br><span class="line">#</span><br><span class="line"># If you remove a line here THAT COMMIT WILL BE LOST.</span><br><span class="line">#</span><br><span class="line"># However, if you remove everything, the rebase will be aborted.</span><br><span class="line">#</span><br><span class="line"># Note that empty commits are commented out</span><br></pre></td></tr></table></figure><p>然后，按<code>esc</code>退出编辑，再按<code>:</code>,输入<code>wq</code>保存。<br>这时候会进入第二个vim页面，这里让我们再次修改commit message的。就是合并后的message。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># This is a combination of 2 commits.</span><br><span class="line">这是合并后的message，以下是之前合并的历史</span><br><span class="line"># This is the 1st commit message:</span><br><span class="line"></span><br><span class="line">2</span><br><span class="line"></span><br><span class="line"># This is the commit message #2:</span><br><span class="line"></span><br><span class="line">3</span><br><span class="line"></span><br><span class="line"># Please enter the commit message for your changes. Lines starting</span><br><span class="line"># with &#39;#&#39; will be ignored, and an empty message aborts the commit.</span><br><span class="line">#</span><br><span class="line"># Date:      Wed Jul 19 13:20:37 2017 +0800</span><br><span class="line">#</span><br><span class="line"># interactive rebase in progress; onto 2169bc5</span><br><span class="line"># Last commands done (2 commands done):</span><br><span class="line">#    pick acf6d24 2</span><br><span class="line">#    squash 0353373 3</span><br><span class="line"># No commands remaining.</span><br><span class="line"># You are currently editing a commit while rebasing branch &#39;master&#39; on &#39;2169bc5&#39;.</span><br><span class="line">#</span><br><span class="line"># Changes to be committed:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还是和刚才一样，按<code>o</code>插入下一行，输入这次合并的message。然后按<code>esc</code>，按<code>:</code>， 输入<code>wq</code>保存并退出。</p><h2 id="完事，再次查看log"><a href="#完事，再次查看log" class="headerlink" title="完事，再次查看log"></a>完事，再次查看log</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">commit 8f54e6b5643ff26ac967a9e6e6cded68a6c50906</span><br><span class="line">Author: ryan &lt;v-rmiao@expedia.com&gt;</span><br><span class="line">Date:   Wed Jul 19 13:20:37 2017 +0800</span><br><span class="line"></span><br><span class="line">    这是合并后的message，以下是之前合并的历史</span><br><span class="line"></span><br><span class="line">    2</span><br><span class="line"></span><br><span class="line">    3</span><br><span class="line"></span><br><span class="line">commit 2169bc5e20386951b19aff32143e74f2da683df2</span><br><span class="line">Author: ryan &lt;v-rmiao@expedia.com&gt;</span><br><span class="line">Date:   Wed Jul 19 13:19:42 2017 +0800</span><br><span class="line"></span><br><span class="line">    1</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2">https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2</a><br><a href="https://github.com/geeeeeeeeek/git-recipes/wiki/2.7-%E9%87%8D%E5%86%99%E9%A1%B9%E7%9B%AE%E5%8E%86%E5%8F%B2">https://github.com/geeeeeeeeek/git-recipes/wiki/2.7-%E9%87%8D%E5%86%99%E9%A1%B9%E7%9B%AE%E5%8E%86%E5%8F%B2</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim的简单使用</title>
      <link href="2017/07/19/vim/"/>
      <url>2017/07/19/vim/</url>
      
        <content type="html"><![CDATA[<h1 id="VIM"><a href="#VIM" class="headerlink" title="VIM"></a>VIM</h1><p>使用vim编辑文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim xxx</span><br></pre></td></tr></table></figure><p>进入之后的界面叫做命令模式界面。可以修改文件编辑的时候叫做插入模式。</p><h2 id="命令模式-冒号-指令"><a href="#命令模式-冒号-指令" class="headerlink" title="(命令模式)冒号+指令"></a>(命令模式)冒号+指令</h2><p>在vim命令模式界面想要退出，需要输入冒号和指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:wq   保存并退出</span><br><span class="line">:q  维修改退出</span><br><span class="line">:q! 强制退出并不保存</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="命令模式-移动光标"><a href="#命令模式-移动光标" class="headerlink" title="(命令模式)移动光标"></a>(命令模式)移动光标</h2><p>在vim界面，命令模式下光标移动方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1、使用上下左右方向键</span><br><span class="line"></span><br><span class="line">2、命令模式下：</span><br><span class="line">h   向左</span><br><span class="line">j   向下 </span><br><span class="line">k   向上</span><br><span class="line">l  向右</span><br><span class="line"></span><br><span class="line">空格键 向右</span><br><span class="line">Backspace  向左</span><br><span class="line">Enter  移动到下一行首</span><br><span class="line">-  移动到上一行首。</span><br><span class="line"></span><br><span class="line">:set  nu     &#x2F;&#x2F;显示行号</span><br><span class="line">:set nonu    &#x2F;&#x2F;取消显示行号</span><br><span class="line">n+        &#x2F;&#x2F;向下跳n行</span><br><span class="line">n-         &#x2F;&#x2F;向上跳n行</span><br><span class="line">nG        &#x2F;&#x2F;跳到行号为n的行</span><br><span class="line">G           &#x2F;&#x2F;跳至文件的底部</span><br><span class="line">g         &#x2F;&#x2F;跳转到文件头部</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="插入模式-编辑模式"><a href="#插入模式-编辑模式" class="headerlink" title="(插入模式)编辑模式"></a>(插入模式)编辑模式</h2><p>以下按键进入编辑插入模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a      &#x2F;&#x2F;在当前光标位置的右边添加文本</span><br><span class="line">i       &#x2F;&#x2F;在当前光标位置的左边添加文本</span><br><span class="line">A     &#x2F;&#x2F;在当前行的末尾位置添加文本</span><br><span class="line">I      &#x2F;&#x2F;在当前行的开始处添加文本(非空字符的行首)</span><br><span class="line">O     &#x2F;&#x2F;在当前行的上面新建一行</span><br><span class="line">o     &#x2F;&#x2F;在当前行的下面新建一行</span><br><span class="line">R    &#x2F;&#x2F;替换(覆盖)当前光标位置及后面的若干文本</span><br><span class="line">J    &#x2F;&#x2F;合并光标所在行及下一行为一行(依然在命令模式)</span><br></pre></td></tr></table></figure><p>ESC可以退出编辑模式</p><h2 id="命令模式-删除和复制"><a href="#命令模式-删除和复制" class="headerlink" title="(命令模式)删除和复制"></a>(命令模式)删除和复制</h2><p>在vim中, 除了在编辑模式下修改文件，命令模式的时候可以删除和复制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">x         &#x2F;&#x2F;删除当前字符</span><br><span class="line">nx         &#x2F;&#x2F;删除从光标开始的n个字符</span><br><span class="line">dd       &#x2F;&#x2F;删除当前行</span><br><span class="line">ndd      &#x2F;&#x2F;向下删除当前行在内的n行</span><br><span class="line">u        &#x2F;&#x2F;撤销上一步操作</span><br><span class="line">U        &#x2F;&#x2F;撤销对当前行的所有操作</span><br><span class="line">yy       &#x2F;&#x2F;将当前行复制到缓存区，也可以用 &quot;ayy 复制，&quot;a 为缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务。</span><br><span class="line">nyy      &#x2F;&#x2F;将当前行向下n行复制到缓冲区，也可以用 &quot;anyy 复制，&quot;a 为缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务。</span><br><span class="line">yw       &#x2F;&#x2F;复制从光标开始到词尾的字符。</span><br><span class="line">nyw      &#x2F;&#x2F;复制从光标开始的n个单词。</span><br><span class="line">y^       &#x2F;&#x2F;复制从光标到行首的内容。  VPS侦探</span><br><span class="line">y$       &#x2F;&#x2F;复制从光标到行尾的内容。</span><br><span class="line">p        &#x2F;&#x2F;粘贴剪切板里的内容在光标后，如果使用了前面的自定义缓冲区，建议使用&quot;ap 进行粘贴。</span><br><span class="line">P        &#x2F;&#x2F;粘贴剪切板里的内容在光标前，如果使用了前面的自定义缓冲区，建议使用&quot;aP 进行粘贴。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="命令模式-搜索和替换"><a href="#命令模式-搜索和替换" class="headerlink" title="(命令模式)搜索和替换"></a>(命令模式)搜索和替换</h2><p>命令模式下(esc退出插入模式)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;keyword     &#x2F;&#x2F;向光标下搜索keyword字符串，keyword可以是正则表达式</span><br><span class="line">?keyword     &#x2F;&#x2F;向光标上搜索keyword字符串</span><br><span class="line">n           &#x2F;&#x2F;向下搜索前一个搜素动作</span><br><span class="line">N         &#x2F;&#x2F;向上搜索前一个搜索动作</span><br><span class="line"></span><br><span class="line">*(#)      &#x2F;&#x2F;当光标停留在某个单词上时, 输入这条命令表示查找与该单词匹配的下(上)一个单词. 同样, 再输入 n 查找下一个匹配处, 输入 N 反方向查找.</span><br><span class="line"></span><br><span class="line">g*(g#)        &#x2F;&#x2F;此命令与上条命令相似, 只不过它不完全匹配光标所在处的单词, 而是匹配包含该单词的所有字符串.</span><br><span class="line"></span><br><span class="line">:s&#x2F;old&#x2F;new      &#x2F;&#x2F;用new替换行中首次出现的old</span><br><span class="line">:s&#x2F;old&#x2F;new&#x2F;g         &#x2F;&#x2F;用new替换行中所有的old</span><br><span class="line">:n,m s&#x2F;old&#x2F;new&#x2F;g     &#x2F;&#x2F;用new替换从n到m行里所有的old</span><br><span class="line">:%s&#x2F;old&#x2F;new&#x2F;g      &#x2F;&#x2F;用new替换当前文件里所有的old</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客同时发布到github和oschina</title>
      <link href="2017/07/16/hexo-github-oschina/"/>
      <url>2017/07/16/hexo-github-oschina/</url>
      
        <content type="html"><![CDATA[<p>从最开始拷贝post到自己的repo，到使用hexo d。最后发现，原来可以同时推送。</p><p>配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: </span><br><span class="line">    github: git@github.com:Ryan-Miao&#x2F;Ryan-Miao.github.io.git</span><br><span class="line">    oschina: git@git.oschina.net:Ryan-Miao&#x2F;Ryan-Miao.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>推送：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><p>最终，写完博客后的指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d -g</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Next主题修打赏按钮样式</title>
      <link href="2017/07/16/hexo-next-shang/"/>
      <url>2017/07/16/hexo-next-shang/</url>
      
        <content type="html"><![CDATA[<p>不知道是我下载的版本问题，还是什么的。默认的打赏就是一个button。  </p><p><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/shangshang.png"></p><p>修改办法：<br>在source/css/custom.styl里添加：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#rewardButton</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">    <span class="attribute">font-variant</span>: normal;</span><br><span class="line">    <span class="attribute">font-stretch</span>: normal;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Microsoft Yahei&quot;</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f44336</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#rewardButton</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: normal;</span><br><span class="line">    <span class="attribute">text-transform</span>: none;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">text-shadow</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Next主题使用评论系统：hypercomments</title>
      <link href="2017/07/16/hexo-next-hypercomments/"/>
      <url>2017/07/16/hexo-next-hypercomments/</url>
      
        <content type="html"><![CDATA[<p>挨着尝试了几个评论系统，比较结束后发现最合适的是<code>hypercomments</code>。 配置也相当简单。</p><a id="more"></a><h1 id="1-登录"><a href="#1-登录" class="headerlink" title="1. 登录"></a>1. 登录</h1><p>使用google账户登录，<a href="https://www.hypercomments.com/pricing%E3%80%82">https://www.hypercomments.com/pricing。</a></p><p>虽然使用google账户，但评论不用翻墙。不像disqu。</p><h1 id="2-购买"><a href="#2-购买" class="headerlink" title="2. 购买"></a>2. 购买</h1><p>目前选择免费版。<a href="https://www.hypercomments.com/pricing">https://www.hypercomments.com/pricing</a></p><p>确认后需要输入网站地址，然后生成code。在code中找到id。我的是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_hcwp.push(&#123;widget:&quot;Stream&quot;, widget_id: 93344&#125;);</span><br></pre></td></tr></table></figure><p>具体位置： setting-》widget-》code</p><h1 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h1><p>在next配置文件中找到Hypercomments，填入id。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>切换到码云pages</title>
      <link href="2017/07/16/switch-to-oschina/"/>
      <url>2017/07/16/switch-to-oschina/</url>
      
        <content type="html"><![CDATA[<p>github在翻墙的时候确实还ok，但比起oschina的速度就差很多了。想了很久，还是放oschina。当然，只是静态博客。</p><p>博客地址：<a href="http://ryan-miao.oschina.io/">http://ryan-miao.oschina.io/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 码云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8学习(2)-  通过行为参数化传递代码--lambda代替策略模式</title>
      <link href="2017/07/15/java8-in-action-2/"/>
      <url>2017/07/15/java8-in-action-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>猪脚：以下内容参考《Java 8 in Action》</p></blockquote><p>下一篇<a href="http://ryan-miao.oschina.io/2017/07/21/java8-lambda/">Java8学习(3)- Lambda 表达式</a></p><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>果农需要筛选苹果，可能想要绿色的，也可能想要红色的，可能想要大苹果（&gt;150g)，也可能需要红的大苹果。基于此等条件，编写筛选的代码。</p><a id="more"></a><h1 id="1-策略模式解决方案"><a href="#1-策略模式解决方案" class="headerlink" title="1. 策略模式解决方案"></a>1. 策略模式解决方案</h1><h2 id="1-1-最直观的做法"><a href="#1-1-最直观的做法" class="headerlink" title="1.1 最直观的做法"></a>1.1 最直观的做法</h2><p>首先，已知信息是一筐苹果(<code>List&lt;Apple&gt; inventory</code>)，但筛选条件多种多样。我们可以根据不同的条件写不同的方法来达到目的。比如，找出绿色的苹果:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Apple&gt; <span class="title">filterGreenApples</span><span class="params">(List&lt;Apple&gt; inventory)</span></span>&#123;</span><br><span class="line">    List&lt;Apple&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(Apple apple: inventory)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;green&quot;</span>.equals(apple.getColor()))&#123;</span><br><span class="line">            result.add(apple);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同样的，可以编写<code>filterRed</code>, <code>filterWeight</code>等等。但必然出现重复代码，违反软件工程原则<code>Don&#39;t repeast yourself</code>。而且，筛选的类也会显得臃肿。</p><p>现在，有一种更容易维护，更容易阅读的策略模式来实现这个需求。</p><h2 id="1-2-策略模式"><a href="#1-2-策略模式" class="headerlink" title="1.2 策略模式"></a>1.2 策略模式</h2><p>由于多种筛选条件的结果都是返回一个<code>boolean</code>值，那么可以把这个条件抽取出来，然后在筛选的时候传入条件。这个筛选条件叫做<strong>谓词</strong>。</p><p>创建谓词接口:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplePredicate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Apple apple)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加几个判断条件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleGreenColorPredicate</span> <span class="keyword">implements</span> <span class="title">ApplePredicate</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Apple apple)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;green&quot;</span>.equals(apple.getColor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleHeavyWeightPredicate</span> <span class="keyword">implements</span> <span class="title">ApplePredicate</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Apple apple)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> apple.getWeight() &gt; <span class="number">150</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleRedAndHeavyPredicate</span> <span class="keyword">implements</span> <span class="title">ApplePredicate</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Apple apple)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;red&quot;</span>.equals(apple.getColor()) &amp;&amp; apple.getWeight() &gt;<span class="number">150</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>筛选的方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Apple&gt; <span class="title">filterApples</span><span class="params">(List&lt;Apple&gt; inventory, ApplePredicate predicate)</span></span>&#123;</span><br><span class="line">    List&lt;Apple&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Apple apple : inventory) &#123;</span><br><span class="line">        <span class="keyword">if</span> (predicate.test(apple))&#123;</span><br><span class="line">            result.add(apple);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们就可以根据不同的条件进行筛选了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">List&lt;Apple&gt; inventory = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">inventory.add(<span class="keyword">new</span> Apple(<span class="string">&quot;red&quot;</span>, <span class="number">100</span>));</span><br><span class="line">inventory.add(<span class="keyword">new</span> Apple(<span class="string">&quot;red&quot;</span>, <span class="number">200</span>));</span><br><span class="line">inventory.add(<span class="keyword">new</span> Apple(<span class="string">&quot;green&quot;</span>, <span class="number">200</span>));</span><br><span class="line">List&lt;Apple&gt; redHeavyApples = filterApples(inventory, <span class="keyword">new</span> AppleRedAndHeavyPredicate());</span><br><span class="line">Assert.assertEquals(<span class="number">1</span>, redHeavyApples.size());</span><br><span class="line">Assert.assertEquals(<span class="number">200</span>, redHeavyApples.get(<span class="number">0</span>).getWeight());</span><br></pre></td></tr></table></figure><p>以上的代码设计方案几乎是最好理解和扩展的了，当条件发生改变的时候只要增加一个类就可以。但java8提供了更好的选择，一种你只要声明一个接口，具体实现不用管，只有当使用的时候才去关心。</p><h2 id="1-3-方法传递"><a href="#1-3-方法传递" class="headerlink" title="1.3 方法传递"></a>1.3 方法传递</h2><p>java8提供了<strong>把方法当做参数传递的能力</strong>。这样，上面的代码就可以这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Apple&gt; apples = filterApples(inventory, apple -&gt; <span class="string">&quot;red&quot;</span>.equals(apple.getColor()) &amp;&amp; apple.getWeight() &gt; <span class="number">150</span>);</span><br><span class="line">Assert.assertEquals(<span class="number">1</span>, apples.size());</span><br><span class="line">Assert.assertEquals(<span class="number">200</span>, apples.get(<span class="number">0</span>).getWeight());</span><br></pre></td></tr></table></figure><p>除了接口声明，不需要实现接口的类。我们只需要传入一个类似匿名内部类的东西，是的，lambda表达式和匿名内部类是可以互相转换的。</p><p>如此，我们设计接口的时候只要声明一个接口作为参数，然后再调用的时候把逻辑当做参数传进去。这个在我看来就是传递方法了。就像Javascript，可以把一个方法当做参数。</p><p>与之前的设计模式相比，lambda可以不用写那么类。</p><h2 id="1-4-新需求"><a href="#1-4-新需求" class="headerlink" title="1.4 新需求"></a>1.4 新需求</h2><p>现在，果农需要包装苹果。包装的方式有多种，我将包装的结果打印出来，就是打印的样式也有多种。比如：</p><blockquote><p>A light green apple   </p></blockquote><p>或者</p><blockquote><p>An apple of 150g</p></blockquote><p>上面是两种打印方式，按照之前的策略模式需要创建两个类。下面采用lambda来实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AppleFormatter</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">format</span><span class="params">(Apple apple)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleOutput</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prettyPrintApple</span><span class="params">(List&lt;Apple&gt; inventory, AppleFormatter formatter)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Apple apple : inventory) &#123;</span><br><span class="line">            String format = formatter.format(apple);</span><br><span class="line">            System.out.println(format);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        List&lt;Apple&gt; inventory = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        inventory.add(<span class="keyword">new</span> Apple(<span class="string">&quot;red&quot;</span>, <span class="number">100</span>));</span><br><span class="line">        inventory.add(<span class="keyword">new</span> Apple(<span class="string">&quot;red&quot;</span>, <span class="number">200</span>));</span><br><span class="line">        inventory.add(<span class="keyword">new</span> Apple(<span class="string">&quot;green&quot;</span>, <span class="number">200</span>));</span><br><span class="line"></span><br><span class="line">        prettyPrintApple(inventory, <span class="keyword">new</span> AppleFormatter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">format</span><span class="params">(Apple apple)</span> </span>&#123;</span><br><span class="line">                String characteristic = apple.getWeight()&gt;<span class="number">150</span>?<span class="string">&quot;heavy&quot;</span>:<span class="string">&quot;light&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;A &quot;</span> + characteristic + <span class="string">&quot; &quot;</span> + apple.getColor() + <span class="string">&quot; apple.&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        prettyPrintApple(inventory, apple -&gt; <span class="string">&quot;An apple of &quot;</span> + apple.getWeight() + <span class="string">&quot;g&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台打印：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A light red apple.</span><br><span class="line">A heavy red apple.</span><br><span class="line">A heavy green apple.</span><br><span class="line">An apple of 100g</span><br><span class="line">An apple of 200g</span><br><span class="line">An apple of 200g</span><br></pre></td></tr></table></figure><p>如果使用IntelIJ IDEA作为编辑器，那么肯定会忍受不了匿名内部类，因为IDEA会不停的提示你：匿名内部类可以转变为方法参数。</p><h2 id="1-5-更普遍的用法"><a href="#1-5-更普遍的用法" class="headerlink" title="1.5 更普遍的用法"></a>1.5 更普遍的用法</h2><p>上面的筛选只是针对Apple的，那么是否可以推广开来呢？下面针对List类型抽象化来构造筛选条件。</p><p>创建一个条件接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新一个更普遍的filter：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">filter</span><span class="params">(List&lt;T&gt; list, Predicate&lt;T&gt; p)</span></span>&#123;</span><br><span class="line">    List&lt;T&gt; result = <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line">    <span class="keyword">for</span> (T e : list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p.test(e))&#123;</span><br><span class="line">            result.add(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，可能这样用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Apple&gt; appleList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    appleList.add(<span class="keyword">new</span> Apple(<span class="string">&quot;red&quot;</span>, <span class="number">100</span>));</span><br><span class="line">    appleList.add(<span class="keyword">new</span> Apple(<span class="string">&quot;red&quot;</span>, <span class="number">160</span>));</span><br><span class="line">    appleList.add(<span class="keyword">new</span> Apple(<span class="string">&quot;green&quot;</span>, <span class="number">60</span>));</span><br><span class="line"></span><br><span class="line">    List&lt;Apple&gt; redApples = filter(appleList, (Apple apple) -&gt; <span class="string">&quot;red&quot;</span>.equals(apple.getColor()));</span><br><span class="line">    Assert.assertEquals(<span class="number">2</span>, redApples.size());</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; numberList = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line">    List&lt;Integer&gt; lessThan4Numbers = filter(numberList, (Integer num) -&gt; num &lt; <span class="number">4</span>);</span><br><span class="line">    Assert.assertEquals(<span class="number">3</span>, lessThan4Numbers.size());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-6-排序"><a href="#1-6-排序" class="headerlink" title="1.6 排序"></a>1.6 排序</h2><p>行为参数化的过程掌握后，很多东西就会自然而然的使用了。比如排序。果农需要将苹果按照大小排序呢？</p><p>java8中List是有默认方法的:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span> </span>&#123;</span><br><span class="line">    Object[] a = <span class="keyword">this</span>.toArray();</span><br><span class="line">    Arrays.sort(a, (Comparator) c);</span><br><span class="line">    ListIterator&lt;E&gt; i = <span class="keyword">this</span>.listIterator();</span><br><span class="line">    <span class="keyword">for</span> (Object e : a) &#123;</span><br><span class="line">        i.next();</span><br><span class="line">        i.set((E) e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是将以前手动排序封装了。那么，苹果的排序就可以传入一个比较器实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Apple&gt; appleList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    appleList.add(<span class="keyword">new</span> Apple(<span class="string">&quot;red&quot;</span>, <span class="number">100</span>));</span><br><span class="line">    appleList.add(<span class="keyword">new</span> Apple(<span class="string">&quot;red&quot;</span>, <span class="number">160</span>));</span><br><span class="line">    appleList.add(<span class="keyword">new</span> Apple(<span class="string">&quot;green&quot;</span>, <span class="number">60</span>));</span><br><span class="line">    </span><br><span class="line">    appleList.sort((o1, o2) -&gt; o1.getWeight()-o2.getWeight());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据IDEA的提示，进一步：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appleList.sort(Comparator.comparingInt(Apple::getWeight));</span><br></pre></td></tr></table></figure><p>这里就涉及了多次行为传参了。后面再说。</p><h2 id="1-7-Runnable"><a href="#1-7-Runnable" class="headerlink" title="1.7 Runnable"></a>1.7 Runnable</h2><p>多线程Runnable的时候经常会采用匿名内部类的做法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRunnable</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;running&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(runnable).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用lambda行为传参就变为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRunnable</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Runnable runnable = () -&gt; System.out.println(<span class="string">&quot;running&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(runnable).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本次测试主要理解如下内容：  </p><ul><li>行为参数化，就是一个方法接受多个不同的行为作为参数，并在内部使用它们，完成不同行为的能力。</li><li>传递代码，就是将行为作为参数传递给方法。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://livebook.manning.com/#!/book/java-8-in-action/">Java 8 in action</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8 </tag>
            
            <tag> Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 安装 redis</title>
      <link href="2017/06/28/mac-install-redis/"/>
      <url>2017/06/28/mac-install-redis/</url>
      
        <content type="html"><![CDATA[<h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install redis</span><br></pre></td></tr></table></figure><h1 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h1><p>配置文件在：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis.conf</span><br></pre></td></tr></table></figure><p>可以配置db文件存放在:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir &#x2F;usr&#x2F;local&#x2F;var&#x2F;db&#x2F;redis&#x2F;</span><br></pre></td></tr></table></figure><p>密码默认无，移除注释修改密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requirepass foobared</span><br></pre></td></tr></table></figure><h1 id="3-启动"><a href="#3-启动" class="headerlink" title="3. 启动"></a>3. 启动</h1><p>redis启动命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure><p>如此启动会采用默认配置，即便是修改了默认配置也不生效，原因未查明，因此需要指定配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server &#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis.conf</span><br></pre></td></tr></table></figure><p>这样将会采用指定的配置文件。</p><h1 id="4-stop"><a href="#4-stop" class="headerlink" title="4. stop"></a>4. stop</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli shutdown</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 安装 MySQL</title>
      <link href="2017/06/28/mac-install-mysql/"/>
      <url>2017/06/28/mac-install-mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="1-安装Homebrew"><a href="#1-安装Homebrew" class="headerlink" title="1. 安装Homebrew"></a>1. 安装Homebrew</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;bin&#x2F;ruby -e &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;install)&quot;</span><br></pre></td></tr></table></figure><h1 id="2-查看版本库中的MySQL"><a href="#2-查看版本库中的MySQL" class="headerlink" title="2. 查看版本库中的MySQL"></a>2. 查看版本库中的MySQL</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew info mysql</span><br></pre></td></tr></table></figure><h1 id="3-安装MySQL"><a href="#3-安装MySQL" class="headerlink" title="3. 安装MySQL"></a>3. 安装MySQL</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install mysql</span><br></pre></td></tr></table></figure><h1 id="4-安装brew-service"><a href="#4-安装brew-service" class="headerlink" title="4. 安装brew service"></a>4. 安装brew service</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew tap homebrew&#x2F;services</span><br></pre></td></tr></table></figure><h1 id="5-查看安装的MySQL"><a href="#5-查看安装的MySQL" class="headerlink" title="5. 查看安装的MySQL"></a>5. 查看安装的MySQL</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -V</span><br></pre></td></tr></table></figure><h1 id="6-启动MySQL"><a href="#6-启动MySQL" class="headerlink" title="6. 启动MySQL"></a>6. 启动MySQL</h1><p>启动为后台MySQL并设置开机启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services start mysql</span><br></pre></td></tr></table></figure><p>直接启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql.server start</span><br></pre></td></tr></table></figure><h1 id="7-设置root密码"><a href="#7-设置root密码" class="headerlink" title="7. 设置root密码"></a>7. 设置root密码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root password &#39;yourpassword&#39;</span><br></pre></td></tr></table></figure><h1 id="8-连接登陆MySQL"><a href="#8-连接登陆MySQL" class="headerlink" title="8. 连接登陆MySQL"></a>8. 连接登陆MySQL</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><h1 id="9-查看安装后的字符集"><a href="#9-查看安装后的字符集" class="headerlink" title="9. 查看安装后的字符集"></a>9. 查看安装后的字符集</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#39;%char%&#39;;</span><br></pre></td></tr></table></figure><h1 id="10-查看brew-安装的service"><a href="#10-查看brew-安装的service" class="headerlink" title="10. 查看brew 安装的service"></a>10. 查看brew 安装的service</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services list</span><br></pre></td></tr></table></figure><h1 id="11-关闭MySQL"><a href="#11-关闭MySQL" class="headerlink" title="11. 关闭MySQL"></a>11. 关闭MySQL</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql.server stop</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java中byte, iso-8859-1, UTF-8，乱码的根源</title>
      <link href="2017/06/26/java-utf8-iso-%E4%B9%B1%E7%A0%81%E6%A0%B9%E6%BA%90/"/>
      <url>2017/06/26/java-utf8-iso-%E4%B9%B1%E7%A0%81%E6%A0%B9%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<p><a href="https://ryan-miao.github.io/2017/06/26/java-utf8-iso-%E4%B9%B1%E7%A0%81%E6%A0%B9%E6%BA%90/">Post@https://ryan-miao.github.io</a><br>测试代码<a href="https://github.com/Ryan-Miao/someTest/commit/50241e50d4b6ecdb8820e58f4cb9628bfb7d77ec">https://github.com/Ryan-Miao/someTest/commit/50241e50d4b6ecdb8820e58f4cb9628bfb7d77ec</a></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>还是多语言, 在项目中遇到本地环境和服务端环境不一致乱码的情形。因此需要搞清楚乱码产生的过程，来分析原因。</p><a id="more"></a><p>获取多语言代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, String&gt; <span class="title">getLocalizationContent</span><span class="params">(Locale locale)</span> </span>&#123;</span><br><span class="line">    ResourceBundle bundle = ResourceBundle.getBundle(<span class="keyword">this</span>.resourceBundleName, Locale.US);</span><br><span class="line">    ResourceBundle bundleLocale = ResourceBundle.getBundle(<span class="keyword">this</span>.resourceBundleName, locale);</span><br><span class="line">    Set&lt;String&gt; keys = bundle.keySet();</span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">    String key;</span><br><span class="line">    String translation;</span><br><span class="line">    <span class="keyword">for</span>(Iterator var6 = keys.iterator(); var6.hasNext(); map.put(key, translation)) &#123;</span><br><span class="line">        key = (String)var6.next();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            translation = bundleLocale.getString(key);</span><br><span class="line">            translation = <span class="keyword">new</span> String(translation.getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            translation = <span class="keyword">this</span>.escapeStringForJavaScript(translation);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException | MissingResourceException var10) &#123;</span><br><span class="line">            translation = bundle.getString(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，因为<code>ResourceBundle</code>通过<code>PropertyResourceBundle</code>读取<code>properties</code>文件。 这就要看以哪种方式load Properties了。提供了两种构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PropertyResourceBundle</span> <span class="params">(InputStream stream)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">    properties.load(stream);</span><br><span class="line">    lookup = <span class="keyword">new</span> HashMap(properties);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PropertyResourceBundle</span> <span class="params">(Reader reader)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">    properties.load(reader);</span><br><span class="line">    lookup = <span class="keyword">new</span> HashMap(properties);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过跟踪<code>ResourceBundle.getBundle(this.resourceBundleName, locale);</code>源码发现创建bundle的方法为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ResourceBundle <span class="title">newBundle</span><span class="params">(String baseName, Locale locale, String format,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        ClassLoader loader, <span class="keyword">boolean</span> reload)</span></span></span><br><span class="line"><span class="function">                    <span class="keyword">throws</span> IllegalAccessException, InstantiationException, IOException </span>&#123;</span><br><span class="line">    String bundleName = toBundleName(baseName, locale);</span><br><span class="line">    ResourceBundle bundle = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (format.equals(<span class="string">&quot;java.class&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            Class&lt;? extends ResourceBundle&gt; bundleClass</span><br><span class="line">                = (Class&lt;? extends ResourceBundle&gt;)loader.loadClass(bundleName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If the class isn&#x27;t a ResourceBundle subclass, throw a</span></span><br><span class="line">            <span class="comment">// ClassCastException.</span></span><br><span class="line">            <span class="keyword">if</span> (ResourceBundle.class.isAssignableFrom(bundleClass)) &#123;</span><br><span class="line">                bundle = bundleClass.newInstance();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException(bundleClass.getName()</span><br><span class="line">                             + <span class="string">&quot; cannot be cast to ResourceBundle&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (format.equals(<span class="string">&quot;java.properties&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">final</span> String resourceName = toResourceName0(bundleName, <span class="string">&quot;properties&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (resourceName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> bundle;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> ClassLoader classLoader = loader;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> reloadFlag = reload;</span><br><span class="line">        InputStream stream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stream = AccessController.doPrivileged(</span><br><span class="line">                <span class="keyword">new</span> PrivilegedExceptionAction&lt;InputStream&gt;() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> InputStream <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">if</span> (reloadFlag) &#123;</span><br><span class="line">                            URL url = classLoader.getResource(resourceName);</span><br><span class="line">                            <span class="keyword">if</span> (url != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                URLConnection connection = url.openConnection();</span><br><span class="line">                                <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                    <span class="comment">// Disable caches to get fresh data for</span></span><br><span class="line">                                    <span class="comment">// reloading.</span></span><br><span class="line">                                    connection.setUseCaches(<span class="keyword">false</span>);</span><br><span class="line">                                    is = connection.getInputStream();</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            is = classLoader.getResourceAsStream(resourceName);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> is;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PrivilegedActionException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (IOException) e.getException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stream != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bundle = <span class="keyword">new</span> PropertyResourceBundle(stream);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                stream.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;unknown format: &quot;</span> + format);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bundle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，最终通过<code>properties.load(stream);</code>的方法读取properties文件的。</p><blockquote><p>The load(Reader) / store(Writer, String) methods load and store properties from and to a character based stream in a simple line-oriented format specified below. The load(InputStream) / store(OutputStream, String) methods work the same way as the load(Reader)/store(Writer, String) pair, except the input/output stream is encoded in ISO 8859-1 character encoding. Characters that cannot be directly represented in this encoding can be written using Unicode escapes as defined in section 3.3 of The Java™ Language Specification; <strong>only a single ‘u’ character is allowed in an escape sequence</strong>. The native2ascii tool can be used to convert property files to and from other character encodings.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unicodeToChar</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> aChar = <span class="string">&#x27;\u4E2D&#x27;</span>;</span><br><span class="line">    Assert.assertEquals(<span class="string">&#x27;中&#x27;</span>, aChar);</span><br><span class="line"></span><br><span class="line">    String aStr = <span class="string">&quot;\u4E2D\u6587&quot;</span>;</span><br><span class="line">    Assert.assertEquals(<span class="string">&quot;中文&quot;</span>, aStr);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据官方文档，使用Unicode转义可以识别中文字符的。按照之前本地的表现，Properties文件以中文原样书写，并且文件字符集为utf8,生成字节流的时候中文肯定会变成多个字节。这样系统读取之后的字符是不对的。需要再次使用utf8编码为正确的字符。而服务端的表现是：不需要再次编码，读出来的字符就是正确的。那么就可以证明服务端的Properties文件的中文经过了转义，或者读取的时候进行了转义。目前本地和服务端的唯一区别就是系统。一个是打包的过程，本地编译是否和服务端编译不同？一个是服务端的jvm，到现在没搞清楚服务端jvm的版本。看消息说，java9可以支持直接使用中文而不用转码了。</p><p>所以, 问题的根源找到了： 先证明打包是否有问题–将服务端的包在本地跑一下。然后验证服务端的jvm是否有直接读取utf8的能力—编写一个简单的读写code。</p><p>找问题的时候找了很久，经过高人指导后又静心查阅了编码的资料才能融会贯通。以下是查资料时整理的对理解编码和乱码有用的文章。</p><hr><h1 id="乱码的分类"><a href="#乱码的分类" class="headerlink" title="乱码的分类"></a>乱码的分类</h1><p>目前看到两种乱码：问号和ISO符号乱码。</p><h1 id="1-开始学习乱码之道"><a href="#1-开始学习乱码之道" class="headerlink" title="1. 开始学习乱码之道"></a>1. 开始学习乱码之道</h1><p>以下内容转载自<a href="https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/index.html">深入分析 Java 中的中文编码问题</a>, 作者：许令波，发表时间：2011 年 7 月 06 日。</p><h2 id="1-1-结论放在开头"><a href="#1-1-结论放在开头" class="headerlink" title="1.1 结论放在开头"></a>1.1 结论放在开头</h2><ol><li><p><code>iso-8859-1</code>以一个字节(1 byte)存储字符。即字符<code>a</code>存储为一个字节，即8位(8 bit)。</p></li><li><p><code>utf-8</code>变长字节存储字符，最小单位是一个字节。<code>iso-8859-1</code>正好相当于<code>utf-8</code>的一个单位。因此，将以<code>utf-8</code>编码的字节流用<code>iso-8859-1</code>的方式读取后字符乱码但信息不丢失，只需要将字符还原成byte数组(<code>str.getBytes(&quot;ISO-8859-1&quot;)</code>)，重新以<code>utf-8</code>读取(<code>new String(byte[], &quot;UTF-8&quot;)</code>)即可。</p></li></ol><h2 id="1-2-为什么要编码，我们认知的符号地如何存在的"><a href="#1-2-为什么要编码，我们认知的符号地如何存在的" class="headerlink" title="1.2 为什么要编码，我们认知的符号地如何存在的"></a>1.2 为什么要编码，我们认知的符号地如何存在的</h2><h3 id="1-2-1-java中的编码"><a href="#1-2-1-java中的编码" class="headerlink" title="1.2.1 java中的编码"></a>1.2.1 java中的编码</h3><ol><li>计算机中存储信息的最小单元是一个字节即 8 个 bit，所以能表示的字符范围是 0~255 个</li><li>人类要表示的符号太多，无法用一个字节来完全表示</li><li>要解决这个矛盾必须需要一个新的**数据结构 char(16bit, 2byte)**，从 char 到 byte 必须编码</li></ol><h3 id="1-2-2-几个重要的编码"><a href="#1-2-2-几个重要的编码" class="headerlink" title="1.2.2 几个重要的编码"></a>1.2.2 几个重要的编码</h3><p><strong>ASCII</strong><br>（发音： /ˈæski/ ass-kee[1]，American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统。它主要用于显示现代英语，而其扩展版本EASCII则可以部分支持其他西欧语言，并等同于国际标准ISO/IEC 646。至今为止共定义了128个字符。</p><blockquote><p>用一个字节的低 7 位表示，0<del>31 是控制字符如换行回车删除等；32</del>126 是打印字符，可以通过键盘输入并且能够显示出来。</p></blockquote><p><strong>ISO 8859-1</strong><br>正式编号为ISO/IEC 8859-1:1998，又称Latin-1或“西欧语言”，是国际标准化组织内ISO/IEC 8859的第一个8位字符集。它以ASCII为基础，在空置的0xA0-0xFF的范围内，加入96个字母及符号，藉以供使用附加符号的拉丁字母语言使用。</p><blockquote><p>ISO-8859-1 仍然是单字节编码，它总共能表示 256 个字符。</p></blockquote><p><strong>GB2312</strong></p><blockquote><p>它的全称是《信息交换用汉字编码字符集 基本集》，它是双字节编码，总的编码范围是 A1-F7，其中从 A1-A9 是符号区，总共包含 682 个符号，从 B0-F7 是汉字区，包含 6763 个汉字。</p></blockquote><p><strong>GBK</strong>  </p><blockquote><p>全称叫《汉字内码扩展规范》，是国家技术监督局为 windows95 所制定的新的汉字内码规范，它的出现是为了扩展 GB2312，加入更多的汉字，它的编码范围是 8140~FEFE（去掉 XX7F）总共有 23940 个码位，它能表示 21003 个汉字，它的编码是和 GB2312 兼容的，也就是说用 GB2312 编码的汉字可以用 GBK 来解码，并且不会有乱码。</p></blockquote><p><strong>UTF-16</strong>   </p><blockquote><p>具体定义了 Unicode 字符在计算机中存取方法。UTF-16不是定长两字节，它是变长，有二或四字节，Unicode的码点最大已经到了U+10FFFF. 转化格式，这个是定长的表示方法，不论什么字符都可以用两个字节表示，两个字节是 16 个 bit，所以叫 UTF-16。UTF-16 表示字符非常方便，每两个字节表示一个字符，这个在字符串操作时就大大简化了操作，这也是 <strong>Java 以 UTF-16 作为内存的字符存储格式的一个很重要的原因</strong>。</p></blockquote><p><strong>Unicode</strong>（中文：万国码、国际码、统一码、单一码）是计算机科学领域里的一项业界标准。它对世界上大部分的文字系统进行了整理、编码，使得电脑可以用更为简单的方式来呈现和处理文字。<br>在表示一个<em>Unicode的字符</em>时，通常会用“U+”然后紧接着一组十六进制的数字来表示这一个字符。在基本多文种平面（英文：Basic Multilingual Plane，简写BMP。又称为“零号平面”、plane 0）里的所有字符，要用四个数字（即两个char,16bit ,例如U+4AE0，共支持六万多个字符）；在零号平面以外的字符则需要使用五个或六个数字。旧版的Unicode标准使用相近的标记方法，但却有些微小差异：在Unicode 3.0里使用“U-”然后紧接着八个数字，而“U+”则必须随后紧接着四个数字。</p><p><strong>UTF-8（8-bit Unicode Transformation Format</strong>）</p><blockquote><p>UTF-16 统一采用两个字节表示一个字符，虽然在表示上非常简单方便，但是也有其缺点，有很大一部分字符用一个字节就可以表示的现在要两个字节表示，存储空间放大了一倍，在现在的网络带宽还非常有限的今天，这样会增大网络传输的流量，而且也没必要。而 UTF-8 采用了一种变长技术，每个编码区域有不同的字码长度。不同类型的字符可以是由 1~6 个字节组成。</p></blockquote><p>UTF-8 有以下编码规则：</p><ol><li>如果一个字节，最高位（第 8 位）为 0，表示这是一个 ASCII 字符（00 - 7F）。可见，所有 ASCII 编码已经是 UTF-8 了。</li><li>如果一个字节，以 11 开头，连续的 1 的个数暗示这个字符的字节数，例如：110xxxxx 代表它是双字节 UTF-8 字符的首字节。</li><li>如果一个字节，以 10 开始，表示它不是首字节，需要向前查找才能得到当前字符的首字节</li></ol><h3 id="1-2-3-java中编码的流程"><a href="#1-2-3-java中编码的流程" class="headerlink" title="1.2.3 java中编码的流程"></a>1.2.3 java中编码的流程</h3><h4 id="1-2-3-1-什么时候需要编码"><a href="#1-2-3-1-什么时候需要编码" class="headerlink" title="1.2.3.1 什么时候需要编码"></a>1.2.3.1 什么时候需要编码</h4><p>将字符转换为字节，以及将字节转换字符的时候。</p><h4 id="1-2-3-2-Java在什么时候编码"><a href="#1-2-3-2-Java在什么时候编码" class="headerlink" title="1.2.3.2 Java在什么时候编码"></a>1.2.3.2 Java在什么时候编码</h4><p>通过I/O读写的时候，以及自定义转码的时候。I/O又区分为磁盘I/O和网络I/O。</p><p>java中关于编码有<strong>字节流</strong>和<strong>字符流</strong>。最初学java的时候肯定不去想为啥搞这东西。等用的时候才发现真是有用的。</p><p>字节流就是可以理解为byte数组, 一个byte就是一个字节，一个字节等于8位, 即8个0和1的二进制，也即两位的十六进制（FF）。ISO的编码就是基于单字节的，每个字节都可以映射为一个字符。</p><p>字符流当然就是面向字符的。这个是在字节流之上做了重组。字符流的最小单位是一个字符，可以理解为char数组。<code>a</code>和<code>中</code>都是一个字符，但如果用字节表示的话，<code>a</code>是一个字节，<code>中</code>是两个。</p><p>下面介绍字节流和字符流的交互。</p><h4 id="1-2-3-3-Java中的I-O流程"><a href="#1-2-3-3-Java中的I-O流程" class="headerlink" title="1.2.3.3 Java中的I/O流程"></a>1.2.3.3 Java中的I/O流程</h4><p><code>Reader</code>是Java IO中读取字符的父类，<code>InputStream</code>是读取字节的父类，<code>InputStreamReader</code>是字节到字符的桥梁，具体通过<code>StreamDecoder</code>实现。其中<code>StreamDecoder</code>需要指定Charset编码格式，如果用户不指定，则采用本地环境默认字符集。</p><p><code>Writer</code>是写字符的父类，<code>OutputStream</code>是写字节的父类，<code>OutputStreamWriter</code>是字符到字节的桥梁。<br><img height="100px" width="200px" src="http://oe20lp6p0.bkt.clouddn.com/2017/github/encoding-IO-read.png"/><br><img src="http://oe20lp6p0.bkt.clouddn.com/2017/github/encoding-IO-read.png"> <img src="http://oe20lp6p0.bkt.clouddn.com/2017/github/encoding-IO-write.png"><br>demo:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_write_read_encoding</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    String file = <span class="keyword">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;&quot;</span>).getPath()+File.separator+<span class="string">&quot;test.txt&quot;</span>;</span><br><span class="line">    String charset = <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line">    String iso = <span class="string">&quot;ISO-8859-1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写字符换转成字节流</span></span><br><span class="line">    FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">    OutputStreamWriter writer = <span class="keyword">new</span> OutputStreamWriter(</span><br><span class="line">            outputStream, charset);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        writer.write(<span class="string">&quot;这是要保存的中文字符&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取字节转换成字符</span></span><br><span class="line">    FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">    InputStreamReader reader = <span class="keyword">new</span> InputStreamReader(</span><br><span class="line">            inputStream, iso);</span><br><span class="line"></span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> charRead = reader.read();</span><br><span class="line">    <span class="keyword">while</span> (charRead != -<span class="number">1</span>)&#123;</span><br><span class="line">        sb.append((<span class="keyword">char</span>) charRead);</span><br><span class="line">        charRead = reader.read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(sb.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文章最初的乱码是因为write的时候是以<code>utf-8</code>编码，而读取的时候按照<code>iso-8859-1</code>解码。这时候乱码就是：<code>è¿æ¯è¦ä¿å­çä¸­æå­ç¬¦</code>。</p><h4 id="1-2-3-4-内存中的编码"><a href="#1-2-3-4-内存中的编码" class="headerlink" title="1.2.3.4 内存中的编码"></a>1.2.3.4 内存中的编码</h4><p>除了读写文件，还可以在内存中转换编码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConvert</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">    String s = <span class="string">&quot;这是一段中文字符串&quot;</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] b = s.getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    String utf8 = <span class="keyword">new</span> String(b,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    String iso = <span class="keyword">new</span> String(b,<span class="string">&quot;iso-8859-1&quot;</span>);</span><br><span class="line">    Assert.assertEquals(s, utf8);</span><br><span class="line">    Assert.assertEquals(<span class="string">&quot;è¿\u0099æ\u0098¯ä¸\u0080æ®µä¸\u00ADæ\u0096\u0087å\u00AD\u0097ç¬¦ä¸²&quot;</span>, iso);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testEncodingCharSet</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String aStr = <span class="string">&quot;中文&quot;</span>;</span><br><span class="line">    Charset charset = Charset.forName(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    ByteBuffer byteBuffer = charset.encode(aStr);</span><br><span class="line">    CharBuffer charBuffer = charset.decode(byteBuffer);</span><br><span class="line"></span><br><span class="line">    Assert.assertEquals(aStr, charBuffer.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-3-5-java如何编码"><a href="#1-2-3-5-java如何编码" class="headerlink" title="1.2.3.5 java如何编码"></a>1.2.3.5 java如何编码</h4><p>通过实例分析编码过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String name = <span class="string">&quot;I am 君山&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>[] chars = name.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : chars) &#123;</span><br><span class="line">        System.out.printf(c +<span class="string">&quot;（&quot;</span>+(<span class="keyword">int</span>)c+ <span class="string">&quot;）=&quot;</span> + Integer.toHexString(c) +<span class="string">&quot; | &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] iso8859 = name.getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;iso:&quot;</span>);</span><br><span class="line">            toHex(iso8859);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] utf8 = name.getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;utf8:&quot;</span>);</span><br><span class="line">            toHex(utf8);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] gb2312 = name.getBytes(<span class="string">&quot;GB2312&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;gb2312:&quot;</span>);</span><br><span class="line">            toHex(gb2312);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] gbk = name.getBytes(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;gbk:&quot;</span>);</span><br><span class="line">            toHex(gbk);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] utf16 = name.getBytes(<span class="string">&quot;UTF-16&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;utf16:&quot;</span>);</span><br><span class="line">            toHex(utf16);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">toHex</span><span class="params">(<span class="keyword">byte</span>[] data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">byte</span> b: data)&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = &#123;b&#125;;</span><br><span class="line">        System.out.printf(Hex.encodeHexString(bytes) + <span class="string">&quot;           | &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释：</p><ol><li>java中char转换成int是因为char是16位的，int是32位，强转不丢失。   </li><li>char转换成int的数值表示什么？明天去看看java编程思想，应该是该字符在Unicode字符集中的排序位置。   </li><li>本实例中将char转换的数值转为16进制(Hex)来代表这个字符。比如<code>君</code>的int值为<code>21531</code>,转换成16进制为<code>541b</code>。而<code>君</code>的Unicode也正好是<code>\u541b</code>。所以，**++Java中char是通过存储字符的16进制的数值来表示该字符的++**。   </li></ol><p><strong>java编码需要用的类图</strong>：<br><img src="http://oe20lp6p0.bkt.clouddn.com/2017/github/encoding-class.png"><br>首先根据<code>Charset.forName(charsetName) </code>查找<code>Charset</code>，然后创建<code>CharsetEncoder</code>, 最后调用<code>CharsetEncoder.encode</code>进行编码。其中<code>UTF-8</code>等编码子类中内部类<code>Encoder</code>都继承了<code>CharsetEncoder</code>。</p><p><code>String. getBytes(charsetName)</code>时序图:<br><img src="http://oe20lp6p0.bkt.clouddn.com/2017/github/encoding-sequece.jpg"></p><p>下面分析字符串编码的具体过程：<br>首先，控制台输出内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">I（73）&#x3D;49 |  （32）&#x3D;20 | a（97）&#x3D;61 | m（109）&#x3D;6d |  （32）&#x3D;20 | 君（21531）&#x3D;541b | 山（23665）&#x3D;5c71 | </span><br><span class="line">iso:</span><br><span class="line">49           | 20           | 61           | 6d           | 20           | 3f           | 3f           | </span><br><span class="line">utf8:</span><br><span class="line">49           | 20           | 61           | 6d           | 20           | e5           | 90           | 9b           | e5           | b1           | b1           | </span><br><span class="line">gb2312:</span><br><span class="line">49           | 20           | 61           | 6d           | 20           | be           | fd           | c9           | bd           | </span><br><span class="line">gbk:</span><br><span class="line">49           | 20           | 61           | 6d           | 20           | be           | fd           | c9           | bd           | </span><br><span class="line">utf16:</span><br><span class="line">fe           | ff           | 00           | 49           | 00           | 20           | 00           | 61           | 00           | 6d           | 00           | 20           | 54           | 1b           | 5c           | 71           | </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对应关系如下图,具体规则请参考原文，这里只share图：   </p><p><img src="http://oe20lp6p0.bkt.clouddn.com/2017/github/encoding-iso.gif"></p><blockquote><p>从上图看出 7 个 char 字符经过 ISO-8859-1 编码转变成 7 个 byte 数组，ISO-8859-1 是单字节编码，中文“君山”被转化成值是 3f 的 byte。3f 也就是“？”字符，所以经常会出现中文变成“？”很可能就是错误的使用了 ISO-8859-1 这个编码导致的。中文字符经过 ISO-8859-1 编码会丢失信息，通常我们称之为“黑洞”，它会把不认识的字符吸收掉。由于现在大部分基础的 Java 框架或系统默认的字符集编码都是 ISO-8859-1，所以很容易出现乱码问题，后面将会分析不同的乱码形式是怎么出现的。</p></blockquote><p><img src="http://oe20lp6p0.bkt.clouddn.com/2017/github/encoding-utf8.gif"></p><blockquote><p>UTF-8 对单字节范围内字符仍然用一个字节表示，对汉字采用三个字节表示。UTF-8 编码与 GBK 和 GB2312 不同，不用查码表，所以在编码效率上 UTF-8 的效率会更好，所以在存储中文字符时 UTF-8 编码比较理想</p></blockquote><p><img src="http://oe20lp6p0.bkt.clouddn.com/2017/github/encoding-gb2312.gif"><br><img src="http://oe20lp6p0.bkt.clouddn.com/2017/github/encoding-gbk.gif"></p><h4 id="1-2-3-6-几种编码比较"><a href="#1-2-3-6-几种编码比较" class="headerlink" title="1.2.3.6 几种编码比较"></a>1.2.3.6 几种编码比较</h4><p>对中文字符后面四种编码格式都能处理，GB2312 与 GBK 编码规则类似，但是 GBK 范围更大，它能处理所有汉字字符，所以 GB2312 与 GBK 比较应该选择 GBK。UTF-16 与 UTF-8 都是处理 Unicode 编码，它们的编码规则不太相同，相对来说 UTF-16 编码效率最高，字符到字节相互转换更简单，进行字符串操作也更好。它适合在本地磁盘和内存之间使用，可以进行字符和字节之间快速切换，如 Java 的内存编码就是采用 UTF-16 编码。但是它不适合在网络之间传输，因为网络传输容易损坏字节流，一旦字节流损坏将很难恢复，想比较而言 UTF-8 更适合网络传输，对 ASCII 字符采用单字节存储，另外单个字符损坏也不会影响后面其它字符，在编码效率上介于 GBK 和 UTF-16 之间，所以 UTF-8 在编码效率上和编码安全性上做了平衡，是理想的中文编码方式。</p><h3 id="1-2-4-继续举例分析字符在java中的乱码情况"><a href="#1-2-4-继续举例分析字符在java中的乱码情况" class="headerlink" title="1.2.4 继续举例分析字符在java中的乱码情况"></a>1.2.4 继续举例分析字符在java中的乱码情况</h3><p>你是否考虑过，当我们在电脑中某个文本编辑器里输入某个汉字时，它到底是怎么表示的？我们知道，计算机里所有的信息都是以 01 表示的，那么一个汉字，它到底是多少个 0 和 1 呢？我们能够看到的汉字都是以字符形式出现的，例如在 Java 中“淘宝”两个字符，它在计算机中的数值 10 进制是 28120 和 23453，16 进制是 6bd8 和 5d9d，也就是这两个字符是由这两个数字唯一表示的。Java 中一个 char 是 16 个 bit 相当于两个字节，所以两个汉字用 char 表示在内存中占用相当于四个字节的空间。</p><h4 id="1-2-4-1-中文变成了看不懂的字符-一个汉字变成两个乱码字符"><a href="#1-2-4-1-中文变成了看不懂的字符-一个汉字变成两个乱码字符" class="headerlink" title="1.2.4.1 中文变成了看不懂的字符, 一个汉字变成两个乱码字符"></a>1.2.4.1 中文变成了看不懂的字符, 一个汉字变成两个乱码字符</h4><p>例如，字符串“淘！我喜欢！”变成了“Ì Ô £ ¡Î Ò Ï²»¶ £ ¡”编码过程如下图所示<br><img src="http://oe20lp6p0.bkt.clouddn.com/2017/github/encoding-gbk-iso.gif"></p><h4 id="1-2-4-2-一个汉字变成一个问号"><a href="#1-2-4-2-一个汉字变成一个问号" class="headerlink" title="1.2.4.2 一个汉字变成一个问号"></a>1.2.4.2 一个汉字变成一个问号</h4><p><img src="http://oe20lp6p0.bkt.clouddn.com/2017/github/encoding-iso-iso.gif"></p><h4 id="1-2-4-3-一个汉字变成两个问号"><a href="#1-2-4-3-一个汉字变成两个问号" class="headerlink" title="1.2.4.3 一个汉字变成两个问号"></a>1.2.4.3 一个汉字变成两个问号</h4><p><img src="http://oe20lp6p0.bkt.clouddn.com/2017/github/encoding-gbk-iso-gbk-gbk.gif"></p><h4 id="1-2-4-4-不应该这样编码，即使结果是正确的"><a href="#1-2-4-4-不应该这样编码，即使结果是正确的" class="headerlink" title="1.2.4.4 不应该这样编码，即使结果是正确的"></a>1.2.4.4 不应该这样编码，即使结果是正确的</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//乱码</span></span><br><span class="line">String value = request.getParameter(name);</span><br><span class="line"><span class="comment">//正常</span></span><br><span class="line">String value = String(request.getParameter(name).getBytes(<span class="string">&quot;</span></span><br><span class="line"><span class="string">ISO-8859-1&quot;</span>), <span class="string">&quot;GBK&quot;</span>); </span><br></pre></td></tr></table></figure><p><img src="http://oe20lp6p0.bkt.clouddn.com/2017/github/encoding-gbk-iso-iso-gbk.gif"><br>这种情况是这样的，ISO-8859-1 字符集的编码范围是 0000-00FF，正好和一个字节的编码范围相对应。这种特性保证了使用 ISO-8859-1 进行编码和解码可以保持编码数值“不变”。虽然中文字符在经过网络传输时，被错误地“拆”成了两个欧洲字符，但由于输出时也是用 ISO-8859-1，结果被“拆”开的中文字的两半又被合并在一起，从而又刚好组成了一个正确的汉字。虽然最终能取得正确的汉字，但是还是不建议用这种不正常的方式取得参数值，因为这中间增加了一次额外的编码与解码，这种情况出现乱码时因为 Tomcat 的配置文件中 useBodyEncodingForURI 配置项没有设置为”true”，从而造成第一次解析式用 ISO-8859-1 来解析才造成乱码的。</p><h3 id="1-3-java-web的一些编码知识"><a href="#1-3-java-web的一些编码知识" class="headerlink" title="1.3 java web的一些编码知识"></a>1.3 java web的一些编码知识</h3><h4 id="1-3-1-URL的编码和解码"><a href="#1-3-1-URL的编码和解码" class="headerlink" title="1.3.1 URL的编码和解码"></a>1.3.1 URL的编码和解码</h4><p>首先，估计绝大部分搞web的不一定说的出URL的组成部分是啥：<br><img src="http://oe20lp6p0.bkt.clouddn.com/2017/github/encoding-URL-tomcat.gif"><br>上图中以 Tomcat 作为 Servlet Engine 为例，它们分别对应到下面这些配置文件中：<br>Port 对应在 Tomcat 的<code> &lt;Connector port=&quot;8080&quot;/&gt;</code> 中配置，而 Context Path 在<code>&lt;Context path=&quot;/examples&quot;/&gt;</code>中配置，Servlet Path 在 Web 应用的 <code>web.xml</code>中的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span> </span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>junshanExample<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> </span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlets/servlet/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;url-pattern&gt;</code> 中配置，PathInfo 是我们请求的具体的 Servlet，QueryString 是要传递的参数，注意这里是在浏览器里直接输入 URL 所以是通过 Get 方法请求的，如果是 POST 方法请求的话，QueryString 将通过表单方式提交到服务器端。</p><p>上图中 PathInfo 和 QueryString 出现了中文，当我们在浏览器中直接输入这个 URL 时，在浏览器端和服务端会如何编码和解析这个 URL 呢？为了验证浏览器是怎么编码 URL 的我们选择 FireFox 浏览器并通过 HTTPFox 插件观察我们请求的 URL 的实际的内容，以下是 URL：HTTP://localhost:8080/examples/servlets/servlet/ 君山 ?author= 君山在中文 FireFox3.6.12 的测试结果<br>君山的编码结果分别是：<code>e5 90 9b e5 b1 b1，be fd c9 bd</code>，查阅上一届的编码可知，PathInfo 是 UTF-8 编码而 QueryString 是经过 GBK 编码，至于为什么会有“%”？查阅 URL 的编码规范 RFC3986 可知<strong>浏览器编码 URL 是将非 ASCII 字符按照某种编码格式编码成 16 进制数字然后将每个 16 进制表示的字节前加上++“%”</strong>，++所以最终的 URL 就成了上图的格式了。</p><p>默认情况下中文 IE 最终的编码结果也是一样的，不过 IE 浏览器可以修改 URL 的编码格式在选项 -&gt; 高级 -&gt; 国际里面的发送 UTF-8 URL 选项可以取消。<br>从上面测试结果可知浏览器对 PathInfo 和 QueryString 的编码是不一样的，不同浏览器对 PathInfo 也可能不一样，这就对服务器的解码造成很大的困难，下面我们以 Tomcat 为例看一下，Tomcat 接受到这个 URL 是如何解码的。<br>解析请求的 URL 是在 org.apache.coyote.HTTP11.InternalInputBuffer 的 parseRequestLine 方法中，这个方法把传过来的 URL 的 byte[] 设置到 org.apache.coyote.Request 的相应的属性中。这里的 URL 仍然是 byte 格式，转成 char 是在 org.apache.catalina.connector.CoyoteAdapter 的 convertURI 方法中完成的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">convertURI</span><span class="params">(MessageBytes uri, Request request)</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">       ByteChunk bc = uri.getByteChunk(); </span><br><span class="line">       <span class="keyword">int</span> length = bc.getLength(); </span><br><span class="line">       CharChunk cc = uri.getCharChunk(); </span><br><span class="line">       cc.allocate(length, -<span class="number">1</span>); </span><br><span class="line">       String enc = connector.getURIEncoding(); </span><br><span class="line">       <span class="keyword">if</span> (enc != <span class="keyword">null</span>) &#123; </span><br><span class="line">           B2CConverter conv = request.getURIConverter(); </span><br><span class="line">           <span class="keyword">try</span> &#123; </span><br><span class="line">               <span class="keyword">if</span> (conv == <span class="keyword">null</span>) &#123; </span><br><span class="line">                   conv = <span class="keyword">new</span> B2CConverter(enc); </span><br><span class="line">                   request.setURIConverter(conv); </span><br><span class="line">               &#125; </span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;...&#125; </span><br><span class="line">           <span class="keyword">if</span> (conv != <span class="keyword">null</span>) &#123; </span><br><span class="line">               <span class="keyword">try</span> &#123; </span><br><span class="line">                   conv.convert(bc, cc, cc.getBuffer().length - cc.getEnd()); </span><br><span class="line">                   uri.setChars(cc.getBuffer(), cc.getStart(), cc.getLength()); </span><br><span class="line">                   <span class="keyword">return</span>; </span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;...&#125; </span><br><span class="line">           &#125; </span><br><span class="line">       &#125; </span><br><span class="line">       <span class="comment">// Default encoding: fast conversion </span></span><br><span class="line">       <span class="keyword">byte</span>[] bbuf = bc.getBuffer(); </span><br><span class="line">       <span class="keyword">char</span>[] cbuf = cc.getBuffer(); </span><br><span class="line">       <span class="keyword">int</span> start = bc.getStart(); </span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123; </span><br><span class="line">           cbuf[i] = (<span class="keyword">char</span>) (bbuf[i + start] &amp; <span class="number">0xff</span>); </span><br><span class="line">       &#125; </span><br><span class="line">       uri.setChars(cbuf, <span class="number">0</span>, length); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码中可以知道对 URL 的 URI 部分进行解码的字符集是在 connector 的<code>&lt;Connector URIEncoding=”UTF-8”/&gt;</code>中定义的，如果没有定义，那么将以默认编码 ISO-8859-1 解析。所以<strong>如果有中文 URL 时最好把 URIEncoding 设置成 UTF-8 编码</strong>。</p><p><strong>QueryString 又如何解析？</strong> </p><p>GET 方式 HTTP 请求的 QueryString 与 POST 方式 HTTP 请求的表单参数都是作为 Parameters 保存，都是通过 request.getParameter 获取参数值。对它们的解码是在 request.getParameter 方法第一次被调用时进行的。request.getParameter 方法被调用时将会调用 org.apache.catalina.connector.Request 的 parseParameters 方法。这个方法将会对 GET 和 POST 方式传递的参数进行解码，但是它们的解码字符集有可能不一样。POST 表单的解码将在后面介绍，<strong>QueryString 的解码字符集是在哪定义的呢？它本身是通过 HTTP 的 Header 传到服务端的，并且也在 URL 中</strong>，是否和 URI 的解码字符集一样呢？从前面浏览器对 PathInfo 和 QueryString 的编码采取不同的编码格式不同可以猜测到解码字符集肯定也不会是一致的。的确是这样 <strong>QueryString 的解码字符集要么是 Header 中 ContentType 中定义的 Charset 要么就是默认的 ISO-8859-1</strong>，要使用 ContentType 中定义的编码就要设置 connector 的 <code>&lt;Connector URIEncoding=”UTF-8” useBodyEncodingForURI=”true”/&gt;</code> 中的 <code>useBodyEncodingForURI</code> 设置为 <code>true</code>。这个配置项的名字有点让人产生混淆，它并不是对整个 URI 都采用 BodyEncoding 进行解码而<strong>仅仅是对 QueryString 使用 BodyEncoding</strong> 解码，这一点还要特别注意。</p><p>从上面的 URL 编码和解码过程来看，比较复杂，而且编码和解码并不是我们在应用程序中能完全控制的，所以在我们的应用程序中应该尽量避免在 URL 中使用非 ASCII字符，不然很可能会碰到乱码问题，当然在我们的服务器端最好设置 <code>&lt;Connector/&gt;</code> 中的 URIEncoding 和 useBodyEncodingForURI 两个参数。</p><p><strong>HTTP Header 的编解码</strong></p><p>当客户端发起一个 HTTP 请求除了上面的 URL 外还可能会在 Header 中传递其它参数如 Cookie、redirectPath 等，这些用户设置的值很可能也会存在编码问题，Tomcat 对它们又是怎么解码的呢？</p><p>对 Header 中的项进行解码也是在调用 request.getHeader 是进行的，如果请求的 Header 项没有解码则调用 MessageBytes 的 toString 方法，这个方法将从 byte 到 char 的转化使用的默认编码也是 <strong>ISO-8859-1</strong>，<strong>而我们也不能设置 Header 的其它解码格式</strong>，所以如果你设置 Header 中有非 ASCII 字符解码肯定会有乱码。</p><p>我们在添加 Header 时也是同样的道理，不要在 Header 中传递非 ASCII 字符，如果一定要传递的话，我们可以先将这些字符用 org.apache.catalina.util.URLEncoder 编码然后再添加到 Header 中，这样在浏览器到服务器的传递过程中就不会丢失信息了，如果我们要访问这些项时再按照相应的字符集解码就好了。<br>POST 表单的编解码在前面提到了 POST 表单提交的参数的解码是在第一次调用 request.getParameter 发生的，POST 表单参数传递方式与 QueryString 不同，它是通过 HTTP 的 BODY 传递到服务端的。当我们在页面上<strong>点击 submit 按钮时浏览器首先将根据 <code>ContentType </code>的 <code>Charset</code> 编码格式对表单填的参数进行编码然后提交到服务器端，在服务器端同样也是用 ContentType 中字符集进行解码。</strong>所以通过 POST 表单提交的参数一般不会出现问题，而且这个字符集编码是我们自己设置的，可以通过 request.setCharacterEncoding(charset) 来设置。<br>另外针对 multipart/form-data 类型的参数，也就是上传的文件编码同样也是使用 ContentType 定义的字符集编码，值得注意的地方是上传文件是用字节流的方式传输到服务器的本地临时目录，这个过程并没有涉及到字符编码，而真正编码是在将文件内容添加到 parameters 中，如果用这个编码不能编码时将会用默认编码 ISO-8859-1 来编码。</p><p><strong>HTTP BODY 的编解码</strong></p><p>当用户请求的资源已经成功获取后，这些内容将通过 Response 返回给客户端浏览器，这个过程先要经过编码再到浏览器进行解码。这个过程的编解码字符集可以通过 response.setCharacterEncoding 来设置，它将会覆盖 request.getCharacterEncoding 的值，并且通过 Header 的 Content-Type 返回客户端，浏览器接受到返回的 socket 流时将通过 Content-Type 的 charset 来解码，如果返回的 HTTP Header 中 Content-Type 没有设置 charset，那么浏览器将根据 Html 的<code> &lt;meta HTTP-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;</code> 中的 charset 来解码。如果也没有定义的话，那么浏览器将使用默认的编码来解码。</p><p><strong>其它需要编码的地方</strong></p><p>除了 URL 和参数编码问题外，在服务端还有很多地方可能存在编码，如可能需要读取 xml、velocity 模版引擎、JSP 或者从数据库读取数据等。<br>xml 文件可以通过设置头来制定编码格式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Velocity 模版设置编码格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.VelocityService.input.encoding&#x3D;UTF-8</span><br></pre></td></tr></table></figure><p>JSP 设置编码格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@page contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;%&gt;</span><br></pre></td></tr></table></figure><p>访问数据库都是通过客户端 JDBC 驱动来完成，用 JDBC 来存取数据要和数据的内置编码保持一致，可以通过设置 JDBC URL 来制定如 MySQL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;DB?useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&quot;</span><br></pre></td></tr></table></figure><p><a href="https://ryan-miao.github.io/2017/06/26/java-utf8-iso-%E4%B9%B1%E7%A0%81%E6%A0%B9%E6%BA%90/">Post@https://ryan-miao.github.io</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/index.html">https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/index.html</a></li><li><a href="http://www.importnew.com/23963.html">http://www.importnew.com/23963.html</a></li><li><a href="https://en.wikipedia.org/wiki/Unicode">https://en.wikipedia.org/wiki/Unicode</a></li><li><a href="https://en.wikipedia.org/wiki/ISO/IEC_8859-1">https://en.wikipedia.org/wiki/ISO/IEC_8859-1</a></li><li><a href="https://en.wikipedia.org/wiki/ASCII">https://en.wikipedia.org/wiki/ASCII</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> UTF-8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reading Schedule</title>
      <link href="2017/06/19/reading-schedule/"/>
      <url>2017/06/19/reading-schedule/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>技术永无止境，总会遇到各种问题而发现新的技术解决方案，需要学习。而这时才发现基础是多么的重要。从最初觉得书籍的内容乏味，更喜欢直接从网络中获取，到最喜欢看官方文档。到现在反而觉得看书最好，书籍汇集了作者的精血，学习一本书能够获得远比官方文档多得多的东西。</p><h1 id="Reading-Schedule"><a href="#Reading-Schedule" class="headerlink" title="Reading Schedule"></a>Reading Schedule</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gantt</span><br><span class="line">dateFormat YYYY-MM-DD</span><br><span class="line">section 大型分布式网站架构设计与实践</span><br><span class="line">T1: 2017-06-19, 30d</span><br><span class="line">section java8基础</span><br><span class="line">T2: 2017-07-01, 30d</span><br><span class="line">section spring-cloud系列</span><br><span class="line">T3: 2017-08-01, 30d</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> 大型分布式网站架构设计与实践</li><li><input disabled="" type="checkbox"> java8实战</li><li><input disabled="" type="checkbox"> Spring Cloud基础</li></ul>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reading </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>banner自动生成工具，ascii文字展示</title>
      <link href="2017/06/17/banner-ascii-2-txt/"/>
      <url>2017/06/17/banner-ascii-2-txt/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="post-Ryan-Miao-github-io"><a href="#post-Ryan-Miao-github-io" class="headerlink" title="post@ Ryan-Miao@github.io"></a><a href="https://ryan-miao.github.io/2017/06/17/banner-ascii-2-txt/">post@ Ryan-Miao@github.io</a></h2><p>Spring-Boot里有个banner的功能，刚开始觉得很鸡肋。然而，现在觉得蛮有意思的。无聊的程序员。</p><a id="more"></a><h1 id="生成文字"><a href="#生成文字" class="headerlink" title="生成文字"></a>生成文字</h1><p>大部分工具只支持英文的库，中文的我还没发现。</p><p>推荐使用在线库：<a href="http://www.network-science.de/ascii/">http://www.network-science.de/ascii/</a></p><p>比如这样：<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/asci.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">$&#123;AnsiColor.BRIGHT_YELLOW&#125;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line"> _____  _           _          _    _            _         _   _</span><br><span class="line"> |  __ \| |         | |        | |  | |          | |       | | | |</span><br><span class="line"> | |__) | |__   ___ | |_ ___   | |__| | __ _  ___| | ____ _| |_| |__   ___  _ __</span><br><span class="line"> |  ___&#x2F;| &#39;_ \ &#x2F; _ \| __&#x2F; _ \  |  __  |&#x2F; _&#96; |&#x2F; __| |&#x2F; &#x2F; _&#96; | __| &#39;_ \ &#x2F; _ \| &#39;_ \</span><br><span class="line"> | |    | | | | (_) | || (_) | | |  | | (_| | (__|   &lt; (_| | |_| | | | (_) | | | |</span><br><span class="line"> |_|    |_| |_|\___&#x2F; \__\___&#x2F;  |_|  |_|\__,_|\___|_|\_\__,_|\__|_| |_|\___&#x2F;|_| |_|</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;                          _ooOoo_                               &#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;                         o8888888o                              &#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;                         88&quot; . &quot;88                              &#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;                         (| ^_^ |)                              &#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;                         O\  &#x3D;  &#x2F;O                              &#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;                      ____&#x2F;&#96;---&#39;\____                           &#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;                    .&#39;  \\|     |&#x2F;&#x2F;  &#96;.                         &#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;                   &#x2F;  \\|||  :  |||&#x2F;&#x2F;  \                        &#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;                  &#x2F;  _||||| -:- |||||-  \                       &#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;                  |   | \\\  -  &#x2F;&#x2F;&#x2F; |   |                       &#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;                  | \_|  &#39;&#39;\---&#x2F;&#39;&#39;  |   |                       &#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;                  \  .-\__  &#96;-&#96;  ___&#x2F;-. &#x2F;                       &#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;                ___&#96;. .&#39;  &#x2F;--.--\  &#96;. . ___                     &#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;              .&quot;&quot; &#39;&lt;  &#96;.___\_&lt;|&gt;_&#x2F;___.&#39;  &gt;&#39;&quot;&quot;.                  &#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;            | | :  &#96;- \&#96;.;&#96;\ _ &#x2F;&#96;;.&#96;&#x2F; - &#96; : | |                 &#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;            \  \ &#96;-.   \_ __\ &#x2F;__ _&#x2F;   .-&#96; &#x2F;  &#x2F;                 &#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;      &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#96;-.____&#96;-.___\_____&#x2F;___.-&#96;____.-&#39;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;         &#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;                           &#96;&#x3D;---&#x3D;&#39;                              &#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        &#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;            佛祖保佑       永不宕机     永无BUG                    &#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">:: Spring Boot :: $&#123;spring-boot.version&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中<code>$&#123;AnsiColor.BRIGHT_YELLOW&#125;</code>表示在控制台打印的颜色。</p><p>另外，banner还可以设置编码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">banner:</span><br><span class="line">  charset: UTF-8</span><br></pre></td></tr></table></figure><h1 id="生成图片"><a href="#生成图片" class="headerlink" title="生成图片"></a>生成图片</h1><p>生成图片就是一个很强大的功能了。中文文字其实也可以通过截图的方式用图片来转成文字。</p><p>推荐生成图片库：<br><a href="http://www.degraeve.com/img2txt.php">http://www.degraeve.com/img2txt.php</a></p><p>生成后：<br><img src="http://oe20lp6p0.bkt.clouddn.com/blog/2017/img2txt"></p><h2 id="post-Ryan-Miao-github-io-1"><a href="#post-Ryan-Miao-github-io-1" class="headerlink" title="post@ Ryan-Miao@github.io"></a><a href="https://ryan-miao.github.io/2017/06/17/banner-ascii-2-txt/">post@ Ryan-Miao@github.io</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 参考</span><br><span class="line">http:&#x2F;&#x2F;blog.csdn.net&#x2F;baochanghong&#x2F;article&#x2F;details&#x2F;54286422</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> banner </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EhCache3 入门以及与Spring集成</title>
      <link href="2017/05/23/Ehcache3%E5%85%A5%E9%97%A8-Spring%E9%9B%86%E6%88%90/"/>
      <url>2017/05/23/Ehcache3%E5%85%A5%E9%97%A8-Spring%E9%9B%86%E6%88%90/</url>
      
        <content type="html"><![CDATA[<p>post @ <a href="https://ryan-miao.github.io/2017/05/21/Ehcache3%E5%85%A5%E9%97%A8-Spring%E9%9B%86%E6%88%90/">Ryan-Miao.github.io</a></p><h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h1><blockquote><p>Ehcache is an open source, standards-based cache that boosts performance, offloads your database, and simplifies scalability. It’s the most widely-used Java-based cache because it’s robust, proven, full-featured, and integrates with other popular libraries and frameworks. Ehcache scales from in-process caching, all the way to mixed in-process/out-of-process deployments with terabyte-sized caches.</p></blockquote><p>Ehcache是一个开源的，基于标准的缓存，可提升性能，卸载数据库，简化可扩展性。它是最广泛使用的基于Java的缓存，因为它是强大的，经过验证的，全功能的，并与其他受欢迎的库和框架集成。Ehcache可以从进程中缓存扩展到千万亿字节大小的高速缓存的混合进程内/进程外部署。</p><a id="more"></a><h2 id="1-1-关于版本"><a href="#1-1-关于版本" class="headerlink" title="1.1 关于版本"></a>1.1 关于版本</h2><p>EhCache分2.x和3.x两种版本，3.x的升级不兼容2.x。<br>2.x 的包名是<code>net.sf.ehcache</code>,3.x的包名是<code>org.ehcache</code>。<br>spring support包里ehcache就是集成2.x的，而3.x满足JCache (aka JSR-107) 标准，与spring集成采取JCache路线。  </p><p>本次学习ehcache3.</p><h2 id="1-2-Getting-Started"><a href="#1-2-Getting-Started" class="headerlink" title="1.2 Getting Started"></a>1.2 Getting Started</h2><p>添加ehcache以及jsr107的依赖</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="attr">group:</span> <span class="string">&#x27;org.ehcache&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;ehcache&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;3.3.1&#x27;</span></span><br><span class="line">compile <span class="attr">group:</span> <span class="string">&#x27;javax.cache&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;cache-api&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;1.0.0&#x27;</span></span><br></pre></td></tr></table></figure><p>一个简单cache：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.ehcache.Cache;</span><br><span class="line"><span class="keyword">import</span> org.ehcache.CacheManager;</span><br><span class="line"><span class="keyword">import</span> org.ehcache.config.builders.CacheConfigurationBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.ehcache.config.builders.CacheConfigurationBuilder.newCacheConfigurationBuilder;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.ehcache.config.builders.CacheManagerBuilder.newCacheManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.ehcache.config.builders.ResourcePoolsBuilder.heap;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertEquals;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String preConfiguredCacheName = <span class="string">&quot;preConfigured&quot;</span>;</span><br><span class="line"></span><br><span class="line">    CacheConfigurationBuilder&lt;Long, String&gt; configurationBuilder = newCacheConfigurationBuilder(Long.class, String.class, heap(<span class="number">2</span>));</span><br><span class="line">    CacheManager cacheManager = newCacheManagerBuilder()</span><br><span class="line">            .withCache(preConfiguredCacheName, configurationBuilder)</span><br><span class="line">            .build(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    Cache&lt;Long, String&gt; preConfiguredCache =</span><br><span class="line">            cacheManager.getCache(preConfiguredCacheName, Long.class, String.class);</span><br><span class="line"></span><br><span class="line">    String one = <span class="string">&quot;Ryan&quot;</span>;</span><br><span class="line">    preConfiguredCache.put(<span class="number">1L</span>, one);</span><br><span class="line">    String first = preConfiguredCache.get(<span class="number">1L</span>);</span><br><span class="line">    assertEquals(one, first);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    String two = <span class="string">&quot;Leslie&quot;</span>;</span><br><span class="line">    preConfiguredCache.put(<span class="number">2L</span>, two);</span><br><span class="line">    String second = preConfiguredCache.get(<span class="number">2L</span>);</span><br><span class="line">    assertEquals(two, second);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cacheManager.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于当前流行java配置，典型xml配置就不探究了，虽然xml配置更简洁，但我更喜欢java配置的可读性。</p><p>创建cache要点：   </p><ol><li>需要一个<code>CacheManager</code>来管理cache。</li><li>需要一个<code>CacheConfiguration</code>来制定创建cache的条件。</li></ol><p>本例中创建CacheManager的同时也创建了一个cache，其中制定了cache的key和value的类型以及cache的数量限制： heap(2)，即只允许在java堆中创建两个单位的cache。</p><h2 id="1-3-创建cache"><a href="#1-3-创建cache" class="headerlink" title="1.3 创建cache"></a>1.3 创建cache</h2><p>当然也可以创建完CacheManger后创建cache：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Cache&lt;Long, String&gt; <span class="title">createCache</span><span class="params">(String cacheName, CacheManager cacheManager)</span> </span>&#123;</span><br><span class="line">    CacheConfiguration&lt;Long, String&gt; cacheConfiguration = newCacheConfigurationBuilder(Long.class, String.class, heap(<span class="number">10</span>))</span><br><span class="line">            .withSizeOfMaxObjectGraph(<span class="number">1000</span>)</span><br><span class="line">            .withSizeOfMaxObjectSize(<span class="number">1000</span>, MemoryUnit.B)</span><br><span class="line">            .withExpiry(Expirations.timeToLiveExpiration(Duration.of(<span class="number">20</span>, TimeUnit.HOURS)))</span><br><span class="line">            .build();</span><br><span class="line">    Cache&lt;Long, String&gt; myCache = cacheManager.createCache(cacheName,</span><br><span class="line">            cacheConfiguration);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> myCache;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开始的第一个例子设置了cache的大小，而这里也用到了创建cache的几个限定条件： </p><ul><li>heap(10) 堆内存中最多缓存10个单位</li><li>withSizeOfMaxObjectGraph 遍历一个对象图的时候的最多对象数</li><li>withSizeOfMaxObjectSize 单个对象的最大size</li><li>withExpiry 过期策略<ul><li>timeToLiveExpiration  cache的生存时间，即创建cache后可以存在多久</li><li>timeToIdleExpiration   cache的闲置时间，即最近一次使用cache之后最多可以闲置多久</li><li>noExpiration 永不过期</li></ul></li></ul><p>到这里，创建cache基本完毕，还有一个需要注意的是cache逐出策略以及磁盘存储。</p><h2 id="1-4-cache的其他存储方式"><a href="#1-4-cache的其他存储方式" class="headerlink" title="1.4 cache的其他存储方式"></a>1.4 cache的其他存储方式</h2><p>Ehcache3提供了4种存储策略：</p><ul><li>heap</li><li>offheap</li><li>disk</li><li>clustered</li></ul><p>这4种存储方案的速率依次降低。关于cluster暂且不研究，因为当前主要做本地cache。</p><p>首先heap就是指java堆内存，这个会被GC，所以最好数量不要太大。因为太多的cache就会造成堆内存可用内存减少，容易引起GC, stop the world. 这个可以选择存储引用（reference）或者值（value）, 默认为reference，不需要序列化和反序列化，速度最快。</p><p>offheap是堆外内存，不会受GC影响，但必须以value的形式存储cache，这就会序列化和反序列化，造成性能比heap要慢。想启用offheap必须要确定是否开启了<code>-XX:MaxDirectMemorySize=size[g|G|m|M|k|K]</code>，如果没设置则默认不开启，就无法使用offheap。</p><p>disk就是磁盘存储了，需要制定存储路径，当然速度也更慢。</p><p>典型的存储方案是三层绑定，即heap-&gt;offheap-&gt;disk。<br><img src="http://www.ehcache.org/documentation/3.3/images/TiersHierarchy.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PersistentCacheManager persistentCacheManager = CacheManagerBuilder.newCacheManagerBuilder()</span><br><span class="line">  .with(CacheManagerBuilder.persistence(<span class="keyword">new</span> File(getStoragePath(), <span class="string">&quot;myData&quot;</span>)))</span><br><span class="line">  .withCache(<span class="string">&quot;threeTieredCache&quot;</span>,</span><br><span class="line">    CacheConfigurationBuilder.newCacheConfigurationBuilder(Long.class, String.class,</span><br><span class="line">      ResourcePoolsBuilder.newResourcePoolsBuilder()</span><br><span class="line">        .heap(<span class="number">10</span>, EntryUnit.ENTRIES)</span><br><span class="line">        .offheap(<span class="number">1</span>, MemoryUnit.MB)</span><br><span class="line">        .disk(<span class="number">20</span>, MemoryUnit.MB, <span class="keyword">true</span>)</span><br><span class="line">    )</span><br><span class="line">  ).build(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><h2 id="1-5-关于逐出策略"><a href="#1-5-关于逐出策略" class="headerlink" title="1.5 关于逐出策略"></a>1.5 关于逐出策略</h2><p>当存储空间满了之后就必须选择加进去还是换出来。看官方文档，貌似不建议逐出策略，因为所有的example都没有逐出策略。在2.x版本红，我们可以选择LRU以及FIFO、LFU。在3.x中提供了<code>EvictionAdvisor</code>，通过继承此类可以实现采取哪种方式逐出。</p><p>为啥不建议逐出呢，因为逐出策略会使得每次加入缓存和删除缓存都要多一次甚至多次比较，耗费性能。3.x里默认貌似是缓存满了就不添加了，当然这个具体是啥也没研究了，因为官方说即便你设置逐出策略，当命中率太低时会直接忽略并自行决定合适的逐出策略。   </p><blockquote><p>After a certain time, if a cache determines that the configured eviction advisor rejected too many eviction candidates, the cache can decide to completely bypass the eviction advisor and evict anything it sees fit.</p></blockquote><h2 id="1-6-关于统计命中"><a href="#1-6-关于统计命中" class="headerlink" title="1.6 关于统计命中"></a>1.6 关于统计命中</h2><p>3.x居然没有甚至还没打算是否暴露出本地统计的api，也就是说目前没有统计的办法了。但官方说因为EhCahe事先了JSR107的标准，可以采用JSR107标准中MBean的方法来统计，然而我也没找到怎么通过MBean来统计了。 这一点直接让我对3.x从入门到放弃，在没找到统计方法之前，不继续研究了！！！</p><hr><h2 id="post-Ryan-Miao-github-io"><a href="#post-Ryan-Miao-github-io" class="headerlink" title="post @ Ryan-Miao.github.io"></a>post @ <a href="https://ryan-miao.github.io/2017/05/21/Ehcache3%E5%85%A5%E9%97%A8-Spring%E9%9B%86%E6%88%90/">Ryan-Miao.github.io</a></h2>]]></content>
      
      
      <categories>
          
          <category> Cache </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EhCache </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2017/05/21/about/"/>
      <url>2017/05/21/about/</url>
      
        <content type="html"><![CDATA[<img src="/images/me3.png" alt="About me" style=" border: 0px;"/><h2 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h2><p>主要面向Java Web，Java服务端开发。</p><ul><li>熟悉Java</li><li>熟悉SpringMVC，SpringBoot，Dropwizard</li><li>熟悉Mybatis</li><li>熟悉CentOS等基本命令</li><li>熟悉MongoDB, DynamoDB</li><li>熟悉Redis</li></ul><h2 id="技术博客"><a href="#技术博客" class="headerlink" title="技术博客"></a>技术博客</h2><ul><li><a href="https://cnblogs.com/woshimrf">博客园</a></li><li><a href="https://github.com/Ryan-Miao">Github</a></li><li><a href="https://ryan-miao.github.io/">?</a></li><li><a href="https://juejin.im/user/5853f6168d6d8100659afea2/article">掘金</a></li></ul><h2 id="研究方向"><a href="#研究方向" class="headerlink" title="研究方向"></a>研究方向</h2><p>构建更好的系统, 接下来准备打通Springcloud技术栈。</p><h2 id="期望"><a href="#期望" class="headerlink" title="期望"></a>期望</h2><p>更多的时间！学海无涯。</p><h2 id="人生之路"><a href="#人生之路" class="headerlink" title="人生之路"></a>人生之路</h2><p>1991 - 2014          认知世界，学习技能。<br>2014 - 2015          北京，以及第一行上线的代码。<br>2016 - 20xx          深圳，什么是企业级的开发模式？</p><h2 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h2><p>Everything is possible！</p><img src="/images/me.png" alt="About me" style=" border: 0px;" title="1060388212@qq.com"/>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2017/05/20/hello-world/"/>
      <url>2017/05/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> test </category>
          
          <category> final </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC参数校验（针对`@RequestBody`返回`400`）</title>
      <link href="2017/05/20/spring400/"/>
      <url>2017/05/20/spring400/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMVC参数校验（针对-RequestBody返回400）"><a href="#SpringMVC参数校验（针对-RequestBody返回400）" class="headerlink" title="SpringMVC参数校验（针对@RequestBody返回400）"></a>SpringMVC参数校验（针对<code>@RequestBody</code>返回<code>400</code>）</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>习惯别人帮忙做事的结果是自己不会做事了。一直以来，<code>spring</code>帮我解决了程序运行中的各种问题，我只要关心我的业务逻辑，设计好我的业务代码，返回正确的结果即可。直到遇到了<code>400</code>。</p><a id="more"></a><p><code>spring</code>返回400的时候通常没有任何错误提示，当然也通常是参数不匹配。这在参数少的情况下还可以一眼看穿，但当参数很大是，排除参数也很麻烦，更何况，既然错误了，为什么指出来原因呢。好吧，<code>springmvc</code>把这个权力交给了用户自己。</p><h3 id="springmvc异常处理"><a href="#springmvc异常处理" class="headerlink" title="springmvc异常处理"></a><code>springmvc</code>异常处理</h3><p>最开始的时候也想过自己拦截会出异常的method来进行异常处理，但显然不需要这么做。spring提供了内嵌的以及全局的异常处理方法，基本可以满足我的需求了。</p><h4 id="1-内嵌异常处理"><a href="#1-内嵌异常处理" class="headerlink" title="1. 内嵌异常处理"></a>1. 内嵌异常处理</h4><p>如果只是这个<code>controller</code>的异常做单独处理，那么就适合绑定这个<code>controller</code>本身的异常。</p><p><strong>具体做法是使用注解<code>@ExceptionHandler</code></strong>.</p><p>在这个<code>controller</code>中添加一个方法，并添加上述注解，并指明要拦截的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;saveOrUpdate&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveOrUpdate</span><span class="params">(HttpServletResponse response, <span class="meta">@RequestBody</span> Order order)</span></span>&#123;</span><br><span class="line">CodeMsg result = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">result = orderService.saveOrUpdate(order);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">logger.error(<span class="string">&quot;save failed.&quot;</span>, e);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.renderString(response, CodeMsg.error(e.getMessage()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.renderString(response, result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@ResponseStatus(HttpStatus.BAD_REQUEST)</span></span><br><span class="line"><span class="meta">@ExceptionHandler(HttpMessageNotReadableException.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CodeMsg <span class="title">messageNotReadable</span><span class="params">(HttpMessageNotReadableException exception, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">    LOGGER.error(<span class="string">&quot;请求参数不匹配。&quot;</span>, exception);</span><br><span class="line">    <span class="keyword">return</span> CodeMsg.error(exception.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>saveOrUpdate</code>是我们想要拦截一样的请求，而<code>messageNotReadable</code>则是处理异常的代码。<br><code>@ExceptionHandler(HttpMessageNotReadableException.class)</code>表示我要拦截何种异常。在这里，由于<code>springmvc</code>默认采用<code>jackson</code>作为json序列化工具，当反序列化失败的时候就会抛出<code>HttpMessageNotReadableException</code>异常。具体如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;code&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;Could not read JSON: Failed to parse Date value &#x27;2017-03-&#x27; (format: \&quot;yyyy-MM-dd HH:mm:ss\&quot;): Unparseable date: \&quot;2017-03-\&quot; (through reference chain: com.test.modules.order.entity.Order[\&quot;serveTime\&quot;]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Failed to parse Date value &#x27;2017-03-&#x27; (format: \&quot;yyyy-MM-dd HH:mm:ss\&quot;): Unparseable date: \&quot;2017-03-\&quot; (through reference chain: com.test.modules.order.entity.Order[\&quot;serveTime\&quot;])&quot;</span>,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是个典型的<code>jackson</code>反序列化失败异常，也是造成我遇见过的400原因最多的。通常是日期格式不对。</p><p>另外，<code>@ResponseStatus(HttpStatus.BAD_REQUEST)</code>这个注解是为了标识这个方法返回值的HttpStatus code。我设置为400，当然也可以自定义成其他的。</p><h4 id="2-批量异常处理"><a href="#2-批量异常处理" class="headerlink" title="2. 批量异常处理"></a>2. 批量异常处理</h4><p>看到大多数资料写的是全局异常处理，我觉得对我来说批量更合适些，因为我只是希望部分controller被拦截而不是全部。</p><p><code>springmvc</code>提供了<code>@ControllerAdvice</code>来做批量拦截。</p><p>第一次看到注释这么少的源码，忍不住多读几遍。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Indicates the annotated class assists a &quot;Controller&quot;.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>表示这个注解是服务于<code>Controller</code>的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Serves as a specialization of &#123;@link Component @Component&#125;, allowing for implementation classes to be autodetected through classpath scanning.</span><br></pre></td></tr></table></figure><p>用来当做特殊的<code>Component</code>注解，允许使用者扫描发现所有的<code>classpath</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">It is typically used to define &#123;@link ExceptionHandler @ExceptionHandler&#125;,</span><br><span class="line"> * &#123;@link InitBinder @InitBinder&#125;, and &#123;@link ModelAttribute @ModelAttribute&#125;</span><br><span class="line"> * methods that apply to all &#123;@link RequestMapping @RequestMapping&#125; methods.</span><br></pre></td></tr></table></figure><p>典型的应用是用来定义xxxx.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">One of &#123;@link #annotations()&#125;, &#123;@link #basePackageClasses()&#125;,</span><br><span class="line"> * &#123;@link #basePackages()&#125; or its alias &#123;@link #value()&#125;</span><br><span class="line"> * may be specified to define specific subsets of Controllers</span><br><span class="line"> * to assist. When multiple selectors are applied, OR logic is applied -</span><br><span class="line"> * meaning selected Controllers should match at least one selector.</span><br></pre></td></tr></table></figure><p>这几个参数指定了扫描范围。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">the default behavior (i.e. if used without any selector),</span><br><span class="line"> * the &#123;@code @ControllerAdvice&#125; annotated class will</span><br><span class="line"> * assist all known Controllers.</span><br></pre></td></tr></table></figure><p>默认扫描所有的已知的的<code>Controller</code>s。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Note that those checks are done at runtime, so adding many attributes and using</span><br><span class="line"> * multiple strategies may have negative impacts (complexity, performance).</span><br></pre></td></tr></table></figure><p>注意这个检查是在运行时做的，所以注意性能问题，不要放太多的参数。</p><p>说的如此清楚，以至于用法如此简单。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@ControllerAdvice(&quot;com.api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiExceptionHandler</span> <span class="keyword">extends</span> <span class="title">BaseClientController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ApiExceptionHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exception UnexpectedTypeException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.BAD_REQUEST)</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(UnexpectedTypeException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CodeMsg <span class="title">unexpectedType</span><span class="params">(UnexpectedTypeException exception, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        LOGGER.error(<span class="string">&quot;校验方法太多，不确定合适的校验方法。&quot;</span>, exception);</span><br><span class="line">        <span class="keyword">return</span> CodeMsg.error(exception.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.BAD_REQUEST)</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(HttpMessageNotReadableException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CodeMsg <span class="title">messageNotReadable</span><span class="params">(HttpMessageNotReadableException exception, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        LOGGER.error(<span class="string">&quot;请求参数不匹配，request的json格式不正确&quot;</span>, exception);</span><br><span class="line">        <span class="keyword">return</span> CodeMsg.error(exception.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.BAD_REQUEST)</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CodeMsg <span class="title">ex</span><span class="params">(MethodArgumentNotValidException exception, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        LOGGER.error(<span class="string">&quot;请求参数不合法。&quot;</span>, exception);</span><br><span class="line">        BindingResult bindingResult = exception.getBindingResult();</span><br><span class="line">        String msg = <span class="string">&quot;校验失败&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CodeMsg(CodeMsgConstant.error, msg, getErrors(bindingResult));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, String&gt; <span class="title">getErrors</span><span class="params">(BindingResult result)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        List&lt;FieldError&gt; list = result.getFieldErrors();</span><br><span class="line">        <span class="keyword">for</span> (FieldError error : list) &#123;</span><br><span class="line">            map.put(error.getField(), error.getDefaultMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-Hibernate-validate"><a href="#3-Hibernate-validate" class="headerlink" title="3. Hibernate-validate"></a>3. Hibernate-validate</h4><p>使用参数校验如果不catch异常就会返回400. 所以这个也要规范一下。</p><h5 id="3-1-引入hibernate-validate"><a href="#3-1-引入hibernate-validate" class="headerlink" title="3.1 引入hibernate-validate"></a>3.1 引入hibernate-validate</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">   &lt;groupId&gt;org.hibernate&lt;&#x2F;groupId&gt;  </span><br><span class="line">   &lt;artifactId&gt;hibernate-validator&lt;&#x2F;artifactId&gt;  </span><br><span class="line">   &lt;version&gt;5.0.2.Final&lt;&#x2F;version&gt;  </span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">validator</span>=<span class="string">&quot;validator&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;validator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.validation.beanvalidation.LocalValidatorFactoryBean&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;providerClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.hibernate.validator.HibernateValidator&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;validationMessageSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;messageSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-2-使用"><a href="#3-2-使用" class="headerlink" title="3.2 使用"></a>3.2 使用</h5><ol><li><p>在实体类字段上标注要求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlipayRequest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotEmpty</span></span><br><span class="line">    <span class="keyword">private</span> String out_trade_no;</span><br><span class="line">    <span class="keyword">private</span> String subject;</span><br><span class="line">    <span class="meta">@DecimalMin(value = &quot;0.01&quot;, message = &quot;费用最少不能小于0.01&quot;)</span></span><br><span class="line">    <span class="meta">@DecimalMax(value = &quot;100000000.00&quot;, message = &quot;费用最大不能超过100000000&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String total_fee;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订单类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotEmpty(message = &quot;订单类型不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String business_type;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>controller里添加<code>@Valid</code> </p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;sign&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sign</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> AlipayRequest params</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>&#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.错误处理<br>前面已经提到，如果不做处理的结果就是400,415. 这个对应Exception是<code>MethodArgumentNotValidException</code>,也是这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseStatus(HttpStatus.BAD_REQUEST)</span></span><br><span class="line"><span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CodeMsg <span class="title">ex</span><span class="params">(MethodArgumentNotValidException exception, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">    LOGGER.error(<span class="string">&quot;请求参数不合法。&quot;</span>, exception);</span><br><span class="line">    BindingResult bindingResult = exception.getBindingResult();</span><br><span class="line">    String msg = <span class="string">&quot;校验失败&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CodeMsg(CodeMsgConstant.error, msg, getErrors(bindingResult));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, String&gt; <span class="title">getErrors</span><span class="params">(BindingResult result)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    List&lt;FieldError&gt; list = result.getFieldErrors();</span><br><span class="line">    <span class="keyword">for</span> (FieldError error : list) &#123;</span><br><span class="line">        map.put(error.getField(), error.getDefaultMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;code&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;校验失败&quot;</span>,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;out_trade_no&quot;</span>: <span class="string">&quot;不能为空&quot;</span>,</span><br><span class="line">    <span class="string">&quot;business_type&quot;</span>: <span class="string">&quot;订单类型不能为空&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大概有这么几个限制注解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Bean Validation 中内置的 constraint       </span><br><span class="line"> * @Null   被注释的元素必须为 null       </span><br><span class="line"> * @NotNull    被注释的元素必须不为 null       </span><br><span class="line"> * @AssertTrue     被注释的元素必须为 true       </span><br><span class="line"> * @AssertFalse    被注释的元素必须为 false       </span><br><span class="line"> * @Min(value)     被注释的元素必须是一个数字，其值必须大于等于指定的最小值       </span><br><span class="line"> * @Max(value)     被注释的元素必须是一个数字，其值必须小于等于指定的最大值       </span><br><span class="line"> * @DecimalMin(value)  被注释的元素必须是一个数字，其值必须大于等于指定的最小值       </span><br><span class="line"> * @DecimalMax(value)  被注释的元素必须是一个数字，其值必须小于等于指定的最大值       </span><br><span class="line"> * @Size(max&#x3D;, min&#x3D;)   被注释的元素的大小必须在指定的范围内       </span><br><span class="line"> * @Digits (integer, fraction)     被注释的元素必须是一个数字，其值必须在可接受的范围内       </span><br><span class="line"> * @Past   被注释的元素必须是一个过去的日期       </span><br><span class="line"> * @Future     被注释的元素必须是一个将来的日期       </span><br><span class="line"> * @Pattern(regex&#x3D;,flag&#x3D;)  被注释的元素必须符合指定的正则表达式       </span><br><span class="line"> * Hibernate Validator 附加的 constraint       </span><br><span class="line"> * @NotBlank(message &#x3D;)   验证字符串非null，且长度必须大于0       </span><br><span class="line"> * @Email  被注释的元素必须是电子邮箱地址       </span><br><span class="line"> * @Length(min&#x3D;,max&#x3D;)  被注释的字符串的大小必须在指定的范围内       </span><br><span class="line"> * @NotEmpty   被注释的字符串的必须非空       </span><br><span class="line"> * @Range(min&#x3D;,max&#x3D;,message&#x3D;)  被注释的元素必须在合适的范围内 </span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
